import codepipeline = require('@aws-cdk/aws-codepipeline-api');
import events = require('@aws-cdk/aws-events');
import iam = require('@aws-cdk/aws-iam');
import cdk = require('@aws-cdk/cdk');
import { CommonPipelineSourceActionProps, PipelineSourceAction } from './pipeline-action';
/**
 * Represents an ECR repository.
 */
export interface IRepository {
    /**
     * The name of the repository
     */
    readonly repositoryName: string;
    /**
     * The ARN of the repository
     */
    readonly repositoryArn: string;
    /**
     * The URI of this repository (represents the latest image):
     *
     *    ACCOUNT.dkr.ecr.REGION.amazonaws.com/REPOSITORY
     *
     */
    readonly repositoryUri: string;
    /**
     * Returns the URI of the repository for a certain tag. Can be used in `docker push/pull`.
     *
     *    ACCOUNT.dkr.ecr.REGION.amazonaws.com/REPOSITORY[:TAG]
     *
     * @param tag Image tag to use (tools usually default to "latest" if omitted)
     */
    repositoryUriForTag(tag?: string): string;
    /**
     * Add a policy statement to the repository's resource policy
     */
    addToResourcePolicy(statement: iam.PolicyStatement): void;
    /**
     * Convenience method for creating a new {@link PipelineSourceAction},
     * and adding it to the given Stage.
     *
     * @param stage the Pipeline Stage to add the new Action to
     * @param name the name of the newly created Action
     * @param props the optional construction properties of the new Action
     * @returns the newly created {@link PipelineSourceAction}
     */
    addToPipeline(stage: codepipeline.IStage, name: string, props?: CommonPipelineSourceActionProps): PipelineSourceAction;
    /**
     * Grant the given principal identity permissions to perform the actions on this repository
     */
    grant(identity?: iam.IPrincipal, ...actions: string[]): void;
    /**
     * Grant the given identity permissions to pull images in this repository.
     */
    grantPull(identity?: iam.IPrincipal): void;
    /**
     * Grant the given identity permissions to pull and push images to this repository.
     */
    grantPullPush(identity?: iam.IPrincipal): void;
    /**
     * Defines an AWS CloudWatch event rule that can trigger a target when an image is pushed to this
     * repository.
     * @param name The name of the rule
     * @param target An IEventRuleTarget to invoke when this event happens (you can add more targets using `addTarget`)
     * @param imageTag Only trigger on the specific image tag
     */
    onImagePushed(name: string, target?: events.IEventRuleTarget, imageTag?: string): events.EventRule;
}
export interface ImportRepositoryProps {
    /**
     * The ARN of the repository to import.
     *
     * At least one of `repositoryArn` or `repositoryName` is required.
     *
     * @default If you only have a repository name and the repository is in the same
     * account/region as the current stack, you can set `repositoryName` instead
     * and the ARN will be formatted with the current region and account.
     */
    repositoryArn?: string;
    /**
     * The full name of the repository to import.
     *
     * This is only needed if the repository ARN is not a concrete string, in which
     * case it is impossible to safely parse the ARN and extract full repository
     * names from it if it includes multiple components (e.g. `foo/bar/myrepo`).
     *
     * If the repository is in the same region/account as the stack, it is sufficient
     * to only specify the repository name.
     */
    repositoryName?: string;
}
/**
 * Base class for ECR repository. Reused between imported repositories and owned repositories.
 */
export declare abstract class RepositoryBase extends cdk.Construct implements IRepository {
    /**
     * Import a repository
     */
    static import(parent: cdk.Construct, id: string, props: ImportRepositoryProps): IRepository;
    /**
     * Returns an ECR ARN for a repository that resides in the same account/region
     * as the current stack.
     */
    static arnForLocalRepository(repositoryName: string): string;
    /**
     * The name of the repository
     */
    abstract readonly repositoryName: string;
    /**
     * The ARN of the repository
     */
    abstract readonly repositoryArn: string;
    /**
     * Add a policy statement to the repository's resource policy
     */
    abstract addToResourcePolicy(statement: iam.PolicyStatement): void;
    /**
     * The URI of this repository (represents the latest image):
     *
     *    ACCOUNT.dkr.ecr.REGION.amazonaws.com/REPOSITORY
     *
     */
    readonly repositoryUri: string;
    /**
     * Returns the URL of the repository. Can be used in `docker push/pull`.
     *
     *    ACCOUNT.dkr.ecr.REGION.amazonaws.com/REPOSITORY[:TAG]
     *
     * @param tag Optional image tag
     */
    repositoryUriForTag(tag?: string): string;
    /**
     * Export this repository from the stack
     */
    export(): ImportRepositoryProps;
    addToPipeline(stage: codepipeline.IStage, name: string, props?: CommonPipelineSourceActionProps): PipelineSourceAction;
    /**
     * Defines an AWS CloudWatch event rule that can trigger a target when an image is pushed to this
     * repository.
     * @param name The name of the rule
     * @param target An IEventRuleTarget to invoke when this event happens (you can add more targets using `addTarget`)
     * @param imageTag Only trigger on the specific image tag
     */
    onImagePushed(name: string, target?: events.IEventRuleTarget, imageTag?: string): events.EventRule;
    /**
     * Grant the given principal identity permissions to perform the actions on this repository
     */
    grant(identity?: iam.IPrincipal, ...actions: string[]): void;
    /**
     * Grant the given identity permissions to use the images in this repository
     */
    grantPull(identity?: iam.IPrincipal): void;
    /**
     * Grant the given identity permissions to pull and push images to this repository.
     */
    grantPullPush(identity?: iam.IPrincipal): void;
}

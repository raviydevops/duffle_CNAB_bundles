"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events = require("@aws-cdk/aws-events");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const pipeline_action_1 = require("./pipeline-action");
/**
 * Base class for ECR repository. Reused between imported repositories and owned repositories.
 */
class RepositoryBase extends cdk.Construct {
    /**
     * Import a repository
     */
    static import(parent, id, props) {
        return new ImportedRepository(parent, id, props);
    }
    /**
     * Returns an ECR ARN for a repository that resides in the same account/region
     * as the current stack.
     */
    static arnForLocalRepository(repositoryName) {
        return cdk.ArnUtils.fromComponents({
            service: 'ecr',
            resource: 'repository',
            resourceName: repositoryName
        });
    }
    /**
     * The URI of this repository (represents the latest image):
     *
     *    ACCOUNT.dkr.ecr.REGION.amazonaws.com/REPOSITORY
     *
     */
    get repositoryUri() {
        return this.repositoryUriForTag();
    }
    /**
     * Returns the URL of the repository. Can be used in `docker push/pull`.
     *
     *    ACCOUNT.dkr.ecr.REGION.amazonaws.com/REPOSITORY[:TAG]
     *
     * @param tag Optional image tag
     */
    repositoryUriForTag(tag) {
        const tagSuffix = tag ? `:${tag}` : '';
        const parts = cdk.ArnUtils.parse(this.repositoryArn);
        return `${parts.account}.dkr.ecr.${parts.region}.amazonaws.com/${this.repositoryName}${tagSuffix}`;
    }
    /**
     * Export this repository from the stack
     */
    export() {
        return {
            repositoryArn: new cdk.Output(this, 'RepositoryArn', { value: this.repositoryArn }).makeImportValue().toString(),
            repositoryName: new cdk.Output(this, 'RepositoryName', { value: this.repositoryName }).makeImportValue().toString()
        };
    }
    addToPipeline(stage, name, props = {}) {
        return new pipeline_action_1.PipelineSourceAction(this, name, Object.assign({ stage, repository: this }, props));
    }
    /**
     * Defines an AWS CloudWatch event rule that can trigger a target when an image is pushed to this
     * repository.
     * @param name The name of the rule
     * @param target An IEventRuleTarget to invoke when this event happens (you can add more targets using `addTarget`)
     * @param imageTag Only trigger on the specific image tag
     */
    onImagePushed(name, target, imageTag) {
        return new events.EventRule(this, name, {
            targets: target ? [target] : undefined,
            eventPattern: {
                source: ['aws.ecr'],
                detail: {
                    eventName: [
                        'PutImage',
                    ],
                    requestParameters: {
                        repositoryName: [
                            this.repositoryName,
                        ],
                        imageTag: imageTag ? [imageTag] : undefined,
                    },
                },
            },
        });
    }
    /**
     * Grant the given principal identity permissions to perform the actions on this repository
     */
    grant(identity, ...actions) {
        if (!identity) {
            return;
        }
        identity.addToPolicy(new iam.PolicyStatement()
            .addResource(this.repositoryArn)
            .addActions(...actions));
    }
    /**
     * Grant the given identity permissions to use the images in this repository
     */
    grantPull(identity) {
        this.grant(identity, "ecr:BatchCheckLayerAvailability", "ecr:GetDownloadUrlForLayer", "ecr:BatchGetImage");
        if (identity) {
            identity.addToPolicy(new iam.PolicyStatement()
                .addActions("ecr:GetAuthorizationToken", "logs:CreateLogStream", "logs:PutLogEvents")
                .addAllResources());
        }
    }
    /**
     * Grant the given identity permissions to pull and push images to this repository.
     */
    grantPullPush(identity) {
        this.grantPull(identity);
        this.grant(identity, "ecr:PutImage", "ecr:InitiateLayerUpload", "ecr:UploadLayerPart", "ecr:CompleteLayerUpload");
    }
}
exports.RepositoryBase = RepositoryBase;
/**
 * An already existing repository
 */
class ImportedRepository extends RepositoryBase {
    constructor(parent, id, props) {
        super(parent, id);
        if (props.repositoryArn) {
            this.repositoryArn = props.repositoryArn;
        }
        else {
            if (!props.repositoryName) {
                throw new Error('If "repositoruyArn" is not specified, you must specify "repositoryName", ' +
                    'which also implies that the repository resides in the same region/account as this stack');
            }
            this.repositoryArn = RepositoryBase.arnForLocalRepository(props.repositoryName);
        }
        if (props.repositoryName) {
            this.repositoryName = props.repositoryName;
        }
        else {
            // if repositoryArn is a token, the repository name is also required. this is because
            // repository names can include "/" (e.g. foo/bar/myrepo) and it is impossible to
            // parse the name from an ARN using CloudFormation's split/select.
            if (cdk.unresolved(this.repositoryArn)) {
                throw new Error('repositoryArn is a late-bound value, and therefore repositoryName is required');
            }
            this.repositoryName = this.repositoryArn.split('/').slice(1).join('/');
        }
    }
    addToResourcePolicy(_statement) {
        // FIXME: Add annotation about policy we dropped on the floor
    }
}
//# sourceMappingURL=data:application/json;base64,
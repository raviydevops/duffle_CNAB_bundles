"use strict";
const lib_1 = require("../../lib");
class StackWithPostProcessor extends lib_1.Stack {
    // ...
    toCloudFormation() {
        const template = super.toCloudFormation();
        // manipulate template (e.g. rename "Key" to "key")
        template.Resources.myResource.Properties.Environment.key =
            template.Resources.myResource.Properties.Environment.Key;
        delete template.Resources.myResource.Properties.Environment.Key;
        return template;
    }
}
module.exports = {
    'a stack can be serialized into a CloudFormation template, initially it\'s empty'(test) {
        const stack = new lib_1.Stack();
        test.deepEqual(stack.toCloudFormation(), {});
        test.done();
    },
    'stack objects have some template-level propeties, such as Description, Version, Transform'(test) {
        const stack = new lib_1.Stack();
        stack.templateOptions.templateFormatVersion = 'MyTemplateVersion';
        stack.templateOptions.description = 'This is my description';
        stack.templateOptions.transform = 'SAMy';
        test.deepEqual(stack.toCloudFormation(), {
            Description: 'This is my description',
            AWSTemplateFormatVersion: 'MyTemplateVersion',
            Transform: 'SAMy'
        });
        test.done();
    },
    'Stack.find(c) can be used to find the stack from any point in the tree'(test) {
        const stack = new lib_1.Stack();
        const level1 = new lib_1.Construct(stack, 'level1');
        const level2 = new lib_1.Construct(level1, 'level2');
        const level3 = new lib_1.Construct(level2, 'level3');
        const res1 = new lib_1.Resource(level1, 'childoflevel1', { type: 'MyResourceType1' });
        const res2 = new lib_1.Resource(level3, 'childoflevel3', { type: 'MyResourceType2' });
        test.equal(lib_1.Stack.find(res1), stack);
        test.equal(lib_1.Stack.find(res2), stack);
        test.equal(lib_1.Stack.find(level2), stack);
        const root = new lib_1.Root();
        const child = new lib_1.Construct(root, 'child');
        test.throws(() => lib_1.Stack.find(child));
        test.throws(() => lib_1.Stack.find(root));
        test.done();
    },
    'Stack.isStack indicates that a construct is a stack'(test) {
        const stack = new lib_1.Stack();
        const c = new lib_1.Construct(stack, 'Construct');
        test.ok(lib_1.Stack.isStack(stack));
        test.ok(!lib_1.Stack.isStack(c));
        test.done();
    },
    'stack.id is not included in the logical identities of resources within it'(test) {
        const stack = new lib_1.Stack(undefined, 'MyStack');
        new lib_1.Resource(stack, 'MyResource', { type: 'MyResourceType' });
        test.deepEqual(stack.toCloudFormation(), { Resources: { MyResource: { Type: 'MyResourceType' } } });
        test.done();
    },
    'stack.templateOptions can be used to set template-level options'(test) {
        const stack = new lib_1.Stack();
        stack.templateOptions.description = 'StackDescription';
        stack.templateOptions.templateFormatVersion = 'TemplateVersion';
        stack.templateOptions.transform = 'Transform';
        stack.templateOptions.metadata = {
            MetadataKey: 'MetadataValue'
        };
        test.deepEqual(stack.toCloudFormation(), {
            Description: 'StackDescription',
            Transform: 'Transform',
            AWSTemplateFormatVersion: 'TemplateVersion',
            Metadata: { MetadataKey: 'MetadataValue' }
        });
        test.done();
    },
    // This approach will only apply to TypeScript code, but at least it's a temporary
    // workaround for people running into issues caused by SDK-3003.
    // We should come up with a proper solution that involved jsii callbacks (when they exist)
    // so this can be implemented by jsii languages as well.
    'Overriding `Stack.toCloudFormation` allows arbitrary post-processing of the generated template during synthesis'(test) {
        const stack = new StackWithPostProcessor();
        new lib_1.Resource(stack, 'myResource', {
            type: 'AWS::MyResource',
            properties: {
                MyProp1: 'hello',
                MyProp2: 'howdy',
                Environment: {
                    Key: 'value'
                }
            }
        });
        test.deepEqual(stack.toCloudFormation(), { Resources: { myResource: { Type: 'AWS::MyResource',
                    Properties: { MyProp1: 'hello',
                        MyProp2: 'howdy',
                        Environment: { key: 'value' } } } } });
        test.done();
    },
    'Construct.findResource(logicalId) can be used to retrieve a resource by its path'(test) {
        const stack = new lib_1.Stack();
        test.ok(!stack.tryFindChild('foo'), 'empty stack');
        const r1 = new lib_1.Resource(stack, 'Hello', { type: 'MyResource' });
        test.equal(stack.findResource(r1.stackPath), r1, 'look up top-level');
        const child = new lib_1.Construct(stack, 'Child');
        const r2 = new lib_1.Resource(child, 'Hello', { type: 'MyResource' });
        test.equal(stack.findResource(r2.stackPath), r2, 'look up child');
        test.done();
    },
    'Stack.findResource will fail if the element is not a resource'(test) {
        const stack = new lib_1.Stack();
        const p = new lib_1.Parameter(stack, 'MyParam', { type: 'String' });
        test.throws(() => stack.findResource(p.path));
        test.done();
    },
    'Stack.getByPath can be used to find any CloudFormation element (Parameter, Output, etc)'(test) {
        const stack = new lib_1.Stack();
        const p = new lib_1.Parameter(stack, 'MyParam', { type: 'String' });
        const o = new lib_1.Output(stack, 'MyOutput');
        const c = new lib_1.Condition(stack, 'MyCondition');
        test.equal(stack.findChild(p.path), p);
        test.equal(stack.findChild(o.path), o);
        test.equal(stack.findChild(c.path), c);
        test.done();
    },
    'Stack names can have hyphens in them'(test) {
        const root = new lib_1.App();
        new lib_1.Stack(root, 'Hello-World');
        // Did not throw
        test.done();
    },
    'Include should support non-hash top-level template elements like "Description"'(test) {
        const stack = new lib_1.Stack();
        const template = {
            Description: 'hello, world'
        };
        new lib_1.Include(stack, 'Include', { template });
        const output = stack.toCloudFormation();
        test.equal(typeof output.Description, 'string');
        test.done();
    },
    'Can\'t add children during synthesis'(test) {
        const stack = new lib_1.Stack();
        // add a construct with a token that when resolved adds a child. this
        // means that this child is going to be added during synthesis and this
        // is a no-no.
        new lib_1.Resource(stack, 'Resource', { type: 'T', properties: {
                foo: new lib_1.Token(() => new lib_1.Construct(stack, 'Foo'))
            } });
        test.throws(() => stack.toCloudFormation(), /Cannot add children during synthesis/);
        // okay to add after synthesis
        new lib_1.Construct(stack, 'C1');
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,
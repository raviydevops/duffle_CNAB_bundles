"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_1 = require("@aws-cdk/cdk");
const cloudwatch_generated_1 = require("./cloudwatch.generated");
const layout_1 = require("./layout");
/**
 * A CloudWatch dashboard
 */
class Dashboard extends cdk_1.Construct {
    constructor(parent, name, props) {
        super(parent, name);
        this.rows = [];
        // WORKAROUND -- Dashboard cannot be updated if the DashboardName is missing.
        // This is a bug in CloudFormation, but we don't want CDK users to have a bad
        // experience. We'll generate a name here if you did not supply one.
        // See: https://github.com/awslabs/aws-cdk/issues/213
        const dashboardName = (props && props.dashboardName) || new cdk_1.Token(() => this.generateDashboardName());
        this.dashboard = new cloudwatch_generated_1.cloudformation.DashboardResource(this, 'Resource', {
            dashboardName,
            dashboardBody: new cdk_1.Token(() => {
                const column = new layout_1.Column(...this.rows);
                column.position(0, 0);
                return cdk_1.CloudFormationJSON.stringify({ widgets: column.toJson() });
            })
        });
    }
    /**
     * Add a widget to the dashboard.
     *
     * Widgets given in multiple calls to add() will be laid out stacked on
     * top of each other.
     *
     * Multiple widgets added in the same call to add() will be laid out next
     * to each other.
     */
    add(...widgets) {
        if (widgets.length === 0) {
            return;
        }
        const w = widgets.length > 1 ? new layout_1.Row(...widgets) : widgets[0];
        this.rows.push(w);
    }
    /**
     * Generate a unique dashboard name in case the user didn't supply one
     */
    generateDashboardName() {
        // Combination of stack name and LogicalID, which are guaranteed to be unique.
        const stack = cdk_1.Stack.find(this);
        return stack.name + '-' + this.dashboard.logicalId;
    }
}
exports.Dashboard = Dashboard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGFzaGJvYXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJFO0FBQzNFLGlFQUF3RDtBQUN4RCxxQ0FBdUM7QUFZdkM7O0dBRUc7QUFDSCxNQUFhLFNBQVUsU0FBUSxlQUFTO0lBSXRDLFlBQVksTUFBaUIsRUFBRSxJQUFZLEVBQUUsS0FBc0I7UUFDakUsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUpMLFNBQUksR0FBYyxFQUFFLENBQUM7UUFNcEMsNkVBQTZFO1FBQzdFLDZFQUE2RTtRQUM3RSxvRUFBb0U7UUFDcEUscURBQXFEO1FBQ3JELE1BQU0sYUFBYSxHQUFHLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxJQUFJLFdBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO1FBRXRHLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxxQ0FBYyxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDdEUsYUFBYTtZQUNiLGFBQWEsRUFBRSxJQUFJLFdBQUssQ0FBQyxHQUFHLEVBQUU7Z0JBQzVCLE1BQU0sTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN4QyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDdEIsT0FBTyx3QkFBa0IsQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNwRSxDQUFDLENBQUM7U0FDSCxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSSxHQUFHLENBQUMsR0FBRyxPQUFrQjtRQUM5QixJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3hCLE9BQU87U0FDUjtRQUVELE1BQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFlBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVEOztPQUVHO0lBQ0sscUJBQXFCO1FBQzNCLDhFQUE4RTtRQUM5RSxNQUFNLEtBQUssR0FBRyxXQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9CLE9BQU8sS0FBSyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7SUFDckQsQ0FBQztDQUNGO0FBakRELDhCQWlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsb3VkRm9ybWF0aW9uSlNPTiwgQ29uc3RydWN0LCBTdGFjaywgVG9rZW4gfSBmcm9tIFwiQGF3cy1jZGsvY2RrXCI7XG5pbXBvcnQgeyBjbG91ZGZvcm1hdGlvbiB9IGZyb20gJy4vY2xvdWR3YXRjaC5nZW5lcmF0ZWQnO1xuaW1wb3J0IHsgQ29sdW1uLCBSb3cgfSBmcm9tIFwiLi9sYXlvdXRcIjtcbmltcG9ydCB7IElXaWRnZXQgfSBmcm9tIFwiLi93aWRnZXRcIjtcblxuZXhwb3J0IGludGVyZmFjZSBEYXNoYm9hcmRQcm9wcyB7XG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBkYXNoYm9hcmRcbiAgICpcbiAgICogQGRlZmF1bHQgQXV0b21hdGljYWxseSBnZW5lcmF0ZWQgbmFtZVxuICAgKi9cbiAgZGFzaGJvYXJkTmFtZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIENsb3VkV2F0Y2ggZGFzaGJvYXJkXG4gKi9cbmV4cG9ydCBjbGFzcyBEYXNoYm9hcmQgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICBwcml2YXRlIHJlYWRvbmx5IHJvd3M6IElXaWRnZXRbXSA9IFtdO1xuICBwcml2YXRlIHJlYWRvbmx5IGRhc2hib2FyZDogY2xvdWRmb3JtYXRpb24uRGFzaGJvYXJkUmVzb3VyY2U7XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBDb25zdHJ1Y3QsIG5hbWU6IHN0cmluZywgcHJvcHM/OiBEYXNoYm9hcmRQcm9wcykge1xuICAgIHN1cGVyKHBhcmVudCwgbmFtZSk7XG5cbiAgICAvLyBXT1JLQVJPVU5EIC0tIERhc2hib2FyZCBjYW5ub3QgYmUgdXBkYXRlZCBpZiB0aGUgRGFzaGJvYXJkTmFtZSBpcyBtaXNzaW5nLlxuICAgIC8vIFRoaXMgaXMgYSBidWcgaW4gQ2xvdWRGb3JtYXRpb24sIGJ1dCB3ZSBkb24ndCB3YW50IENESyB1c2VycyB0byBoYXZlIGEgYmFkXG4gICAgLy8gZXhwZXJpZW5jZS4gV2UnbGwgZ2VuZXJhdGUgYSBuYW1lIGhlcmUgaWYgeW91IGRpZCBub3Qgc3VwcGx5IG9uZS5cbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hd3NsYWJzL2F3cy1jZGsvaXNzdWVzLzIxM1xuICAgIGNvbnN0IGRhc2hib2FyZE5hbWUgPSAocHJvcHMgJiYgcHJvcHMuZGFzaGJvYXJkTmFtZSkgfHwgbmV3IFRva2VuKCgpID0+IHRoaXMuZ2VuZXJhdGVEYXNoYm9hcmROYW1lKCkpO1xuXG4gICAgdGhpcy5kYXNoYm9hcmQgPSBuZXcgY2xvdWRmb3JtYXRpb24uRGFzaGJvYXJkUmVzb3VyY2UodGhpcywgJ1Jlc291cmNlJywge1xuICAgICAgZGFzaGJvYXJkTmFtZSxcbiAgICAgIGRhc2hib2FyZEJvZHk6IG5ldyBUb2tlbigoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbHVtbiA9IG5ldyBDb2x1bW4oLi4udGhpcy5yb3dzKTtcbiAgICAgICAgY29sdW1uLnBvc2l0aW9uKDAsIDApO1xuICAgICAgICByZXR1cm4gQ2xvdWRGb3JtYXRpb25KU09OLnN0cmluZ2lmeSh7IHdpZGdldHM6IGNvbHVtbi50b0pzb24oKSB9KTtcbiAgICAgIH0pXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgd2lkZ2V0IHRvIHRoZSBkYXNoYm9hcmQuXG4gICAqXG4gICAqIFdpZGdldHMgZ2l2ZW4gaW4gbXVsdGlwbGUgY2FsbHMgdG8gYWRkKCkgd2lsbCBiZSBsYWlkIG91dCBzdGFja2VkIG9uXG4gICAqIHRvcCBvZiBlYWNoIG90aGVyLlxuICAgKlxuICAgKiBNdWx0aXBsZSB3aWRnZXRzIGFkZGVkIGluIHRoZSBzYW1lIGNhbGwgdG8gYWRkKCkgd2lsbCBiZSBsYWlkIG91dCBuZXh0XG4gICAqIHRvIGVhY2ggb3RoZXIuXG4gICAqL1xuICBwdWJsaWMgYWRkKC4uLndpZGdldHM6IElXaWRnZXRbXSkge1xuICAgIGlmICh3aWRnZXRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHcgPSB3aWRnZXRzLmxlbmd0aCA+IDEgPyBuZXcgUm93KC4uLndpZGdldHMpIDogd2lkZ2V0c1swXTtcbiAgICB0aGlzLnJvd3MucHVzaCh3KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIHVuaXF1ZSBkYXNoYm9hcmQgbmFtZSBpbiBjYXNlIHRoZSB1c2VyIGRpZG4ndCBzdXBwbHkgb25lXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlRGFzaGJvYXJkTmFtZSgpOiBzdHJpbmcge1xuICAgIC8vIENvbWJpbmF0aW9uIG9mIHN0YWNrIG5hbWUgYW5kIExvZ2ljYWxJRCwgd2hpY2ggYXJlIGd1YXJhbnRlZWQgdG8gYmUgdW5pcXVlLlxuICAgIGNvbnN0IHN0YWNrID0gU3RhY2suZmluZCh0aGlzKTtcbiAgICByZXR1cm4gc3RhY2submFtZSArICctJyArIHRoaXMuZGFzaGJvYXJkLmxvZ2ljYWxJZDtcbiAgfVxufVxuIl19
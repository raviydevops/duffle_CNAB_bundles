"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_1 = require("@aws-cdk/cdk");
const util_statistic_1 = require("./util.statistic");
const widget_1 = require("./widget");
/**
 * Display the metric associated with an alarm, including the alarm line
 */
class AlarmWidget extends widget_1.ConcreteWidget {
    constructor(props) {
        super(props.width || 6, props.height || 6);
        this.props = props;
    }
    toJson() {
        return [{
                type: 'metric',
                width: this.width,
                height: this.height,
                x: this.x,
                y: this.y,
                properties: {
                    view: 'timeSeries',
                    title: this.props.title,
                    region: this.props.region || new cdk_1.AwsRegion(),
                    annotations: {
                        alarms: [this.props.alarm.alarmArn]
                    },
                    yAxis: {
                        left: this.props.leftAxisRange !== undefined ? this.props.leftAxisRange : { min: 0 }
                    }
                }
            }];
    }
}
exports.AlarmWidget = AlarmWidget;
/**
 * A dashboard widget that displays metrics
 */
class GraphWidget extends widget_1.ConcreteWidget {
    constructor(props) {
        super(props.width || 6, props.height || 6);
        this.props = props;
    }
    toJson() {
        return [{
                type: 'metric',
                width: this.width,
                height: this.height,
                x: this.x,
                y: this.y,
                properties: {
                    view: 'timeSeries',
                    title: this.props.title,
                    region: this.props.region || new cdk_1.AwsRegion(),
                    metrics: (this.props.left || []).map(m => metricJson(m, 'left')).concat((this.props.right || []).map(m => metricJson(m, 'right'))),
                    annotations: {
                        horizontal: (this.props.leftAnnotations || []).map(mapAnnotation('left')).concat((this.props.rightAnnotations || []).map(mapAnnotation('right')))
                    },
                    yAxis: {
                        left: this.props.leftAxisRange !== undefined ? this.props.leftAxisRange : { min: 0 },
                        right: this.props.rightAxisRange !== undefined ? this.props.rightAxisRange : { min: 0 },
                    }
                }
            }];
    }
}
exports.GraphWidget = GraphWidget;
/**
 * A dashboard widget that displays the most recent value for every metric
 */
class SingleValueWidget extends widget_1.ConcreteWidget {
    constructor(props) {
        super(props.width || 6, props.height || 3);
        this.props = props;
    }
    toJson() {
        return [{
                type: 'metric',
                width: this.width,
                height: this.height,
                x: this.x,
                y: this.y,
                properties: {
                    view: 'singleValue',
                    title: this.props.title,
                    region: this.props.region || new cdk_1.AwsRegion(),
                    metrics: this.props.metrics.map(m => metricJson(m, 'left'))
                }
            }];
    }
}
exports.SingleValueWidget = SingleValueWidget;
var Shading;
(function (Shading) {
    /**
     * Don't add shading
     */
    Shading["None"] = "none";
    /**
     * Add shading above the annotation
     */
    Shading["Above"] = "above";
    /**
     * Add shading below the annotation
     */
    Shading["Below"] = "below";
})(Shading = exports.Shading || (exports.Shading = {}));
function mapAnnotation(yAxis) {
    return (a) => {
        return Object.assign({}, a, { yAxis });
    };
}
/**
 * Return the JSON structure which represents this metric in a graph
 *
 * This will be called by GraphWidget, no need for clients to call this.
 */
function metricJson(metric, yAxis) {
    // Namespace and metric Name
    const ret = [
        metric.namespace,
        metric.metricName,
    ];
    // Dimensions
    for (const dim of metric.dimensionsAsList()) {
        ret.push(dim.name, dim.value);
    }
    // Options
    const stat = util_statistic_1.parseStatistic(metric.statistic);
    ret.push({
        yAxis,
        label: metric.label,
        color: metric.color,
        period: metric.periodSec,
        stat: stat.type === 'simple' ? stat.statistic : 'p' + stat.percentile.toString(),
    });
    return ret;
}
//# sourceMappingURL=data:application/json;base64,
"use strict";
const assert_1 = require("@aws-cdk/assert");
const cdk_1 = require("@aws-cdk/cdk");
const lib_1 = require("../lib");
/**
 * Returns a property predicate that checks that the given Dashboard has the indicated widgets
 */
function thatHasWidgets(widgets) {
    return (props) => {
        try {
            const actualWidgets = JSON.parse(props.DashboardBody).widgets;
            return assert_1.isSuperObject(actualWidgets, widgets);
        }
        catch (e) {
            // tslint:disable-next-line:no-console
            console.error('Error parsing', props);
            throw e;
        }
    };
}
module.exports = {
    'widgets in different adds are laid out underneath each other'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        const dashboard = new lib_1.Dashboard(stack, 'Dash');
        // WHEN
        dashboard.add(new lib_1.TextWidget({
            width: 10,
            height: 2,
            markdown: "first"
        }));
        dashboard.add(new lib_1.TextWidget({
            width: 1,
            height: 4,
            markdown: "second"
        }));
        dashboard.add(new lib_1.TextWidget({
            width: 4,
            height: 1,
            markdown: "third"
        }));
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Dashboard', thatHasWidgets([
            { type: 'text', width: 10, height: 2, x: 0, y: 0, properties: { markdown: 'first' } },
            { type: 'text', width: 1, height: 4, x: 0, y: 2, properties: { markdown: 'second' } },
            { type: 'text', width: 4, height: 1, x: 0, y: 6, properties: { markdown: 'third' } },
        ])));
        test.done();
    },
    'widgets in same add are laid out next to each other'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        const dashboard = new lib_1.Dashboard(stack, 'Dash');
        // WHEN
        dashboard.add(new lib_1.TextWidget({
            width: 10,
            height: 2,
            markdown: "first"
        }), new lib_1.TextWidget({
            width: 1,
            height: 4,
            markdown: "second"
        }), new lib_1.TextWidget({
            width: 4,
            height: 1,
            markdown: "third"
        }));
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Dashboard', thatHasWidgets([
            { type: 'text', width: 10, height: 2, x: 0, y: 0, properties: { markdown: 'first' } },
            { type: 'text', width: 1, height: 4, x: 10, y: 0, properties: { markdown: 'second' } },
            { type: 'text', width: 4, height: 1, x: 11, y: 0, properties: { markdown: 'third' } },
        ])));
        test.done();
    },
    'tokens in widgets are retained'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        const dashboard = new lib_1.Dashboard(stack, 'Dash');
        // WHEN
        dashboard.add(new lib_1.GraphWidget({ width: 1, height: 1 }) // GraphWidget has internal reference to current region
        );
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Dashboard', {
            DashboardBody: { "Fn::Join": ["", [
                        "{\"widgets\":[{\"type\":\"metric\",\"width\":1,\"height\":1,\"x\":0,\"y\":0,\"properties\":{\"view\":\"timeSeries\",\"region\":\"",
                        { Ref: "AWS::Region" },
                        "\",\"metrics\":[],\"annotations\":{\"horizontal\":[]},\"yAxis\":{\"left\":{\"min\":0},\"right\":{\"min\":0}}}}]}"
                    ]] }
        }));
        test.done();
    },
    'work around CloudFormation bug'(test) {
        // See: https://github.com/awslabs/aws-cdk/issues/213
        // GIVEN
        const app = new cdk_1.App();
        const stack = new cdk_1.Stack(app, 'MyStack');
        // WHEN
        new lib_1.Dashboard(stack, 'MyDashboard');
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Dashboard', {
            DashboardName: 'MyStack-MyDashboardCD351363'
        }));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,
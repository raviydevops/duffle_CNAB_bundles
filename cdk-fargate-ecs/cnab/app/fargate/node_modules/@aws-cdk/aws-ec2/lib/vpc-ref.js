"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_1 = require("@aws-cdk/cdk");
const util_1 = require("./util");
const vpc_network_provider_1 = require("./vpc-network-provider");
/**
 * The type of Subnet
 */
var SubnetType;
(function (SubnetType) {
    /**
     * Isolated Subnets do not route Outbound traffic
     *
     * This can be good for subnets with RDS or
     * Elasticache endpoints
     */
    SubnetType[SubnetType["Isolated"] = 1] = "Isolated";
    /**
     * Subnet that routes to the internet, but not vice versa.
     *
     * Instances in a private subnet can connect to the Internet, but will not
     * allow connections to be initiated from the Internet.
     *
     * Outbound traffic will be routed via a NAT Gateway. Preference being in
     * the same AZ, but if not available will use another AZ (control by
     * specifing `maxGateways` on VpcNetwork). This might be used for
     * experimental cost conscious accounts or accounts where HA outbound
     * traffic is not needed.
     */
    SubnetType[SubnetType["Private"] = 2] = "Private";
    /**
     * Subnet connected to the Internet
     *
     * Instances in a Public subnet can connect to the Internet and can be
     * connected to from the Internet as long as they are launched with public
     * IPs (controlled on the AutoScalingGroup or other constructs that launch
     * instances).
     *
     * Public subnets route outbound traffic via an Internet Gateway.
     */
    SubnetType[SubnetType["Public"] = 3] = "Public";
})(SubnetType = exports.SubnetType || (exports.SubnetType = {}));
/**
 * A new or imported VPC
 */
class VpcNetworkRef extends cdk_1.Construct {
    constructor() {
        super(...arguments);
        /**
         * Parts of the VPC that constitute full construction
         */
        this.dependencyElements = [];
        /**
         * Dependencies for internet connectivity
         */
        this.internetDependencies = new Array();
    }
    /**
     * Import an exported VPC
     */
    static import(parent, name, props) {
        return new ImportedVpcNetwork(parent, name, props);
    }
    /**
     * Import an existing VPC from context
     */
    static importFromContext(parent, name, props) {
        return VpcNetworkRef.import(parent, name, new vpc_network_provider_1.VpcNetworkProvider(parent, props).vpcProps);
    }
    /**
     * Return the subnets appropriate for the placement strategy
     */
    subnets(placement = {}) {
        if (placement.subnetsToUse !== undefined && placement.subnetName !== undefined) {
            throw new Error('At most one of subnetsToUse and subnetName can be supplied');
        }
        // Select by name
        if (placement.subnetName !== undefined) {
            const allSubnets = this.privateSubnets.concat(this.publicSubnets).concat(this.isolatedSubnets);
            const selectedSubnets = allSubnets.filter(s => util_1.subnetName(s) === placement.subnetName);
            if (selectedSubnets.length === 0) {
                throw new Error(`No subnets with name: ${placement.subnetName}`);
            }
            return selectedSubnets;
        }
        // Select by type
        if (placement.subnetsToUse === undefined) {
            return this.privateSubnets;
        }
        return {
            [SubnetType.Isolated]: this.isolatedSubnets,
            [SubnetType.Private]: this.privateSubnets,
            [SubnetType.Public]: this.publicSubnets,
        }[placement.subnetsToUse];
    }
    /**
     * Export this VPC from the stack
     */
    export() {
        const pub = new util_1.ExportSubnetGroup(this, 'PublicSubnetIDs', this.publicSubnets, SubnetType.Public, this.availabilityZones.length);
        const priv = new util_1.ExportSubnetGroup(this, 'PrivateSubnetIDs', this.privateSubnets, SubnetType.Private, this.availabilityZones.length);
        const iso = new util_1.ExportSubnetGroup(this, 'IsolatedSubnetIDs', this.isolatedSubnets, SubnetType.Isolated, this.availabilityZones.length);
        return {
            vpcId: new cdk_1.Output(this, 'VpcId', { value: this.vpcId }).makeImportValue().toString(),
            availabilityZones: this.availabilityZones,
            publicSubnetIds: pub.ids,
            publicSubnetNames: pub.names,
            privateSubnetIds: priv.ids,
            privateSubnetNames: priv.names,
            isolatedSubnetIds: iso.ids,
            isolatedSubnetNames: iso.names,
        };
    }
    /**
     * Return whether the given subnet is one of this VPC's public subnets.
     *
     * The subnet must literally be one of the subnet object obtained from
     * this VPC. A subnet that merely represents the same subnet will
     * never return true.
     */
    isPublicSubnet(subnet) {
        return this.publicSubnets.indexOf(subnet) > -1;
    }
    /**
     * Take a dependency on internet connectivity having been added to this VPC
     *
     * Take a dependency on this if your constructs need an Internet Gateway
     * added to the VPC before they can be constructed.
     *
     * This method is for construct authors; application builders should not
     * need to call this.
     */
    internetDependency() {
        return new DependencyList(this.internetDependencies);
    }
}
exports.VpcNetworkRef = VpcNetworkRef;
/**
 * An imported VpcNetwork
 */
class ImportedVpcNetwork extends VpcNetworkRef {
    constructor(parent, name, props) {
        super(parent, name);
        this.vpcId = props.vpcId;
        this.availabilityZones = props.availabilityZones;
        // tslint:disable:max-line-length
        const pub = new util_1.ImportSubnetGroup(props.publicSubnetIds, props.publicSubnetNames, SubnetType.Public, this.availabilityZones, 'publicSubnetIds', 'publicSubnetNames');
        const priv = new util_1.ImportSubnetGroup(props.privateSubnetIds, props.privateSubnetNames, SubnetType.Private, this.availabilityZones, 'privateSubnetIds', 'privateSubnetNames');
        const iso = new util_1.ImportSubnetGroup(props.isolatedSubnetIds, props.isolatedSubnetNames, SubnetType.Isolated, this.availabilityZones, 'isolatedSubnetIds', 'isolatedSubnetNames');
        // tslint:enable:max-line-length
        this.publicSubnets = pub.import(this);
        this.privateSubnets = priv.import(this);
        this.isolatedSubnets = iso.import(this);
    }
}
/**
 * A new or imported VPC Subnet
 */
class VpcSubnetRef extends cdk_1.Construct {
    constructor() {
        super(...arguments);
        /**
         * Parts of this VPC subnet
         */
        this.dependencyElements = [];
    }
    static import(parent, name, props) {
        return new ImportedVpcSubnet(parent, name, props);
    }
}
exports.VpcSubnetRef = VpcSubnetRef;
/**
 * Subnet of an imported VPC
 */
class ImportedVpcSubnet extends VpcSubnetRef {
    constructor(parent, name, props) {
        super(parent, name);
        this.availabilityZone = props.availabilityZone;
        this.subnetId = props.subnetId;
    }
}
/**
 * Allows using an array as a list of dependables.
 */
class DependencyList {
    constructor(dependenclyElements) {
        this.dependenclyElements = dependenclyElements;
    }
    get dependencyElements() {
        return this.dependenclyElements;
    }
}
//# sourceMappingURL=data:application/json;base64,
import cdk = require('@aws-cdk/cdk');
import { SubnetType, VpcSubnetRef } from "./vpc-ref";
/**
 * Turn an arbitrary string into one that can be used as a CloudFormation identifier by stripping special characters
 *
 * (At the moment, no efforts are taken to prevent collissions, but we can add that later when it becomes necessary).
 */
export declare function slugify(x: string): string;
/**
 * The default names for every subnet type
 */
export declare const DEFAULT_SUBNET_NAME: {
    [SubnetType.Public]: string;
    [SubnetType.Private]: string;
    [SubnetType.Isolated]: string;
};
/**
 * Return a subnet name from its construct ID
 *
 * All subnet names look like NAME <> "Subnet" <> INDEX
 */
export declare function subnetName(subnet: VpcSubnetRef): string;
/**
 * Make the subnet construct ID from a name and number
 */
export declare function subnetId(name: string, i: number): string;
/**
 * Helper class to export/import groups of subnets
 */
export declare class ExportSubnetGroup {
    private readonly subnets;
    private readonly type;
    private readonly azs;
    readonly ids?: string[];
    readonly names?: string[];
    private readonly groups;
    constructor(parent: cdk.Construct, exportName: string, subnets: VpcSubnetRef[], type: SubnetType, azs: number);
    private exportIds;
    /**
     * Return the list of subnet names if they're not equal to the default
     */
    private exportNames;
}
export declare class ImportSubnetGroup {
    private readonly availabilityZones;
    private readonly subnetIds;
    private readonly names;
    private readonly groups;
    constructor(subnetIds: string[] | undefined, names: string[] | undefined, type: SubnetType, availabilityZones: string[], idField: string, nameField: string);
    import(parent: cdk.Construct): VpcSubnetRef[];
    /**
     * Return a list with a name for every subnet
     */
    private normalizeNames;
    /**
     * Return the i'th AZ
     */
    private pickAZ;
}
/**
 * Generate the list of numbers of [0..n)
 */
export declare function range(n: number): number[];

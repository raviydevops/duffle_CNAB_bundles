"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * What class and generation of instance to use
 *
 * We have both symbolic and concrete enums for every type.
 *
 * The first are for people that want to specify by purpose,
 * the second one are for people who already know exactly what
 * 'R4' means.
 */
var InstanceClass;
(function (InstanceClass) {
    /**
     * Standard instances, 3rd generation
     */
    InstanceClass["Standard3"] = "m3";
    /**
     * Standard instances, 3rd generation
     */
    InstanceClass["M3"] = "m3";
    /**
     * Standard instances, 4th generation
     */
    InstanceClass["Standard4"] = "m4";
    /**
     * Standard instances, 4th generation
     */
    InstanceClass["M4"] = "m4";
    /**
     * Standard instances, 5th generation
     */
    InstanceClass["Standard5"] = "m5";
    /**
     * Standard instances, 5th generation
     */
    InstanceClass["M5"] = "m5";
    /**
     * Memory optimized instances, 3rd generation
     */
    InstanceClass["Memory3"] = "r3";
    /**
     * Memory optimized instances, 3rd generation
     */
    InstanceClass["R3"] = "r3";
    /**
     * Memory optimized instances, 3rd generation
     */
    InstanceClass["Memory4"] = "r4";
    /**
     * Memory optimized instances, 3rd generation
     */
    InstanceClass["R4"] = "r4";
    /**
     * Compute optimized instances, 3rd generation
     */
    InstanceClass["Compute3"] = "c3";
    /**
     * Compute optimized instances, 3rd generation
     */
    InstanceClass["C3"] = "c3";
    /**
     * Compute optimized instances, 4th generation
     */
    InstanceClass["Compute4"] = "c4";
    /**
     * Compute optimized instances, 4th generation
     */
    InstanceClass["C4"] = "c4";
    /**
     * Compute optimized instances, 5th generation
     */
    InstanceClass["Compute5"] = "c5";
    /**
     * Compute optimized instances, 5th generation
     */
    InstanceClass["C5"] = "c5";
    /**
     * Storage-optimized instances, 2nd generation
     */
    InstanceClass["Storage2"] = "d2";
    /**
     * Storage-optimized instances, 2nd generation
     */
    InstanceClass["D2"] = "d2";
    /**
     * Storage/compute balanced instances, 1st generation
     */
    InstanceClass["StorageCompute1"] = "h1";
    /**
     * Storage/compute balanced instances, 1st generation
     */
    InstanceClass["H1"] = "h1";
    /**
     * I/O-optimized instances, 3rd generation
     */
    InstanceClass["Io3"] = "i3";
    /**
     * I/O-optimized instances, 3rd generation
     */
    InstanceClass["I3"] = "i3";
    /**
     * Burstable instances, 2nd generation
     */
    InstanceClass["Burstable2"] = "t2";
    /**
     * Burstable instances, 2nd generation
     */
    InstanceClass["T2"] = "t2";
    /**
     * Burstable instances, 3rd generation
     */
    InstanceClass["Burstable3"] = "t3";
    /**
     * Burstable instances, 3rd generation
     */
    InstanceClass["T3"] = "t3";
    /**
     * Memory-intensive instances, 1st generation
     */
    InstanceClass["MemoryIntensive1"] = "x1";
    /**
     * Memory-intensive instances, 1st generation
     */
    InstanceClass["X1"] = "x1";
    /**
     * Memory-intensive instances, extended, 1st generation
     */
    InstanceClass["MemoryIntensive1Extended"] = "x1e";
    /**
     * Memory-intensive instances, 1st generation
     */
    InstanceClass["X1e"] = "x1e";
    /**
     * Instances with customizable hardware acceleration, 1st generation
     */
    InstanceClass["Fpga1"] = "f1";
    /**
     * Instances with customizable hardware acceleration, 1st generation
     */
    InstanceClass["F1"] = "f1";
    /**
     * Graphics-optimized instances, 3rd generation
     */
    InstanceClass["Graphics3"] = "g3";
    /**
     * Graphics-optimized instances, 3rd generation
     */
    InstanceClass["G3"] = "g3";
    /**
     * Parallel-processing optimized instances, 2nd generation
     */
    InstanceClass["Parallel2"] = "p2";
    /**
     * Parallel-processing optimized instances, 2nd generation
     */
    InstanceClass["P2"] = "p2";
    /**
     * Parallel-processing optimized instances, 3nd generation
     */
    InstanceClass["Parallel3"] = "p3";
    /**
     * Parallel-processing optimized instances, 3nd generation
     */
    InstanceClass["P3"] = "p3";
})(InstanceClass = exports.InstanceClass || (exports.InstanceClass = {}));
/**
 * What size of instance to use
 */
var InstanceSize;
(function (InstanceSize) {
    InstanceSize["None"] = "nano";
    InstanceSize["Micro"] = "micro";
    InstanceSize["Small"] = "small";
    InstanceSize["Medium"] = "medium";
    InstanceSize["Large"] = "large";
    InstanceSize["XLarge"] = "xlarge";
    InstanceSize["XLarge2"] = "2xlarge";
    InstanceSize["XLarge4"] = "4xlarge";
    InstanceSize["XLarge8"] = "8xlarge";
    InstanceSize["XLarge9"] = "9xlarge";
    InstanceSize["XLarge10"] = "10xlarge";
    InstanceSize["XLarge12"] = "12xlarge";
    InstanceSize["XLarge16"] = "16xlarge";
    InstanceSize["XLarge18"] = "18xlarge";
    InstanceSize["XLarge24"] = "24xlarge";
    InstanceSize["XLarge32"] = "32xlarge";
})(InstanceSize = exports.InstanceSize || (exports.InstanceSize = {}));
/**
 * Instance type for EC2 instances
 *
 * This class takes a literal string, good if you already
 * know the identifier of the type you want.
 */
class InstanceType {
    constructor(instanceTypeIdentifier) {
        this.instanceTypeIdentifier = instanceTypeIdentifier;
    }
    /**
     * Return the instance type as a dotted string
     */
    toString() {
        return this.instanceTypeIdentifier;
    }
}
exports.InstanceType = InstanceType;
/**
 * Instance type for EC2 instances
 *
 * This class takes a combination of a class and size.
 *
 * Be aware that not all combinations of class and size are available, and not all
 * classes are available in all regions.
 */
class InstanceTypePair extends InstanceType {
    constructor(instanceClass, instanceSize) {
        super(instanceClass + '.' + instanceSize);
        this.instanceClass = instanceClass;
        this.instanceSize = instanceSize;
    }
}
exports.InstanceTypePair = InstanceTypePair;
//# sourceMappingURL=data:application/json;base64,
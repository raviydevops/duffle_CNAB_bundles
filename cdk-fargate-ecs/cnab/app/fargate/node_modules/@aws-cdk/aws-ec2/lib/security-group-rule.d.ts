import { Connections, IConnectable } from "./connections";
/**
 * Interface for classes that provide the peer-specification parts of a security group rule
 */
export interface ISecurityGroupRule {
    /**
     * Whether the rule can be inlined into a SecurityGroup or not
     */
    readonly canInlineRule: boolean;
    /**
     * A unique identifier for this connection peer
     */
    readonly uniqueId: string;
    /**
     * Produce the ingress rule JSON for the given connection
     */
    toIngressRuleJSON(): any;
    /**
     * Produce the egress rule JSON for the given connection
     */
    toEgressRuleJSON(): any;
}
/**
 * A connection to and from a given IP range
 */
export declare class CidrIPv4 implements ISecurityGroupRule, IConnectable {
    private readonly cidrIp;
    readonly canInlineRule = true;
    readonly connections: Connections;
    readonly uniqueId: string;
    constructor(cidrIp: string);
    /**
     * Produce the ingress rule JSON for the given connection
     */
    toIngressRuleJSON(): any;
    /**
     * Produce the egress rule JSON for the given connection
     */
    toEgressRuleJSON(): any;
}
/**
 * Any IPv4 address
 */
export declare class AnyIPv4 extends CidrIPv4 {
    constructor();
}
/**
 * A connection to a from a given IPv6 range
 */
export declare class CidrIPv6 implements ISecurityGroupRule, IConnectable {
    private readonly cidrIpv6;
    readonly canInlineRule = true;
    readonly connections: Connections;
    readonly uniqueId: string;
    constructor(cidrIpv6: string);
    /**
     * Produce the ingress rule JSON for the given connection
     */
    toIngressRuleJSON(): any;
    /**
     * Produce the egress rule JSON for the given connection
     */
    toEgressRuleJSON(): any;
}
/**
 * Any IPv6 address
 */
export declare class AnyIPv6 extends CidrIPv6 {
    constructor();
}
/**
 * A prefix list
 *
 * Prefix lists are used to allow traffic to VPC-local service endpoints.
 *
 * For more information, see this page:
 *
 * https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints.html
 */
export declare class PrefixList implements ISecurityGroupRule, IConnectable {
    private readonly prefixListId;
    readonly canInlineRule = true;
    readonly connections: Connections;
    readonly uniqueId: string;
    constructor(prefixListId: string);
    toIngressRuleJSON(): any;
    toEgressRuleJSON(): any;
}
/**
 * Interface for classes that provide the connection-specification parts of a security group rule
 */
export interface IPortRange {
    /**
     * Whether the rule containing this port range can be inlined into a securitygroup or not.
     */
    readonly canInlineRule: boolean;
    /**
     * Produce the ingress/egress rule JSON for the given connection
     */
    toRuleJSON(): any;
}
/**
 * Protocol for use in Connection Rules
 */
export declare enum Protocol {
    All = "-1",
    Tcp = "tcp",
    Udp = "udp",
    Icmp = "icmp",
    Icmpv6 = "58"
}
/**
 * A single TCP port
 */
export declare class TcpPort implements IPortRange {
    private readonly port;
    readonly canInlineRule = true;
    constructor(port: number);
    toRuleJSON(): any;
    toString(): string;
}
/**
 * A single TCP port that is provided by a resource attribute
 */
export declare class TcpPortFromAttribute implements IPortRange {
    private readonly port;
    readonly canInlineRule = false;
    constructor(port: string);
    toRuleJSON(): any;
    toString(): string;
}
/**
 * A TCP port range
 */
export declare class TcpPortRange implements IPortRange {
    private readonly startPort;
    private readonly endPort;
    readonly canInlineRule = true;
    constructor(startPort: number, endPort: number);
    toRuleJSON(): any;
    toString(): string;
}
/**
 * All TCP Ports
 */
export declare class TcpAllPorts implements IPortRange {
    readonly canInlineRule = true;
    toRuleJSON(): any;
    toString(): string;
}
/**
 * A single UDP port
 */
export declare class UdpPort implements IPortRange {
    private readonly port;
    readonly canInlineRule = true;
    constructor(port: number);
    toRuleJSON(): any;
    toString(): string;
}
/**
 * A single UDP port that is provided by a resource attribute
 */
export declare class UdpPortFromAttribute implements IPortRange {
    private readonly port;
    readonly canInlineRule = false;
    constructor(port: string);
    toRuleJSON(): any;
    toString(): string;
}
/**
 * A UDP port range
 */
export declare class UdpPortRange implements IPortRange {
    private readonly startPort;
    private readonly endPort;
    readonly canInlineRule = true;
    constructor(startPort: number, endPort: number);
    toRuleJSON(): any;
    toString(): string;
}
/**
 * All UDP Ports
 */
export declare class UdpAllPorts implements IPortRange {
    readonly canInlineRule = true;
    toRuleJSON(): any;
    toString(): string;
}
/**
 * A set of matching ICMP Type & Code
 */
export declare class IcmpTypeAndCode implements IPortRange {
    private readonly type;
    private readonly code;
    readonly canInlineRule = true;
    constructor(type: number, code: number);
    toRuleJSON(): any;
    toString(): string;
}
/**
 * ICMP Ping traffic
 */
export declare class IcmpPing implements IPortRange {
    readonly canInlineRule = true;
    toRuleJSON(): any;
    toString(): string;
}
/**
 * All ICMP Codes for a given ICMP Type
 */
export declare class IcmpAllTypeCodes implements IPortRange {
    private readonly type;
    readonly canInlineRule = true;
    constructor(type: number);
    toRuleJSON(): any;
    toString(): string;
}
/**
 * All ICMP Types & Codes
 */
export declare class IcmpAllTypesAndCodes implements IPortRange {
    readonly canInlineRule = true;
    toRuleJSON(): any;
    toString(): string;
}
/**
 * All Traffic
 */
export declare class AllTraffic implements IPortRange {
    readonly canInlineRule = true;
    toRuleJSON(): any;
    toString(): string;
}

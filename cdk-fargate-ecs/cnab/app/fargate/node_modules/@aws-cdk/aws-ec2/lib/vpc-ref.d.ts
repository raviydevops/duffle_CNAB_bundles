import { Construct, IDependable } from "@aws-cdk/cdk";
import { VpcNetworkProviderProps } from './vpc-network-provider';
/**
 * The type of Subnet
 */
export declare enum SubnetType {
    /**
     * Isolated Subnets do not route Outbound traffic
     *
     * This can be good for subnets with RDS or
     * Elasticache endpoints
     */
    Isolated = 1,
    /**
     * Subnet that routes to the internet, but not vice versa.
     *
     * Instances in a private subnet can connect to the Internet, but will not
     * allow connections to be initiated from the Internet.
     *
     * Outbound traffic will be routed via a NAT Gateway. Preference being in
     * the same AZ, but if not available will use another AZ (control by
     * specifing `maxGateways` on VpcNetwork). This might be used for
     * experimental cost conscious accounts or accounts where HA outbound
     * traffic is not needed.
     */
    Private = 2,
    /**
     * Subnet connected to the Internet
     *
     * Instances in a Public subnet can connect to the Internet and can be
     * connected to from the Internet as long as they are launched with public
     * IPs (controlled on the AutoScalingGroup or other constructs that launch
     * instances).
     *
     * Public subnets route outbound traffic via an Internet Gateway.
     */
    Public = 3
}
/**
 * Customize how instances are placed inside a VPC
 *
 * Constructs that allow customization of VPC placement use parameters of this
 * type to provide placement settings.
 *
 * By default, the instances are placed in the private subnets.
 */
export interface VpcPlacementStrategy {
    /**
     * Place the instances in the subnets of the given type
     *
     * At most one of `subnetsToUse` and `subnetName` can be supplied.
     *
     * @default SubnetType.Private
     */
    subnetsToUse?: SubnetType;
    /**
     * Place the instances in the subnets with the given name
     *
     * (This is the name supplied in subnetConfiguration).
     *
     * At most one of `subnetsToUse` and `subnetName` can be supplied.
     *
     * @default name
     */
    subnetName?: string;
}
/**
 * A new or imported VPC
 */
export declare abstract class VpcNetworkRef extends Construct implements IDependable {
    /**
     * Import an exported VPC
     */
    static import(parent: Construct, name: string, props: VpcNetworkRefProps): VpcNetworkRef;
    /**
     * Import an existing VPC from context
     */
    static importFromContext(parent: Construct, name: string, props: VpcNetworkProviderProps): VpcNetworkRef;
    /**
     * Identifier for this VPC
     */
    abstract readonly vpcId: string;
    /**
     * List of public subnets in this VPC
     */
    abstract readonly publicSubnets: VpcSubnetRef[];
    /**
     * List of private subnets in this VPC
     */
    abstract readonly privateSubnets: VpcSubnetRef[];
    /**
     * List of isolated subnets in this VPC
     */
    abstract readonly isolatedSubnets: VpcSubnetRef[];
    /**
     * AZs for this VPC
     */
    abstract readonly availabilityZones: string[];
    /**
     * Parts of the VPC that constitute full construction
     */
    readonly dependencyElements: IDependable[];
    /**
     * Dependencies for internet connectivity
     */
    protected readonly internetDependencies: IDependable[];
    /**
     * Return the subnets appropriate for the placement strategy
     */
    subnets(placement?: VpcPlacementStrategy): VpcSubnetRef[];
    /**
     * Export this VPC from the stack
     */
    export(): VpcNetworkRefProps;
    /**
     * Return whether the given subnet is one of this VPC's public subnets.
     *
     * The subnet must literally be one of the subnet object obtained from
     * this VPC. A subnet that merely represents the same subnet will
     * never return true.
     */
    isPublicSubnet(subnet: VpcSubnetRef): boolean;
    /**
     * Take a dependency on internet connectivity having been added to this VPC
     *
     * Take a dependency on this if your constructs need an Internet Gateway
     * added to the VPC before they can be constructed.
     *
     * This method is for construct authors; application builders should not
     * need to call this.
     */
    internetDependency(): IDependable;
}
/**
 * Properties that reference an external VpcNetwork
 */
export interface VpcNetworkRefProps {
    /**
     * VPC's identifier
     */
    vpcId: string;
    /**
     * List of availability zones for the subnets in this VPC.
     */
    availabilityZones: string[];
    /**
     * List of public subnet IDs
     *
     * Must be undefined or match the availability zones in length and order.
     */
    publicSubnetIds?: string[];
    /**
     * List of names for the public subnets
     *
     * Must be undefined or have a name for every public subnet group.
     */
    publicSubnetNames?: string[];
    /**
     * List of private subnet IDs
     *
     * Must be undefined or match the availability zones in length and order.
     */
    privateSubnetIds?: string[];
    /**
     * List of names for the private subnets
     *
     * Must be undefined or have a name for every private subnet group.
     */
    privateSubnetNames?: string[];
    /**
     * List of isolated subnet IDs
     *
     * Must be undefined or match the availability zones in length and order.
     */
    isolatedSubnetIds?: string[];
    /**
     * List of names for the isolated subnets
     *
     * Must be undefined or have a name for every isolated subnet group.
     */
    isolatedSubnetNames?: string[];
}
/**
 * A new or imported VPC Subnet
 */
export declare abstract class VpcSubnetRef extends Construct implements IDependable {
    static import(parent: Construct, name: string, props: VpcSubnetRefProps): VpcSubnetRef;
    /**
     * The Availability Zone the subnet is located in
     */
    abstract readonly availabilityZone: string;
    /**
     * The subnetId for this particular subnet
     */
    abstract readonly subnetId: string;
    /**
     * Parts of this VPC subnet
     */
    readonly dependencyElements: IDependable[];
}
export interface VpcSubnetRefProps {
    /**
     * The Availability Zone the subnet is located in
     */
    availabilityZone: string;
    /**
     * The subnetId for this particular subnet
     */
    subnetId: string;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_1 = require("@aws-cdk/cdk");
const connections_1 = require("./connections");
const ec2_generated_1 = require("./ec2.generated");
/**
 * A SecurityGroup that is not created in this template
 */
class SecurityGroupRef extends cdk_1.Construct {
    constructor() {
        super(...arguments);
        this.canInlineRule = false;
        this.connections = new connections_1.Connections({ securityGroups: [this] });
    }
    /**
     * Import an existing SecurityGroup
     */
    static import(parent, id, props) {
        return new ImportedSecurityGroup(parent, id, props);
    }
    addIngressRule(peer, connection, description) {
        let id = `from ${peer.uniqueId}:${connection}`;
        if (description === undefined) {
            description = id;
        }
        id = id.replace('/', '_');
        // Skip duplicates
        if (this.tryFindChild(id) === undefined) {
            new ec2_generated_1.cloudformation.SecurityGroupIngressResource(this, id, Object.assign({ groupId: this.securityGroupId }, peer.toIngressRuleJSON(), connection.toRuleJSON(), { description }));
        }
    }
    addEgressRule(peer, connection, description) {
        let id = `to ${peer.uniqueId}:${connection}`;
        if (description === undefined) {
            description = id;
        }
        id = id.replace('/', '_');
        // Skip duplicates
        if (this.tryFindChild(id) === undefined) {
            new ec2_generated_1.cloudformation.SecurityGroupEgressResource(this, id, Object.assign({ groupId: this.securityGroupId }, peer.toEgressRuleJSON(), connection.toRuleJSON(), { description }));
        }
    }
    toIngressRuleJSON() {
        return { sourceSecurityGroupId: this.securityGroupId };
    }
    toEgressRuleJSON() {
        return { destinationSecurityGroupId: this.securityGroupId };
    }
    /**
     * Export this SecurityGroup for use in a different Stack
     */
    export() {
        return {
            securityGroupId: new cdk_1.Output(this, 'SecurityGroupId', { value: this.securityGroupId }).makeImportValue().toString()
        };
    }
}
exports.SecurityGroupRef = SecurityGroupRef;
/**
 * Creates an Amazon EC2 security group within a VPC.
 *
 * This class has an additional optimization over SecurityGroupRef that it can also create
 * inline ingress and egress rule (which saves on the total number of resources inside
 * the template).
 */
class SecurityGroup extends SecurityGroupRef {
    constructor(parent, name, props) {
        super(parent, name);
        this.directIngressRules = [];
        this.directEgressRules = [];
        this.tags = new cdk_1.TagManager(this, { initialTags: props.tags });
        const groupDescription = props.description || this.path;
        this.allowAllOutbound = props.allowAllOutbound !== false;
        this.securityGroup = new ec2_generated_1.cloudformation.SecurityGroupResource(this, 'Resource', {
            groupName: props.groupName,
            groupDescription,
            securityGroupIngress: new cdk_1.Token(() => this.directIngressRules),
            securityGroupEgress: new cdk_1.Token(() => this.directEgressRules),
            vpcId: props.vpc.vpcId,
            tags: this.tags,
        });
        this.securityGroupId = this.securityGroup.securityGroupId;
        this.groupName = this.securityGroup.securityGroupName;
        this.vpcId = this.securityGroup.securityGroupVpcId;
        this.addDefaultEgressRule();
    }
    addIngressRule(peer, connection, description) {
        if (!peer.canInlineRule || !connection.canInlineRule) {
            super.addIngressRule(peer, connection, description);
            return;
        }
        if (description === undefined) {
            description = `from ${peer.uniqueId}:${connection}`;
        }
        this.addDirectIngressRule(Object.assign({}, peer.toIngressRuleJSON(), connection.toRuleJSON(), { description }));
    }
    addEgressRule(peer, connection, description) {
        if (this.allowAllOutbound) {
            // In the case of "allowAllOutbound", we don't add any more rules. There
            // is only one rule which allows all traffic and that subsumes any other
            // rule.
            return;
        }
        else {
            // Otherwise, if the bogus rule exists we can now remove it because the
            // presence of any other rule will get rid of EC2's implicit "all
            // outbound" rule anyway.
            this.removeNoTrafficRule();
        }
        if (!peer.canInlineRule || !connection.canInlineRule) {
            super.addEgressRule(peer, connection, description);
            return;
        }
        if (description === undefined) {
            description = `from ${peer.uniqueId}:${connection}`;
        }
        const rule = Object.assign({}, peer.toEgressRuleJSON(), connection.toRuleJSON(), { description });
        if (isAllTrafficRule(rule)) {
            // We cannot allow this; if someone adds the rule in this way, it will be
            // removed again if they add other rules. We also can't automatically switch
            // to "allOutbound=true" mode, because we might have already emitted
            // EgressRule objects (which count as rules added later) and there's no way
            // to recall those. Better to prevent this for now.
            throw new Error('Cannot add an "all traffic" egress rule in this way; set allowAllOutbound=true on the SecurityGroup instead.');
        }
        this.addDirectEgressRule(rule);
    }
    /**
     * Add a direct ingress rule
     */
    addDirectIngressRule(rule) {
        if (!this.hasIngressRule(rule)) {
            this.directIngressRules.push(rule);
        }
    }
    /**
     * Return whether the given ingress rule exists on the group
     */
    hasIngressRule(rule) {
        return this.directIngressRules.findIndex(r => ingressRulesEqual(r, rule)) > -1;
    }
    /**
     * Add a direct egress rule
     */
    addDirectEgressRule(rule) {
        if (!this.hasEgressRule(rule)) {
            this.directEgressRules.push(rule);
        }
    }
    /**
     * Return whether the given egress rule exists on the group
     */
    hasEgressRule(rule) {
        return this.directEgressRules.findIndex(r => egressRulesEqual(r, rule)) > -1;
    }
    /**
     * Add the default egress rule to the securityGroup
     *
     * This depends on allowAllOutbound:
     *
     * - If allowAllOutbound is true, we *TECHNICALLY* don't need to do anything, because
     *   EC2 is going to create this default rule anyway. But, for maximum readability
     *   of the template, we will add one anyway.
     * - If allowAllOutbound is false, we add a bogus rule that matches no traffic in
     *   order to get rid of the default "all outbound" rule that EC2 creates by default.
     *   If other rules happen to get added later, we remove the bogus rule again so
     *   that it doesn't clutter up the template too much (even though that's not
     *   strictly necessary).
     */
    addDefaultEgressRule() {
        if (this.allowAllOutbound) {
            this.directEgressRules.push(ALLOW_ALL_RULE);
        }
        else {
            this.directEgressRules.push(MATCH_NO_TRAFFIC);
        }
    }
    /**
     * Remove the bogus rule if it exists
     */
    removeNoTrafficRule() {
        const i = this.directEgressRules.findIndex(r => egressRulesEqual(r, MATCH_NO_TRAFFIC));
        if (i > -1) {
            this.directEgressRules.splice(i, 1);
        }
    }
}
exports.SecurityGroup = SecurityGroup;
/**
 * Egress rule that purposely matches no traffic
 *
 * This is used in order to disable the "all traffic" default of Security Groups.
 *
 * No machine can ever actually have the 255.255.255.255 IP address, but
 * in order to lock it down even more we'll restrict to a nonexistent
 * ICMP traffic type.
 */
const MATCH_NO_TRAFFIC = {
    cidrIp: '255.255.255.255/32',
    description: 'Disallow all traffic',
    ipProtocol: 'icmp',
    fromPort: 252,
    toPort: 86
};
/**
 * Egress rule that matches all traffic
 */
const ALLOW_ALL_RULE = {
    cidrIp: '0.0.0.0/0',
    description: 'Allow all outbound traffic by default',
    ipProtocol: '-1',
};
/**
 * A SecurityGroup that hasn't been created here
 */
class ImportedSecurityGroup extends SecurityGroupRef {
    constructor(parent, name, props) {
        super(parent, name);
        this.securityGroupId = props.securityGroupId;
    }
}
/**
 * Compare two ingress rules for equality the same way CloudFormation would (discarding description)
 */
function ingressRulesEqual(a, b) {
    return a.cidrIp === b.cidrIp
        && a.cidrIpv6 === b.cidrIpv6
        && a.fromPort === b.fromPort
        && a.toPort === b.toPort
        && a.ipProtocol === b.ipProtocol
        && a.sourceSecurityGroupId === b.sourceSecurityGroupId
        && a.sourceSecurityGroupName === b.sourceSecurityGroupName
        && a.sourceSecurityGroupOwnerId === b.sourceSecurityGroupOwnerId;
}
/**
 * Compare two egress rules for equality the same way CloudFormation would (discarding description)
 */
function egressRulesEqual(a, b) {
    return a.cidrIp === b.cidrIp
        && a.cidrIpv6 === b.cidrIpv6
        && a.fromPort === b.fromPort
        && a.toPort === b.toPort
        && a.ipProtocol === b.ipProtocol
        && a.destinationPrefixListId === b.destinationPrefixListId
        && a.destinationSecurityGroupId === b.destinationSecurityGroupId;
}
/**
 * Whether this rule refers to all traffic
 */
function isAllTrafficRule(rule) {
    return rule.cidrIp === '0.0.0.0/0' && rule.ipProtocol === '-1';
}
//# sourceMappingURL=data:application/json;base64,
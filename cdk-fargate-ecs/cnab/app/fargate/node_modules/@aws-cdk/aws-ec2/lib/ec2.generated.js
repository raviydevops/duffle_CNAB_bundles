"use strict";
// Copyright 2012-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// Generated from the AWS CloudFormation Resource Specification
// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html
// @cfn2ts:meta@ {"generated":"2018-12-13T10:03:47.876Z","fingerprint":"CLt97bhy/JayHzFf9KKwhsDAsoxe5CtJAQFGKuffvkU="}
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:max-line-length | This is generated code - line lengths are difficult to control
const cdk = require("@aws-cdk/cdk");
var cloudformation;
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``CustomerGatewayResourceProps``
     *
     * @param properties the TypeScript properties of a ``CustomerGatewayResourceProps``
     *
     * @returns the result of the validation.
     */
    function CustomerGatewayResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('bgpAsn', cdk.requiredValidator)(properties.bgpAsn));
        errors.collect(cdk.propertyValidator('bgpAsn', cdk.validateNumber)(properties.bgpAsn));
        errors.collect(cdk.propertyValidator('ipAddress', cdk.requiredValidator)(properties.ipAddress));
        errors.collect(cdk.propertyValidator('ipAddress', cdk.validateString)(properties.ipAddress));
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));
        errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));
        return errors.wrap('supplied properties not correct for "CustomerGatewayResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::CustomerGateway`` resource
     *
     * @param properties the TypeScript properties of a ``CustomerGatewayResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::CustomerGateway`` resource.
     */
    function customerGatewayResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        CustomerGatewayResourcePropsValidator(properties).assertSuccess();
        return {
            BgpAsn: cdk.numberToCloudFormation(properties.bgpAsn),
            IpAddress: cdk.stringToCloudFormation(properties.ipAddress),
            Type: cdk.stringToCloudFormation(properties.type),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-customer-gateway.html
     */
    class CustomerGatewayResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::CustomerGateway``.
         *
         * @param parent   the ``cdk.Construct`` this ``CustomerGatewayResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``CustomerGatewayResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: CustomerGatewayResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'bgpAsn', this);
            cdk.requireProperty(properties, 'ipAddress', this);
            cdk.requireProperty(properties, 'type', this);
            this.customerGatewayName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return customerGatewayResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    CustomerGatewayResource.resourceTypeName = "AWS::EC2::CustomerGateway";
    cloudformation.CustomerGatewayResource = CustomerGatewayResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``DHCPOptionsResourceProps``
     *
     * @param properties the TypeScript properties of a ``DHCPOptionsResourceProps``
     *
     * @returns the result of the validation.
     */
    function DHCPOptionsResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('domainName', cdk.validateString)(properties.domainName));
        errors.collect(cdk.propertyValidator('domainNameServers', cdk.listValidator(cdk.validateString))(properties.domainNameServers));
        errors.collect(cdk.propertyValidator('netbiosNameServers', cdk.listValidator(cdk.validateString))(properties.netbiosNameServers));
        errors.collect(cdk.propertyValidator('netbiosNodeType', cdk.validateNumber)(properties.netbiosNodeType));
        errors.collect(cdk.propertyValidator('ntpServers', cdk.listValidator(cdk.validateString))(properties.ntpServers));
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        return errors.wrap('supplied properties not correct for "DHCPOptionsResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::DHCPOptions`` resource
     *
     * @param properties the TypeScript properties of a ``DHCPOptionsResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::DHCPOptions`` resource.
     */
    function dHCPOptionsResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        DHCPOptionsResourcePropsValidator(properties).assertSuccess();
        return {
            DomainName: cdk.stringToCloudFormation(properties.domainName),
            DomainNameServers: cdk.listMapper(cdk.stringToCloudFormation)(properties.domainNameServers),
            NetbiosNameServers: cdk.listMapper(cdk.stringToCloudFormation)(properties.netbiosNameServers),
            NetbiosNodeType: cdk.numberToCloudFormation(properties.netbiosNodeType),
            NtpServers: cdk.listMapper(cdk.stringToCloudFormation)(properties.ntpServers),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-dhcp-options.html
     */
    class DHCPOptionsResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::DHCPOptions``.
         *
         * @param parent   the ``cdk.Construct`` this ``DHCPOptionsResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``DHCPOptionsResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: DHCPOptionsResource.resourceTypeName, properties });
            this.dhcpOptionsName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return dHCPOptionsResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    DHCPOptionsResource.resourceTypeName = "AWS::EC2::DHCPOptions";
    cloudformation.DHCPOptionsResource = DHCPOptionsResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``EC2FleetResourceProps``
     *
     * @param properties the TypeScript properties of a ``EC2FleetResourceProps``
     *
     * @returns the result of the validation.
     */
    function EC2FleetResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('excessCapacityTerminationPolicy', cdk.validateString)(properties.excessCapacityTerminationPolicy));
        errors.collect(cdk.propertyValidator('launchTemplateConfigs', cdk.requiredValidator)(properties.launchTemplateConfigs));
        errors.collect(cdk.propertyValidator('launchTemplateConfigs', cdk.listValidator(EC2FleetResource_FleetLaunchTemplateConfigRequestPropertyValidator))(properties.launchTemplateConfigs));
        errors.collect(cdk.propertyValidator('onDemandOptions', EC2FleetResource_OnDemandOptionsRequestPropertyValidator)(properties.onDemandOptions));
        errors.collect(cdk.propertyValidator('replaceUnhealthyInstances', cdk.validateBoolean)(properties.replaceUnhealthyInstances));
        errors.collect(cdk.propertyValidator('spotOptions', EC2FleetResource_SpotOptionsRequestPropertyValidator)(properties.spotOptions));
        errors.collect(cdk.propertyValidator('tagSpecifications', cdk.listValidator(EC2FleetResource_TagSpecificationPropertyValidator))(properties.tagSpecifications));
        errors.collect(cdk.propertyValidator('targetCapacitySpecification', cdk.requiredValidator)(properties.targetCapacitySpecification));
        errors.collect(cdk.propertyValidator('targetCapacitySpecification', EC2FleetResource_TargetCapacitySpecificationRequestPropertyValidator)(properties.targetCapacitySpecification));
        errors.collect(cdk.propertyValidator('terminateInstancesWithExpiration', cdk.validateBoolean)(properties.terminateInstancesWithExpiration));
        errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));
        errors.collect(cdk.propertyValidator('validFrom', cdk.validateNumber)(properties.validFrom));
        errors.collect(cdk.propertyValidator('validUntil', cdk.validateNumber)(properties.validUntil));
        return errors.wrap('supplied properties not correct for "EC2FleetResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::EC2Fleet`` resource
     *
     * @param properties the TypeScript properties of a ``EC2FleetResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::EC2Fleet`` resource.
     */
    function eC2FleetResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        EC2FleetResourcePropsValidator(properties).assertSuccess();
        return {
            LaunchTemplateConfigs: cdk.listMapper(eC2FleetResourceFleetLaunchTemplateConfigRequestPropertyToCloudFormation)(properties.launchTemplateConfigs),
            TargetCapacitySpecification: eC2FleetResourceTargetCapacitySpecificationRequestPropertyToCloudFormation(properties.targetCapacitySpecification),
            ExcessCapacityTerminationPolicy: cdk.stringToCloudFormation(properties.excessCapacityTerminationPolicy),
            OnDemandOptions: eC2FleetResourceOnDemandOptionsRequestPropertyToCloudFormation(properties.onDemandOptions),
            ReplaceUnhealthyInstances: cdk.booleanToCloudFormation(properties.replaceUnhealthyInstances),
            SpotOptions: eC2FleetResourceSpotOptionsRequestPropertyToCloudFormation(properties.spotOptions),
            TagSpecifications: cdk.listMapper(eC2FleetResourceTagSpecificationPropertyToCloudFormation)(properties.tagSpecifications),
            TerminateInstancesWithExpiration: cdk.booleanToCloudFormation(properties.terminateInstancesWithExpiration),
            Type: cdk.stringToCloudFormation(properties.type),
            ValidFrom: cdk.numberToCloudFormation(properties.validFrom),
            ValidUntil: cdk.numberToCloudFormation(properties.validUntil),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html
     */
    class EC2FleetResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::EC2Fleet``.
         *
         * @param parent   the ``cdk.Construct`` this ``EC2FleetResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``EC2FleetResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: EC2FleetResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'launchTemplateConfigs', this);
            cdk.requireProperty(properties, 'targetCapacitySpecification', this);
            this.ec2FleetId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return eC2FleetResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    EC2FleetResource.resourceTypeName = "AWS::EC2::EC2Fleet";
    cloudformation.EC2FleetResource = EC2FleetResource;
    /**
     * Determine whether the given properties match those of a ``FleetLaunchTemplateConfigRequestProperty``
     *
     * @param properties the TypeScript properties of a ``FleetLaunchTemplateConfigRequestProperty``
     *
     * @returns the result of the validation.
     */
    function EC2FleetResource_FleetLaunchTemplateConfigRequestPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('launchTemplateSpecification', EC2FleetResource_FleetLaunchTemplateSpecificationRequestPropertyValidator)(properties.launchTemplateSpecification));
        errors.collect(cdk.propertyValidator('overrides', cdk.listValidator(EC2FleetResource_FleetLaunchTemplateOverridesRequestPropertyValidator))(properties.overrides));
        return errors.wrap('supplied properties not correct for "FleetLaunchTemplateConfigRequestProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::EC2Fleet.FleetLaunchTemplateConfigRequest`` resource
     *
     * @param properties the TypeScript properties of a ``FleetLaunchTemplateConfigRequestProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::EC2Fleet.FleetLaunchTemplateConfigRequest`` resource.
     */
    function eC2FleetResourceFleetLaunchTemplateConfigRequestPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        EC2FleetResource_FleetLaunchTemplateConfigRequestPropertyValidator(properties).assertSuccess();
        return {
            LaunchTemplateSpecification: eC2FleetResourceFleetLaunchTemplateSpecificationRequestPropertyToCloudFormation(properties.launchTemplateSpecification),
            Overrides: cdk.listMapper(eC2FleetResourceFleetLaunchTemplateOverridesRequestPropertyToCloudFormation)(properties.overrides),
        };
    }
    /**
     * Determine whether the given properties match those of a ``FleetLaunchTemplateOverridesRequestProperty``
     *
     * @param properties the TypeScript properties of a ``FleetLaunchTemplateOverridesRequestProperty``
     *
     * @returns the result of the validation.
     */
    function EC2FleetResource_FleetLaunchTemplateOverridesRequestPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));
        errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));
        errors.collect(cdk.propertyValidator('maxPrice', cdk.validateString)(properties.maxPrice));
        errors.collect(cdk.propertyValidator('priority', cdk.validateNumber)(properties.priority));
        errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));
        errors.collect(cdk.propertyValidator('weightedCapacity', cdk.validateNumber)(properties.weightedCapacity));
        return errors.wrap('supplied properties not correct for "FleetLaunchTemplateOverridesRequestProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::EC2Fleet.FleetLaunchTemplateOverridesRequest`` resource
     *
     * @param properties the TypeScript properties of a ``FleetLaunchTemplateOverridesRequestProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::EC2Fleet.FleetLaunchTemplateOverridesRequest`` resource.
     */
    function eC2FleetResourceFleetLaunchTemplateOverridesRequestPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        EC2FleetResource_FleetLaunchTemplateOverridesRequestPropertyValidator(properties).assertSuccess();
        return {
            AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
            InstanceType: cdk.stringToCloudFormation(properties.instanceType),
            MaxPrice: cdk.stringToCloudFormation(properties.maxPrice),
            Priority: cdk.numberToCloudFormation(properties.priority),
            SubnetId: cdk.stringToCloudFormation(properties.subnetId),
            WeightedCapacity: cdk.numberToCloudFormation(properties.weightedCapacity),
        };
    }
    /**
     * Determine whether the given properties match those of a ``FleetLaunchTemplateSpecificationRequestProperty``
     *
     * @param properties the TypeScript properties of a ``FleetLaunchTemplateSpecificationRequestProperty``
     *
     * @returns the result of the validation.
     */
    function EC2FleetResource_FleetLaunchTemplateSpecificationRequestPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('launchTemplateId', cdk.validateString)(properties.launchTemplateId));
        errors.collect(cdk.propertyValidator('launchTemplateName', cdk.validateString)(properties.launchTemplateName));
        errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));
        return errors.wrap('supplied properties not correct for "FleetLaunchTemplateSpecificationRequestProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::EC2Fleet.FleetLaunchTemplateSpecificationRequest`` resource
     *
     * @param properties the TypeScript properties of a ``FleetLaunchTemplateSpecificationRequestProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::EC2Fleet.FleetLaunchTemplateSpecificationRequest`` resource.
     */
    function eC2FleetResourceFleetLaunchTemplateSpecificationRequestPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        EC2FleetResource_FleetLaunchTemplateSpecificationRequestPropertyValidator(properties).assertSuccess();
        return {
            LaunchTemplateId: cdk.stringToCloudFormation(properties.launchTemplateId),
            LaunchTemplateName: cdk.stringToCloudFormation(properties.launchTemplateName),
            Version: cdk.stringToCloudFormation(properties.version),
        };
    }
    /**
     * Determine whether the given properties match those of a ``OnDemandOptionsRequestProperty``
     *
     * @param properties the TypeScript properties of a ``OnDemandOptionsRequestProperty``
     *
     * @returns the result of the validation.
     */
    function EC2FleetResource_OnDemandOptionsRequestPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('allocationStrategy', cdk.validateString)(properties.allocationStrategy));
        return errors.wrap('supplied properties not correct for "OnDemandOptionsRequestProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::EC2Fleet.OnDemandOptionsRequest`` resource
     *
     * @param properties the TypeScript properties of a ``OnDemandOptionsRequestProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::EC2Fleet.OnDemandOptionsRequest`` resource.
     */
    function eC2FleetResourceOnDemandOptionsRequestPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        EC2FleetResource_OnDemandOptionsRequestPropertyValidator(properties).assertSuccess();
        return {
            AllocationStrategy: cdk.stringToCloudFormation(properties.allocationStrategy),
        };
    }
    /**
     * Determine whether the given properties match those of a ``SpotOptionsRequestProperty``
     *
     * @param properties the TypeScript properties of a ``SpotOptionsRequestProperty``
     *
     * @returns the result of the validation.
     */
    function EC2FleetResource_SpotOptionsRequestPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('allocationStrategy', cdk.validateString)(properties.allocationStrategy));
        errors.collect(cdk.propertyValidator('instanceInterruptionBehavior', cdk.validateString)(properties.instanceInterruptionBehavior));
        errors.collect(cdk.propertyValidator('instancePoolsToUseCount', cdk.validateNumber)(properties.instancePoolsToUseCount));
        return errors.wrap('supplied properties not correct for "SpotOptionsRequestProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::EC2Fleet.SpotOptionsRequest`` resource
     *
     * @param properties the TypeScript properties of a ``SpotOptionsRequestProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::EC2Fleet.SpotOptionsRequest`` resource.
     */
    function eC2FleetResourceSpotOptionsRequestPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        EC2FleetResource_SpotOptionsRequestPropertyValidator(properties).assertSuccess();
        return {
            AllocationStrategy: cdk.stringToCloudFormation(properties.allocationStrategy),
            InstanceInterruptionBehavior: cdk.stringToCloudFormation(properties.instanceInterruptionBehavior),
            InstancePoolsToUseCount: cdk.numberToCloudFormation(properties.instancePoolsToUseCount),
        };
    }
    /**
     * Determine whether the given properties match those of a ``TagRequestProperty``
     *
     * @param properties the TypeScript properties of a ``TagRequestProperty``
     *
     * @returns the result of the validation.
     */
    function EC2FleetResource_TagRequestPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));
        errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));
        return errors.wrap('supplied properties not correct for "TagRequestProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::EC2Fleet.TagRequest`` resource
     *
     * @param properties the TypeScript properties of a ``TagRequestProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::EC2Fleet.TagRequest`` resource.
     */
    function eC2FleetResourceTagRequestPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        EC2FleetResource_TagRequestPropertyValidator(properties).assertSuccess();
        return {
            Key: cdk.stringToCloudFormation(properties.key),
            Value: cdk.stringToCloudFormation(properties.value),
        };
    }
    /**
     * Determine whether the given properties match those of a ``TagSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``TagSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function EC2FleetResource_TagSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('resourceType', cdk.validateString)(properties.resourceType));
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(EC2FleetResource_TagRequestPropertyValidator))(properties.tags));
        return errors.wrap('supplied properties not correct for "TagSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::EC2Fleet.TagSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``TagSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::EC2Fleet.TagSpecification`` resource.
     */
    function eC2FleetResourceTagSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        EC2FleetResource_TagSpecificationPropertyValidator(properties).assertSuccess();
        return {
            ResourceType: cdk.stringToCloudFormation(properties.resourceType),
            Tags: cdk.listMapper(eC2FleetResourceTagRequestPropertyToCloudFormation)(properties.tags),
        };
    }
    /**
     * Determine whether the given properties match those of a ``TargetCapacitySpecificationRequestProperty``
     *
     * @param properties the TypeScript properties of a ``TargetCapacitySpecificationRequestProperty``
     *
     * @returns the result of the validation.
     */
    function EC2FleetResource_TargetCapacitySpecificationRequestPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('defaultTargetCapacityType', cdk.validateString)(properties.defaultTargetCapacityType));
        errors.collect(cdk.propertyValidator('onDemandTargetCapacity', cdk.validateNumber)(properties.onDemandTargetCapacity));
        errors.collect(cdk.propertyValidator('spotTargetCapacity', cdk.validateNumber)(properties.spotTargetCapacity));
        errors.collect(cdk.propertyValidator('totalTargetCapacity', cdk.requiredValidator)(properties.totalTargetCapacity));
        errors.collect(cdk.propertyValidator('totalTargetCapacity', cdk.validateNumber)(properties.totalTargetCapacity));
        return errors.wrap('supplied properties not correct for "TargetCapacitySpecificationRequestProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::EC2Fleet.TargetCapacitySpecificationRequest`` resource
     *
     * @param properties the TypeScript properties of a ``TargetCapacitySpecificationRequestProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::EC2Fleet.TargetCapacitySpecificationRequest`` resource.
     */
    function eC2FleetResourceTargetCapacitySpecificationRequestPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        EC2FleetResource_TargetCapacitySpecificationRequestPropertyValidator(properties).assertSuccess();
        return {
            DefaultTargetCapacityType: cdk.stringToCloudFormation(properties.defaultTargetCapacityType),
            OnDemandTargetCapacity: cdk.numberToCloudFormation(properties.onDemandTargetCapacity),
            SpotTargetCapacity: cdk.numberToCloudFormation(properties.spotTargetCapacity),
            TotalTargetCapacity: cdk.numberToCloudFormation(properties.totalTargetCapacity),
        };
    }
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``EIPResourceProps``
     *
     * @param properties the TypeScript properties of a ``EIPResourceProps``
     *
     * @returns the result of the validation.
     */
    function EIPResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('domain', cdk.validateString)(properties.domain));
        errors.collect(cdk.propertyValidator('instanceId', cdk.validateString)(properties.instanceId));
        errors.collect(cdk.propertyValidator('publicIpv4Pool', cdk.validateString)(properties.publicIpv4Pool));
        return errors.wrap('supplied properties not correct for "EIPResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::EIP`` resource
     *
     * @param properties the TypeScript properties of a ``EIPResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::EIP`` resource.
     */
    function eIPResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        EIPResourcePropsValidator(properties).assertSuccess();
        return {
            Domain: cdk.stringToCloudFormation(properties.domain),
            InstanceId: cdk.stringToCloudFormation(properties.instanceId),
            PublicIpv4Pool: cdk.stringToCloudFormation(properties.publicIpv4Pool),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip.html
     */
    class EIPResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::EIP``.
         *
         * @param parent   the ``cdk.Construct`` this ``EIPResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``EIPResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: EIPResource.resourceTypeName, properties });
            this.eipAllocationId = this.getAtt('AllocationId').toString();
            this.eipIp = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return eIPResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    EIPResource.resourceTypeName = "AWS::EC2::EIP";
    cloudformation.EIPResource = EIPResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``EIPAssociationResourceProps``
     *
     * @param properties the TypeScript properties of a ``EIPAssociationResourceProps``
     *
     * @returns the result of the validation.
     */
    function EIPAssociationResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('allocationId', cdk.validateString)(properties.allocationId));
        errors.collect(cdk.propertyValidator('eip', cdk.validateString)(properties.eip));
        errors.collect(cdk.propertyValidator('instanceId', cdk.validateString)(properties.instanceId));
        errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));
        errors.collect(cdk.propertyValidator('privateIpAddress', cdk.validateString)(properties.privateIpAddress));
        return errors.wrap('supplied properties not correct for "EIPAssociationResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::EIPAssociation`` resource
     *
     * @param properties the TypeScript properties of a ``EIPAssociationResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::EIPAssociation`` resource.
     */
    function eIPAssociationResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        EIPAssociationResourcePropsValidator(properties).assertSuccess();
        return {
            AllocationId: cdk.stringToCloudFormation(properties.allocationId),
            EIP: cdk.stringToCloudFormation(properties.eip),
            InstanceId: cdk.stringToCloudFormation(properties.instanceId),
            NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),
            PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip-association.html
     */
    class EIPAssociationResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::EIPAssociation``.
         *
         * @param parent   the ``cdk.Construct`` this ``EIPAssociationResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``EIPAssociationResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: EIPAssociationResource.resourceTypeName, properties });
            this.eipAssociationName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return eIPAssociationResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    EIPAssociationResource.resourceTypeName = "AWS::EC2::EIPAssociation";
    cloudformation.EIPAssociationResource = EIPAssociationResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``EgressOnlyInternetGatewayResourceProps``
     *
     * @param properties the TypeScript properties of a ``EgressOnlyInternetGatewayResourceProps``
     *
     * @returns the result of the validation.
     */
    function EgressOnlyInternetGatewayResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));
        errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));
        return errors.wrap('supplied properties not correct for "EgressOnlyInternetGatewayResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::EgressOnlyInternetGateway`` resource
     *
     * @param properties the TypeScript properties of a ``EgressOnlyInternetGatewayResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::EgressOnlyInternetGateway`` resource.
     */
    function egressOnlyInternetGatewayResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        EgressOnlyInternetGatewayResourcePropsValidator(properties).assertSuccess();
        return {
            VpcId: cdk.stringToCloudFormation(properties.vpcId),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-egressonlyinternetgateway.html
     */
    class EgressOnlyInternetGatewayResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::EgressOnlyInternetGateway``.
         *
         * @param parent   the ``cdk.Construct`` this ``EgressOnlyInternetGatewayResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``EgressOnlyInternetGatewayResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: EgressOnlyInternetGatewayResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'vpcId', this);
            this.egressOnlyInternetGatewayId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return egressOnlyInternetGatewayResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    EgressOnlyInternetGatewayResource.resourceTypeName = "AWS::EC2::EgressOnlyInternetGateway";
    cloudformation.EgressOnlyInternetGatewayResource = EgressOnlyInternetGatewayResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``FlowLogResourceProps``
     *
     * @param properties the TypeScript properties of a ``FlowLogResourceProps``
     *
     * @returns the result of the validation.
     */
    function FlowLogResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('deliverLogsPermissionArn', cdk.validateString)(properties.deliverLogsPermissionArn));
        errors.collect(cdk.propertyValidator('logDestination', cdk.validateString)(properties.logDestination));
        errors.collect(cdk.propertyValidator('logDestinationType', cdk.validateString)(properties.logDestinationType));
        errors.collect(cdk.propertyValidator('logGroupName', cdk.validateString)(properties.logGroupName));
        errors.collect(cdk.propertyValidator('resourceId', cdk.requiredValidator)(properties.resourceId));
        errors.collect(cdk.propertyValidator('resourceId', cdk.validateString)(properties.resourceId));
        errors.collect(cdk.propertyValidator('resourceType', cdk.requiredValidator)(properties.resourceType));
        errors.collect(cdk.propertyValidator('resourceType', cdk.validateString)(properties.resourceType));
        errors.collect(cdk.propertyValidator('trafficType', cdk.requiredValidator)(properties.trafficType));
        errors.collect(cdk.propertyValidator('trafficType', cdk.validateString)(properties.trafficType));
        return errors.wrap('supplied properties not correct for "FlowLogResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::FlowLog`` resource
     *
     * @param properties the TypeScript properties of a ``FlowLogResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::FlowLog`` resource.
     */
    function flowLogResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        FlowLogResourcePropsValidator(properties).assertSuccess();
        return {
            ResourceId: cdk.stringToCloudFormation(properties.resourceId),
            ResourceType: cdk.stringToCloudFormation(properties.resourceType),
            TrafficType: cdk.stringToCloudFormation(properties.trafficType),
            DeliverLogsPermissionArn: cdk.stringToCloudFormation(properties.deliverLogsPermissionArn),
            LogDestination: cdk.stringToCloudFormation(properties.logDestination),
            LogDestinationType: cdk.stringToCloudFormation(properties.logDestinationType),
            LogGroupName: cdk.stringToCloudFormation(properties.logGroupName),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-flowlog.html
     */
    class FlowLogResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::FlowLog``.
         *
         * @param parent   the ``cdk.Construct`` this ``FlowLogResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``FlowLogResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: FlowLogResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'resourceId', this);
            cdk.requireProperty(properties, 'resourceType', this);
            cdk.requireProperty(properties, 'trafficType', this);
            this.flowLogId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return flowLogResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    FlowLogResource.resourceTypeName = "AWS::EC2::FlowLog";
    cloudformation.FlowLogResource = FlowLogResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``HostResourceProps``
     *
     * @param properties the TypeScript properties of a ``HostResourceProps``
     *
     * @returns the result of the validation.
     */
    function HostResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('autoPlacement', cdk.validateString)(properties.autoPlacement));
        errors.collect(cdk.propertyValidator('availabilityZone', cdk.requiredValidator)(properties.availabilityZone));
        errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));
        errors.collect(cdk.propertyValidator('instanceType', cdk.requiredValidator)(properties.instanceType));
        errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));
        return errors.wrap('supplied properties not correct for "HostResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Host`` resource
     *
     * @param properties the TypeScript properties of a ``HostResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Host`` resource.
     */
    function hostResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        HostResourcePropsValidator(properties).assertSuccess();
        return {
            AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
            InstanceType: cdk.stringToCloudFormation(properties.instanceType),
            AutoPlacement: cdk.stringToCloudFormation(properties.autoPlacement),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-host.html
     */
    class HostResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::Host``.
         *
         * @param parent   the ``cdk.Construct`` this ``HostResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``HostResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: HostResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'availabilityZone', this);
            cdk.requireProperty(properties, 'instanceType', this);
            this.hostId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return hostResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    HostResource.resourceTypeName = "AWS::EC2::Host";
    cloudformation.HostResource = HostResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``InstanceResourceProps``
     *
     * @param properties the TypeScript properties of a ``InstanceResourceProps``
     *
     * @returns the result of the validation.
     */
    function InstanceResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('additionalInfo', cdk.validateString)(properties.additionalInfo));
        errors.collect(cdk.propertyValidator('affinity', cdk.validateString)(properties.affinity));
        errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));
        errors.collect(cdk.propertyValidator('blockDeviceMappings', cdk.listValidator(InstanceResource_BlockDeviceMappingPropertyValidator))(properties.blockDeviceMappings));
        errors.collect(cdk.propertyValidator('creditSpecification', InstanceResource_CreditSpecificationPropertyValidator)(properties.creditSpecification));
        errors.collect(cdk.propertyValidator('disableApiTermination', cdk.validateBoolean)(properties.disableApiTermination));
        errors.collect(cdk.propertyValidator('ebsOptimized', cdk.validateBoolean)(properties.ebsOptimized));
        errors.collect(cdk.propertyValidator('elasticGpuSpecifications', cdk.listValidator(InstanceResource_ElasticGpuSpecificationPropertyValidator))(properties.elasticGpuSpecifications));
        errors.collect(cdk.propertyValidator('elasticInferenceAccelerators', cdk.listValidator(InstanceResource_ElasticInferenceAcceleratorPropertyValidator))(properties.elasticInferenceAccelerators));
        errors.collect(cdk.propertyValidator('hostId', cdk.validateString)(properties.hostId));
        errors.collect(cdk.propertyValidator('iamInstanceProfile', cdk.validateString)(properties.iamInstanceProfile));
        errors.collect(cdk.propertyValidator('imageId', cdk.validateString)(properties.imageId));
        errors.collect(cdk.propertyValidator('instanceInitiatedShutdownBehavior', cdk.validateString)(properties.instanceInitiatedShutdownBehavior));
        errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));
        errors.collect(cdk.propertyValidator('ipv6AddressCount', cdk.validateNumber)(properties.ipv6AddressCount));
        errors.collect(cdk.propertyValidator('ipv6Addresses', cdk.listValidator(InstanceResource_InstanceIpv6AddressPropertyValidator))(properties.ipv6Addresses));
        errors.collect(cdk.propertyValidator('kernelId', cdk.validateString)(properties.kernelId));
        errors.collect(cdk.propertyValidator('keyName', cdk.validateString)(properties.keyName));
        errors.collect(cdk.propertyValidator('launchTemplate', InstanceResource_LaunchTemplateSpecificationPropertyValidator)(properties.launchTemplate));
        errors.collect(cdk.propertyValidator('licenseSpecifications', cdk.listValidator(InstanceResource_LicenseSpecificationPropertyValidator))(properties.licenseSpecifications));
        errors.collect(cdk.propertyValidator('monitoring', cdk.validateBoolean)(properties.monitoring));
        errors.collect(cdk.propertyValidator('networkInterfaces', cdk.listValidator(InstanceResource_NetworkInterfacePropertyValidator))(properties.networkInterfaces));
        errors.collect(cdk.propertyValidator('placementGroupName', cdk.validateString)(properties.placementGroupName));
        errors.collect(cdk.propertyValidator('privateIpAddress', cdk.validateString)(properties.privateIpAddress));
        errors.collect(cdk.propertyValidator('ramdiskId', cdk.validateString)(properties.ramdiskId));
        errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
        errors.collect(cdk.propertyValidator('securityGroups', cdk.listValidator(cdk.validateString))(properties.securityGroups));
        errors.collect(cdk.propertyValidator('sourceDestCheck', cdk.validateBoolean)(properties.sourceDestCheck));
        errors.collect(cdk.propertyValidator('ssmAssociations', cdk.listValidator(InstanceResource_SsmAssociationPropertyValidator))(properties.ssmAssociations));
        errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        errors.collect(cdk.propertyValidator('tenancy', cdk.validateString)(properties.tenancy));
        errors.collect(cdk.propertyValidator('userData', cdk.validateString)(properties.userData));
        errors.collect(cdk.propertyValidator('volumes', cdk.listValidator(InstanceResource_VolumePropertyValidator))(properties.volumes));
        return errors.wrap('supplied properties not correct for "InstanceResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Instance`` resource
     *
     * @param properties the TypeScript properties of a ``InstanceResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Instance`` resource.
     */
    function instanceResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        InstanceResourcePropsValidator(properties).assertSuccess();
        return {
            AdditionalInfo: cdk.stringToCloudFormation(properties.additionalInfo),
            Affinity: cdk.stringToCloudFormation(properties.affinity),
            AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
            BlockDeviceMappings: cdk.listMapper(instanceResourceBlockDeviceMappingPropertyToCloudFormation)(properties.blockDeviceMappings),
            CreditSpecification: instanceResourceCreditSpecificationPropertyToCloudFormation(properties.creditSpecification),
            DisableApiTermination: cdk.booleanToCloudFormation(properties.disableApiTermination),
            EbsOptimized: cdk.booleanToCloudFormation(properties.ebsOptimized),
            ElasticGpuSpecifications: cdk.listMapper(instanceResourceElasticGpuSpecificationPropertyToCloudFormation)(properties.elasticGpuSpecifications),
            ElasticInferenceAccelerators: cdk.listMapper(instanceResourceElasticInferenceAcceleratorPropertyToCloudFormation)(properties.elasticInferenceAccelerators),
            HostId: cdk.stringToCloudFormation(properties.hostId),
            IamInstanceProfile: cdk.stringToCloudFormation(properties.iamInstanceProfile),
            ImageId: cdk.stringToCloudFormation(properties.imageId),
            InstanceInitiatedShutdownBehavior: cdk.stringToCloudFormation(properties.instanceInitiatedShutdownBehavior),
            InstanceType: cdk.stringToCloudFormation(properties.instanceType),
            Ipv6AddressCount: cdk.numberToCloudFormation(properties.ipv6AddressCount),
            Ipv6Addresses: cdk.listMapper(instanceResourceInstanceIpv6AddressPropertyToCloudFormation)(properties.ipv6Addresses),
            KernelId: cdk.stringToCloudFormation(properties.kernelId),
            KeyName: cdk.stringToCloudFormation(properties.keyName),
            LaunchTemplate: instanceResourceLaunchTemplateSpecificationPropertyToCloudFormation(properties.launchTemplate),
            LicenseSpecifications: cdk.listMapper(instanceResourceLicenseSpecificationPropertyToCloudFormation)(properties.licenseSpecifications),
            Monitoring: cdk.booleanToCloudFormation(properties.monitoring),
            NetworkInterfaces: cdk.listMapper(instanceResourceNetworkInterfacePropertyToCloudFormation)(properties.networkInterfaces),
            PlacementGroupName: cdk.stringToCloudFormation(properties.placementGroupName),
            PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),
            RamdiskId: cdk.stringToCloudFormation(properties.ramdiskId),
            SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
            SecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroups),
            SourceDestCheck: cdk.booleanToCloudFormation(properties.sourceDestCheck),
            SsmAssociations: cdk.listMapper(instanceResourceSsmAssociationPropertyToCloudFormation)(properties.ssmAssociations),
            SubnetId: cdk.stringToCloudFormation(properties.subnetId),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
            Tenancy: cdk.stringToCloudFormation(properties.tenancy),
            UserData: cdk.stringToCloudFormation(properties.userData),
            Volumes: cdk.listMapper(instanceResourceVolumePropertyToCloudFormation)(properties.volumes),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
     */
    class InstanceResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::Instance``.
         *
         * @param parent   the ``cdk.Construct`` this ``InstanceResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``InstanceResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: InstanceResource.resourceTypeName, properties });
            this.instanceAvailabilityZone = this.getAtt('AvailabilityZone').toString();
            this.instancePrivateDnsName = this.getAtt('PrivateDnsName').toString();
            this.instancePrivateIp = this.getAtt('PrivateIp').toString();
            this.instancePublicDnsName = this.getAtt('PublicDnsName').toString();
            this.instancePublicIp = this.getAtt('PublicIp').toString();
            this.instanceId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return instanceResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    InstanceResource.resourceTypeName = "AWS::EC2::Instance";
    cloudformation.InstanceResource = InstanceResource;
    /**
     * Determine whether the given properties match those of a ``AssociationParameterProperty``
     *
     * @param properties the TypeScript properties of a ``AssociationParameterProperty``
     *
     * @returns the result of the validation.
     */
    function InstanceResource_AssociationParameterPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));
        errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));
        errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));
        errors.collect(cdk.propertyValidator('value', cdk.listValidator(cdk.validateString))(properties.value));
        return errors.wrap('supplied properties not correct for "AssociationParameterProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Instance.AssociationParameter`` resource
     *
     * @param properties the TypeScript properties of a ``AssociationParameterProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Instance.AssociationParameter`` resource.
     */
    function instanceResourceAssociationParameterPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        InstanceResource_AssociationParameterPropertyValidator(properties).assertSuccess();
        return {
            Key: cdk.stringToCloudFormation(properties.key),
            Value: cdk.listMapper(cdk.stringToCloudFormation)(properties.value),
        };
    }
    /**
     * Determine whether the given properties match those of a ``BlockDeviceMappingProperty``
     *
     * @param properties the TypeScript properties of a ``BlockDeviceMappingProperty``
     *
     * @returns the result of the validation.
     */
    function InstanceResource_BlockDeviceMappingPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('deviceName', cdk.requiredValidator)(properties.deviceName));
        errors.collect(cdk.propertyValidator('deviceName', cdk.validateString)(properties.deviceName));
        errors.collect(cdk.propertyValidator('ebs', InstanceResource_EbsPropertyValidator)(properties.ebs));
        errors.collect(cdk.propertyValidator('noDevice', InstanceResource_NoDevicePropertyValidator)(properties.noDevice));
        errors.collect(cdk.propertyValidator('virtualName', cdk.validateString)(properties.virtualName));
        return errors.wrap('supplied properties not correct for "BlockDeviceMappingProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Instance.BlockDeviceMapping`` resource
     *
     * @param properties the TypeScript properties of a ``BlockDeviceMappingProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Instance.BlockDeviceMapping`` resource.
     */
    function instanceResourceBlockDeviceMappingPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        InstanceResource_BlockDeviceMappingPropertyValidator(properties).assertSuccess();
        return {
            DeviceName: cdk.stringToCloudFormation(properties.deviceName),
            Ebs: instanceResourceEbsPropertyToCloudFormation(properties.ebs),
            NoDevice: instanceResourceNoDevicePropertyToCloudFormation(properties.noDevice),
            VirtualName: cdk.stringToCloudFormation(properties.virtualName),
        };
    }
    /**
     * Determine whether the given properties match those of a ``CreditSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``CreditSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function InstanceResource_CreditSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('cpuCredits', cdk.validateString)(properties.cpuCredits));
        return errors.wrap('supplied properties not correct for "CreditSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Instance.CreditSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``CreditSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Instance.CreditSpecification`` resource.
     */
    function instanceResourceCreditSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        InstanceResource_CreditSpecificationPropertyValidator(properties).assertSuccess();
        return {
            CPUCredits: cdk.stringToCloudFormation(properties.cpuCredits),
        };
    }
    /**
     * Determine whether the given properties match those of a ``EbsProperty``
     *
     * @param properties the TypeScript properties of a ``EbsProperty``
     *
     * @returns the result of the validation.
     */
    function InstanceResource_EbsPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('deleteOnTermination', cdk.validateBoolean)(properties.deleteOnTermination));
        errors.collect(cdk.propertyValidator('encrypted', cdk.validateBoolean)(properties.encrypted));
        errors.collect(cdk.propertyValidator('iops', cdk.validateNumber)(properties.iops));
        errors.collect(cdk.propertyValidator('snapshotId', cdk.validateString)(properties.snapshotId));
        errors.collect(cdk.propertyValidator('volumeSize', cdk.validateNumber)(properties.volumeSize));
        errors.collect(cdk.propertyValidator('volumeType', cdk.validateString)(properties.volumeType));
        return errors.wrap('supplied properties not correct for "EbsProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Instance.Ebs`` resource
     *
     * @param properties the TypeScript properties of a ``EbsProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Instance.Ebs`` resource.
     */
    function instanceResourceEbsPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        InstanceResource_EbsPropertyValidator(properties).assertSuccess();
        return {
            DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),
            Encrypted: cdk.booleanToCloudFormation(properties.encrypted),
            Iops: cdk.numberToCloudFormation(properties.iops),
            SnapshotId: cdk.stringToCloudFormation(properties.snapshotId),
            VolumeSize: cdk.numberToCloudFormation(properties.volumeSize),
            VolumeType: cdk.stringToCloudFormation(properties.volumeType),
        };
    }
    /**
     * Determine whether the given properties match those of a ``ElasticGpuSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``ElasticGpuSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function InstanceResource_ElasticGpuSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));
        errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));
        return errors.wrap('supplied properties not correct for "ElasticGpuSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Instance.ElasticGpuSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``ElasticGpuSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Instance.ElasticGpuSpecification`` resource.
     */
    function instanceResourceElasticGpuSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        InstanceResource_ElasticGpuSpecificationPropertyValidator(properties).assertSuccess();
        return {
            Type: cdk.stringToCloudFormation(properties.type),
        };
    }
    /**
     * Determine whether the given properties match those of a ``ElasticInferenceAcceleratorProperty``
     *
     * @param properties the TypeScript properties of a ``ElasticInferenceAcceleratorProperty``
     *
     * @returns the result of the validation.
     */
    function InstanceResource_ElasticInferenceAcceleratorPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));
        errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));
        return errors.wrap('supplied properties not correct for "ElasticInferenceAcceleratorProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Instance.ElasticInferenceAccelerator`` resource
     *
     * @param properties the TypeScript properties of a ``ElasticInferenceAcceleratorProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Instance.ElasticInferenceAccelerator`` resource.
     */
    function instanceResourceElasticInferenceAcceleratorPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        InstanceResource_ElasticInferenceAcceleratorPropertyValidator(properties).assertSuccess();
        return {
            Type: cdk.stringToCloudFormation(properties.type),
        };
    }
    /**
     * Determine whether the given properties match those of a ``InstanceIpv6AddressProperty``
     *
     * @param properties the TypeScript properties of a ``InstanceIpv6AddressProperty``
     *
     * @returns the result of the validation.
     */
    function InstanceResource_InstanceIpv6AddressPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('ipv6Address', cdk.requiredValidator)(properties.ipv6Address));
        errors.collect(cdk.propertyValidator('ipv6Address', cdk.validateString)(properties.ipv6Address));
        return errors.wrap('supplied properties not correct for "InstanceIpv6AddressProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Instance.InstanceIpv6Address`` resource
     *
     * @param properties the TypeScript properties of a ``InstanceIpv6AddressProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Instance.InstanceIpv6Address`` resource.
     */
    function instanceResourceInstanceIpv6AddressPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        InstanceResource_InstanceIpv6AddressPropertyValidator(properties).assertSuccess();
        return {
            Ipv6Address: cdk.stringToCloudFormation(properties.ipv6Address),
        };
    }
    /**
     * Determine whether the given properties match those of a ``LaunchTemplateSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``LaunchTemplateSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function InstanceResource_LaunchTemplateSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('launchTemplateId', cdk.validateString)(properties.launchTemplateId));
        errors.collect(cdk.propertyValidator('launchTemplateName', cdk.validateString)(properties.launchTemplateName));
        errors.collect(cdk.propertyValidator('version', cdk.requiredValidator)(properties.version));
        errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));
        return errors.wrap('supplied properties not correct for "LaunchTemplateSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Instance.LaunchTemplateSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``LaunchTemplateSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Instance.LaunchTemplateSpecification`` resource.
     */
    function instanceResourceLaunchTemplateSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        InstanceResource_LaunchTemplateSpecificationPropertyValidator(properties).assertSuccess();
        return {
            LaunchTemplateId: cdk.stringToCloudFormation(properties.launchTemplateId),
            LaunchTemplateName: cdk.stringToCloudFormation(properties.launchTemplateName),
            Version: cdk.stringToCloudFormation(properties.version),
        };
    }
    /**
     * Determine whether the given properties match those of a ``LicenseSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``LicenseSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function InstanceResource_LicenseSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('licenseConfigurationArn', cdk.requiredValidator)(properties.licenseConfigurationArn));
        errors.collect(cdk.propertyValidator('licenseConfigurationArn', cdk.validateString)(properties.licenseConfigurationArn));
        return errors.wrap('supplied properties not correct for "LicenseSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Instance.LicenseSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``LicenseSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Instance.LicenseSpecification`` resource.
     */
    function instanceResourceLicenseSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        InstanceResource_LicenseSpecificationPropertyValidator(properties).assertSuccess();
        return {
            LicenseConfigurationArn: cdk.stringToCloudFormation(properties.licenseConfigurationArn),
        };
    }
    /**
     * Determine whether the given properties match those of a ``NetworkInterfaceProperty``
     *
     * @param properties the TypeScript properties of a ``NetworkInterfaceProperty``
     *
     * @returns the result of the validation.
     */
    function InstanceResource_NetworkInterfacePropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('associatePublicIpAddress', cdk.validateBoolean)(properties.associatePublicIpAddress));
        errors.collect(cdk.propertyValidator('deleteOnTermination', cdk.validateBoolean)(properties.deleteOnTermination));
        errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));
        errors.collect(cdk.propertyValidator('deviceIndex', cdk.requiredValidator)(properties.deviceIndex));
        errors.collect(cdk.propertyValidator('deviceIndex', cdk.validateString)(properties.deviceIndex));
        errors.collect(cdk.propertyValidator('groupSet', cdk.listValidator(cdk.validateString))(properties.groupSet));
        errors.collect(cdk.propertyValidator('ipv6AddressCount', cdk.validateNumber)(properties.ipv6AddressCount));
        errors.collect(cdk.propertyValidator('ipv6Addresses', cdk.listValidator(InstanceResource_InstanceIpv6AddressPropertyValidator))(properties.ipv6Addresses));
        errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));
        errors.collect(cdk.propertyValidator('privateIpAddress', cdk.validateString)(properties.privateIpAddress));
        errors.collect(cdk.propertyValidator('privateIpAddresses', cdk.listValidator(InstanceResource_PrivateIpAddressSpecificationPropertyValidator))(properties.privateIpAddresses));
        errors.collect(cdk.propertyValidator('secondaryPrivateIpAddressCount', cdk.validateNumber)(properties.secondaryPrivateIpAddressCount));
        errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));
        return errors.wrap('supplied properties not correct for "NetworkInterfaceProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Instance.NetworkInterface`` resource
     *
     * @param properties the TypeScript properties of a ``NetworkInterfaceProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Instance.NetworkInterface`` resource.
     */
    function instanceResourceNetworkInterfacePropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        InstanceResource_NetworkInterfacePropertyValidator(properties).assertSuccess();
        return {
            AssociatePublicIpAddress: cdk.booleanToCloudFormation(properties.associatePublicIpAddress),
            DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),
            Description: cdk.stringToCloudFormation(properties.description),
            DeviceIndex: cdk.stringToCloudFormation(properties.deviceIndex),
            GroupSet: cdk.listMapper(cdk.stringToCloudFormation)(properties.groupSet),
            Ipv6AddressCount: cdk.numberToCloudFormation(properties.ipv6AddressCount),
            Ipv6Addresses: cdk.listMapper(instanceResourceInstanceIpv6AddressPropertyToCloudFormation)(properties.ipv6Addresses),
            NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),
            PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),
            PrivateIpAddresses: cdk.listMapper(instanceResourcePrivateIpAddressSpecificationPropertyToCloudFormation)(properties.privateIpAddresses),
            SecondaryPrivateIpAddressCount: cdk.numberToCloudFormation(properties.secondaryPrivateIpAddressCount),
            SubnetId: cdk.stringToCloudFormation(properties.subnetId),
        };
    }
    /**
     * Determine whether the given properties match those of a ``NoDeviceProperty``
     *
     * @param properties the TypeScript properties of a ``NoDeviceProperty``
     *
     * @returns the result of the validation.
     */
    function InstanceResource_NoDevicePropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        return errors.wrap('supplied properties not correct for "NoDeviceProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Instance.NoDevice`` resource
     *
     * @param properties the TypeScript properties of a ``NoDeviceProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Instance.NoDevice`` resource.
     */
    function instanceResourceNoDevicePropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        InstanceResource_NoDevicePropertyValidator(properties).assertSuccess();
        return {};
    }
    /**
     * Determine whether the given properties match those of a ``PrivateIpAddressSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``PrivateIpAddressSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function InstanceResource_PrivateIpAddressSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('primary', cdk.requiredValidator)(properties.primary));
        errors.collect(cdk.propertyValidator('primary', cdk.validateBoolean)(properties.primary));
        errors.collect(cdk.propertyValidator('privateIpAddress', cdk.requiredValidator)(properties.privateIpAddress));
        errors.collect(cdk.propertyValidator('privateIpAddress', cdk.validateString)(properties.privateIpAddress));
        return errors.wrap('supplied properties not correct for "PrivateIpAddressSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Instance.PrivateIpAddressSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``PrivateIpAddressSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Instance.PrivateIpAddressSpecification`` resource.
     */
    function instanceResourcePrivateIpAddressSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        InstanceResource_PrivateIpAddressSpecificationPropertyValidator(properties).assertSuccess();
        return {
            Primary: cdk.booleanToCloudFormation(properties.primary),
            PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),
        };
    }
    /**
     * Determine whether the given properties match those of a ``SsmAssociationProperty``
     *
     * @param properties the TypeScript properties of a ``SsmAssociationProperty``
     *
     * @returns the result of the validation.
     */
    function InstanceResource_SsmAssociationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('associationParameters', cdk.listValidator(InstanceResource_AssociationParameterPropertyValidator))(properties.associationParameters));
        errors.collect(cdk.propertyValidator('documentName', cdk.requiredValidator)(properties.documentName));
        errors.collect(cdk.propertyValidator('documentName', cdk.validateString)(properties.documentName));
        return errors.wrap('supplied properties not correct for "SsmAssociationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Instance.SsmAssociation`` resource
     *
     * @param properties the TypeScript properties of a ``SsmAssociationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Instance.SsmAssociation`` resource.
     */
    function instanceResourceSsmAssociationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        InstanceResource_SsmAssociationPropertyValidator(properties).assertSuccess();
        return {
            AssociationParameters: cdk.listMapper(instanceResourceAssociationParameterPropertyToCloudFormation)(properties.associationParameters),
            DocumentName: cdk.stringToCloudFormation(properties.documentName),
        };
    }
    /**
     * Determine whether the given properties match those of a ``VolumeProperty``
     *
     * @param properties the TypeScript properties of a ``VolumeProperty``
     *
     * @returns the result of the validation.
     */
    function InstanceResource_VolumePropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('device', cdk.requiredValidator)(properties.device));
        errors.collect(cdk.propertyValidator('device', cdk.validateString)(properties.device));
        errors.collect(cdk.propertyValidator('volumeId', cdk.requiredValidator)(properties.volumeId));
        errors.collect(cdk.propertyValidator('volumeId', cdk.validateString)(properties.volumeId));
        return errors.wrap('supplied properties not correct for "VolumeProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Instance.Volume`` resource
     *
     * @param properties the TypeScript properties of a ``VolumeProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Instance.Volume`` resource.
     */
    function instanceResourceVolumePropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        InstanceResource_VolumePropertyValidator(properties).assertSuccess();
        return {
            Device: cdk.stringToCloudFormation(properties.device),
            VolumeId: cdk.stringToCloudFormation(properties.volumeId),
        };
    }
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``InternetGatewayResourceProps``
     *
     * @param properties the TypeScript properties of a ``InternetGatewayResourceProps``
     *
     * @returns the result of the validation.
     */
    function InternetGatewayResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        return errors.wrap('supplied properties not correct for "InternetGatewayResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::InternetGateway`` resource
     *
     * @param properties the TypeScript properties of a ``InternetGatewayResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::InternetGateway`` resource.
     */
    function internetGatewayResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        InternetGatewayResourcePropsValidator(properties).assertSuccess();
        return {
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html
     */
    class InternetGatewayResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::InternetGateway``.
         *
         * @param parent   the ``cdk.Construct`` this ``InternetGatewayResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``InternetGatewayResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: InternetGatewayResource.resourceTypeName, properties });
            this.internetGatewayName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return internetGatewayResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    InternetGatewayResource.resourceTypeName = "AWS::EC2::InternetGateway";
    cloudformation.InternetGatewayResource = InternetGatewayResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``LaunchTemplateResourceProps``
     *
     * @param properties the TypeScript properties of a ``LaunchTemplateResourceProps``
     *
     * @returns the result of the validation.
     */
    function LaunchTemplateResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('launchTemplateData', LaunchTemplateResource_LaunchTemplateDataPropertyValidator)(properties.launchTemplateData));
        errors.collect(cdk.propertyValidator('launchTemplateName', cdk.validateString)(properties.launchTemplateName));
        return errors.wrap('supplied properties not correct for "LaunchTemplateResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate`` resource
     *
     * @param properties the TypeScript properties of a ``LaunchTemplateResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate`` resource.
     */
    function launchTemplateResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        LaunchTemplateResourcePropsValidator(properties).assertSuccess();
        return {
            LaunchTemplateData: launchTemplateResourceLaunchTemplateDataPropertyToCloudFormation(properties.launchTemplateData),
            LaunchTemplateName: cdk.stringToCloudFormation(properties.launchTemplateName),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html
     */
    class LaunchTemplateResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::LaunchTemplate``.
         *
         * @param parent   the ``cdk.Construct`` this ``LaunchTemplateResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``LaunchTemplateResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: LaunchTemplateResource.resourceTypeName, properties });
            this.launchTemplateDefaultVersionNumber = this.getAtt('DefaultVersionNumber').toString();
            this.launchTemplateLatestVersionNumber = this.getAtt('LatestVersionNumber').toString();
            this.launchTemplateId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return launchTemplateResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    LaunchTemplateResource.resourceTypeName = "AWS::EC2::LaunchTemplate";
    cloudformation.LaunchTemplateResource = LaunchTemplateResource;
    /**
     * Determine whether the given properties match those of a ``BlockDeviceMappingProperty``
     *
     * @param properties the TypeScript properties of a ``BlockDeviceMappingProperty``
     *
     * @returns the result of the validation.
     */
    function LaunchTemplateResource_BlockDeviceMappingPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('deviceName', cdk.validateString)(properties.deviceName));
        errors.collect(cdk.propertyValidator('ebs', LaunchTemplateResource_EbsPropertyValidator)(properties.ebs));
        errors.collect(cdk.propertyValidator('noDevice', cdk.validateString)(properties.noDevice));
        errors.collect(cdk.propertyValidator('virtualName', cdk.validateString)(properties.virtualName));
        return errors.wrap('supplied properties not correct for "BlockDeviceMappingProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.BlockDeviceMapping`` resource
     *
     * @param properties the TypeScript properties of a ``BlockDeviceMappingProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.BlockDeviceMapping`` resource.
     */
    function launchTemplateResourceBlockDeviceMappingPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        LaunchTemplateResource_BlockDeviceMappingPropertyValidator(properties).assertSuccess();
        return {
            DeviceName: cdk.stringToCloudFormation(properties.deviceName),
            Ebs: launchTemplateResourceEbsPropertyToCloudFormation(properties.ebs),
            NoDevice: cdk.stringToCloudFormation(properties.noDevice),
            VirtualName: cdk.stringToCloudFormation(properties.virtualName),
        };
    }
    /**
     * Determine whether the given properties match those of a ``CreditSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``CreditSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function LaunchTemplateResource_CreditSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('cpuCredits', cdk.validateString)(properties.cpuCredits));
        return errors.wrap('supplied properties not correct for "CreditSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.CreditSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``CreditSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.CreditSpecification`` resource.
     */
    function launchTemplateResourceCreditSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        LaunchTemplateResource_CreditSpecificationPropertyValidator(properties).assertSuccess();
        return {
            CpuCredits: cdk.stringToCloudFormation(properties.cpuCredits),
        };
    }
    /**
     * Determine whether the given properties match those of a ``EbsProperty``
     *
     * @param properties the TypeScript properties of a ``EbsProperty``
     *
     * @returns the result of the validation.
     */
    function LaunchTemplateResource_EbsPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('deleteOnTermination', cdk.validateBoolean)(properties.deleteOnTermination));
        errors.collect(cdk.propertyValidator('encrypted', cdk.validateBoolean)(properties.encrypted));
        errors.collect(cdk.propertyValidator('iops', cdk.validateNumber)(properties.iops));
        errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));
        errors.collect(cdk.propertyValidator('snapshotId', cdk.validateString)(properties.snapshotId));
        errors.collect(cdk.propertyValidator('volumeSize', cdk.validateNumber)(properties.volumeSize));
        errors.collect(cdk.propertyValidator('volumeType', cdk.validateString)(properties.volumeType));
        return errors.wrap('supplied properties not correct for "EbsProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.Ebs`` resource
     *
     * @param properties the TypeScript properties of a ``EbsProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.Ebs`` resource.
     */
    function launchTemplateResourceEbsPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        LaunchTemplateResource_EbsPropertyValidator(properties).assertSuccess();
        return {
            DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),
            Encrypted: cdk.booleanToCloudFormation(properties.encrypted),
            Iops: cdk.numberToCloudFormation(properties.iops),
            KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),
            SnapshotId: cdk.stringToCloudFormation(properties.snapshotId),
            VolumeSize: cdk.numberToCloudFormation(properties.volumeSize),
            VolumeType: cdk.stringToCloudFormation(properties.volumeType),
        };
    }
    /**
     * Determine whether the given properties match those of a ``ElasticGpuSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``ElasticGpuSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function LaunchTemplateResource_ElasticGpuSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));
        return errors.wrap('supplied properties not correct for "ElasticGpuSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.ElasticGpuSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``ElasticGpuSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.ElasticGpuSpecification`` resource.
     */
    function launchTemplateResourceElasticGpuSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        LaunchTemplateResource_ElasticGpuSpecificationPropertyValidator(properties).assertSuccess();
        return {
            Type: cdk.stringToCloudFormation(properties.type),
        };
    }
    /**
     * Determine whether the given properties match those of a ``IamInstanceProfileProperty``
     *
     * @param properties the TypeScript properties of a ``IamInstanceProfileProperty``
     *
     * @returns the result of the validation.
     */
    function LaunchTemplateResource_IamInstanceProfilePropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));
        errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
        return errors.wrap('supplied properties not correct for "IamInstanceProfileProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.IamInstanceProfile`` resource
     *
     * @param properties the TypeScript properties of a ``IamInstanceProfileProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.IamInstanceProfile`` resource.
     */
    function launchTemplateResourceIamInstanceProfilePropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        LaunchTemplateResource_IamInstanceProfilePropertyValidator(properties).assertSuccess();
        return {
            Arn: cdk.stringToCloudFormation(properties.arn),
            Name: cdk.stringToCloudFormation(properties.name),
        };
    }
    /**
     * Determine whether the given properties match those of a ``InstanceMarketOptionsProperty``
     *
     * @param properties the TypeScript properties of a ``InstanceMarketOptionsProperty``
     *
     * @returns the result of the validation.
     */
    function LaunchTemplateResource_InstanceMarketOptionsPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('marketType', cdk.validateString)(properties.marketType));
        errors.collect(cdk.propertyValidator('spotOptions', LaunchTemplateResource_SpotOptionsPropertyValidator)(properties.spotOptions));
        return errors.wrap('supplied properties not correct for "InstanceMarketOptionsProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.InstanceMarketOptions`` resource
     *
     * @param properties the TypeScript properties of a ``InstanceMarketOptionsProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.InstanceMarketOptions`` resource.
     */
    function launchTemplateResourceInstanceMarketOptionsPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        LaunchTemplateResource_InstanceMarketOptionsPropertyValidator(properties).assertSuccess();
        return {
            MarketType: cdk.stringToCloudFormation(properties.marketType),
            SpotOptions: launchTemplateResourceSpotOptionsPropertyToCloudFormation(properties.spotOptions),
        };
    }
    /**
     * Determine whether the given properties match those of a ``Ipv6AddProperty``
     *
     * @param properties the TypeScript properties of a ``Ipv6AddProperty``
     *
     * @returns the result of the validation.
     */
    function LaunchTemplateResource_Ipv6AddPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('ipv6Address', cdk.validateString)(properties.ipv6Address));
        return errors.wrap('supplied properties not correct for "Ipv6AddProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.Ipv6Add`` resource
     *
     * @param properties the TypeScript properties of a ``Ipv6AddProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.Ipv6Add`` resource.
     */
    function launchTemplateResourceIpv6AddPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        LaunchTemplateResource_Ipv6AddPropertyValidator(properties).assertSuccess();
        return {
            Ipv6Address: cdk.stringToCloudFormation(properties.ipv6Address),
        };
    }
    /**
     * Determine whether the given properties match those of a ``LaunchTemplateDataProperty``
     *
     * @param properties the TypeScript properties of a ``LaunchTemplateDataProperty``
     *
     * @returns the result of the validation.
     */
    function LaunchTemplateResource_LaunchTemplateDataPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('blockDeviceMappings', cdk.listValidator(LaunchTemplateResource_BlockDeviceMappingPropertyValidator))(properties.blockDeviceMappings));
        errors.collect(cdk.propertyValidator('creditSpecification', LaunchTemplateResource_CreditSpecificationPropertyValidator)(properties.creditSpecification));
        errors.collect(cdk.propertyValidator('disableApiTermination', cdk.validateBoolean)(properties.disableApiTermination));
        errors.collect(cdk.propertyValidator('ebsOptimized', cdk.validateBoolean)(properties.ebsOptimized));
        errors.collect(cdk.propertyValidator('elasticGpuSpecifications', cdk.listValidator(LaunchTemplateResource_ElasticGpuSpecificationPropertyValidator))(properties.elasticGpuSpecifications));
        errors.collect(cdk.propertyValidator('iamInstanceProfile', LaunchTemplateResource_IamInstanceProfilePropertyValidator)(properties.iamInstanceProfile));
        errors.collect(cdk.propertyValidator('imageId', cdk.validateString)(properties.imageId));
        errors.collect(cdk.propertyValidator('instanceInitiatedShutdownBehavior', cdk.validateString)(properties.instanceInitiatedShutdownBehavior));
        errors.collect(cdk.propertyValidator('instanceMarketOptions', LaunchTemplateResource_InstanceMarketOptionsPropertyValidator)(properties.instanceMarketOptions));
        errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));
        errors.collect(cdk.propertyValidator('kernelId', cdk.validateString)(properties.kernelId));
        errors.collect(cdk.propertyValidator('keyName', cdk.validateString)(properties.keyName));
        errors.collect(cdk.propertyValidator('monitoring', LaunchTemplateResource_MonitoringPropertyValidator)(properties.monitoring));
        errors.collect(cdk.propertyValidator('networkInterfaces', cdk.listValidator(LaunchTemplateResource_NetworkInterfacePropertyValidator))(properties.networkInterfaces));
        errors.collect(cdk.propertyValidator('placement', LaunchTemplateResource_PlacementPropertyValidator)(properties.placement));
        errors.collect(cdk.propertyValidator('ramDiskId', cdk.validateString)(properties.ramDiskId));
        errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
        errors.collect(cdk.propertyValidator('securityGroups', cdk.listValidator(cdk.validateString))(properties.securityGroups));
        errors.collect(cdk.propertyValidator('tagSpecifications', cdk.listValidator(LaunchTemplateResource_TagSpecificationPropertyValidator))(properties.tagSpecifications));
        errors.collect(cdk.propertyValidator('userData', cdk.validateString)(properties.userData));
        return errors.wrap('supplied properties not correct for "LaunchTemplateDataProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.LaunchTemplateData`` resource
     *
     * @param properties the TypeScript properties of a ``LaunchTemplateDataProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.LaunchTemplateData`` resource.
     */
    function launchTemplateResourceLaunchTemplateDataPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        LaunchTemplateResource_LaunchTemplateDataPropertyValidator(properties).assertSuccess();
        return {
            BlockDeviceMappings: cdk.listMapper(launchTemplateResourceBlockDeviceMappingPropertyToCloudFormation)(properties.blockDeviceMappings),
            CreditSpecification: launchTemplateResourceCreditSpecificationPropertyToCloudFormation(properties.creditSpecification),
            DisableApiTermination: cdk.booleanToCloudFormation(properties.disableApiTermination),
            EbsOptimized: cdk.booleanToCloudFormation(properties.ebsOptimized),
            ElasticGpuSpecifications: cdk.listMapper(launchTemplateResourceElasticGpuSpecificationPropertyToCloudFormation)(properties.elasticGpuSpecifications),
            IamInstanceProfile: launchTemplateResourceIamInstanceProfilePropertyToCloudFormation(properties.iamInstanceProfile),
            ImageId: cdk.stringToCloudFormation(properties.imageId),
            InstanceInitiatedShutdownBehavior: cdk.stringToCloudFormation(properties.instanceInitiatedShutdownBehavior),
            InstanceMarketOptions: launchTemplateResourceInstanceMarketOptionsPropertyToCloudFormation(properties.instanceMarketOptions),
            InstanceType: cdk.stringToCloudFormation(properties.instanceType),
            KernelId: cdk.stringToCloudFormation(properties.kernelId),
            KeyName: cdk.stringToCloudFormation(properties.keyName),
            Monitoring: launchTemplateResourceMonitoringPropertyToCloudFormation(properties.monitoring),
            NetworkInterfaces: cdk.listMapper(launchTemplateResourceNetworkInterfacePropertyToCloudFormation)(properties.networkInterfaces),
            Placement: launchTemplateResourcePlacementPropertyToCloudFormation(properties.placement),
            RamDiskId: cdk.stringToCloudFormation(properties.ramDiskId),
            SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
            SecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroups),
            TagSpecifications: cdk.listMapper(launchTemplateResourceTagSpecificationPropertyToCloudFormation)(properties.tagSpecifications),
            UserData: cdk.stringToCloudFormation(properties.userData),
        };
    }
    /**
     * Determine whether the given properties match those of a ``MonitoringProperty``
     *
     * @param properties the TypeScript properties of a ``MonitoringProperty``
     *
     * @returns the result of the validation.
     */
    function LaunchTemplateResource_MonitoringPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));
        return errors.wrap('supplied properties not correct for "MonitoringProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.Monitoring`` resource
     *
     * @param properties the TypeScript properties of a ``MonitoringProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.Monitoring`` resource.
     */
    function launchTemplateResourceMonitoringPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        LaunchTemplateResource_MonitoringPropertyValidator(properties).assertSuccess();
        return {
            Enabled: cdk.booleanToCloudFormation(properties.enabled),
        };
    }
    /**
     * Determine whether the given properties match those of a ``NetworkInterfaceProperty``
     *
     * @param properties the TypeScript properties of a ``NetworkInterfaceProperty``
     *
     * @returns the result of the validation.
     */
    function LaunchTemplateResource_NetworkInterfacePropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('associatePublicIpAddress', cdk.validateBoolean)(properties.associatePublicIpAddress));
        errors.collect(cdk.propertyValidator('deleteOnTermination', cdk.validateBoolean)(properties.deleteOnTermination));
        errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));
        errors.collect(cdk.propertyValidator('deviceIndex', cdk.validateNumber)(properties.deviceIndex));
        errors.collect(cdk.propertyValidator('groups', cdk.listValidator(cdk.validateString))(properties.groups));
        errors.collect(cdk.propertyValidator('ipv6AddressCount', cdk.validateNumber)(properties.ipv6AddressCount));
        errors.collect(cdk.propertyValidator('ipv6Addresses', cdk.listValidator(LaunchTemplateResource_Ipv6AddPropertyValidator))(properties.ipv6Addresses));
        errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));
        errors.collect(cdk.propertyValidator('privateIpAddress', cdk.validateString)(properties.privateIpAddress));
        errors.collect(cdk.propertyValidator('privateIpAddresses', cdk.listValidator(LaunchTemplateResource_PrivateIpAddPropertyValidator))(properties.privateIpAddresses));
        errors.collect(cdk.propertyValidator('secondaryPrivateIpAddressCount', cdk.validateNumber)(properties.secondaryPrivateIpAddressCount));
        errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));
        return errors.wrap('supplied properties not correct for "NetworkInterfaceProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.NetworkInterface`` resource
     *
     * @param properties the TypeScript properties of a ``NetworkInterfaceProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.NetworkInterface`` resource.
     */
    function launchTemplateResourceNetworkInterfacePropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        LaunchTemplateResource_NetworkInterfacePropertyValidator(properties).assertSuccess();
        return {
            AssociatePublicIpAddress: cdk.booleanToCloudFormation(properties.associatePublicIpAddress),
            DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),
            Description: cdk.stringToCloudFormation(properties.description),
            DeviceIndex: cdk.numberToCloudFormation(properties.deviceIndex),
            Groups: cdk.listMapper(cdk.stringToCloudFormation)(properties.groups),
            Ipv6AddressCount: cdk.numberToCloudFormation(properties.ipv6AddressCount),
            Ipv6Addresses: cdk.listMapper(launchTemplateResourceIpv6AddPropertyToCloudFormation)(properties.ipv6Addresses),
            NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),
            PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),
            PrivateIpAddresses: cdk.listMapper(launchTemplateResourcePrivateIpAddPropertyToCloudFormation)(properties.privateIpAddresses),
            SecondaryPrivateIpAddressCount: cdk.numberToCloudFormation(properties.secondaryPrivateIpAddressCount),
            SubnetId: cdk.stringToCloudFormation(properties.subnetId),
        };
    }
    /**
     * Determine whether the given properties match those of a ``PlacementProperty``
     *
     * @param properties the TypeScript properties of a ``PlacementProperty``
     *
     * @returns the result of the validation.
     */
    function LaunchTemplateResource_PlacementPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('affinity', cdk.validateString)(properties.affinity));
        errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));
        errors.collect(cdk.propertyValidator('groupName', cdk.validateString)(properties.groupName));
        errors.collect(cdk.propertyValidator('hostId', cdk.validateString)(properties.hostId));
        errors.collect(cdk.propertyValidator('tenancy', cdk.validateString)(properties.tenancy));
        return errors.wrap('supplied properties not correct for "PlacementProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.Placement`` resource
     *
     * @param properties the TypeScript properties of a ``PlacementProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.Placement`` resource.
     */
    function launchTemplateResourcePlacementPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        LaunchTemplateResource_PlacementPropertyValidator(properties).assertSuccess();
        return {
            Affinity: cdk.stringToCloudFormation(properties.affinity),
            AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
            GroupName: cdk.stringToCloudFormation(properties.groupName),
            HostId: cdk.stringToCloudFormation(properties.hostId),
            Tenancy: cdk.stringToCloudFormation(properties.tenancy),
        };
    }
    /**
     * Determine whether the given properties match those of a ``PrivateIpAddProperty``
     *
     * @param properties the TypeScript properties of a ``PrivateIpAddProperty``
     *
     * @returns the result of the validation.
     */
    function LaunchTemplateResource_PrivateIpAddPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('primary', cdk.validateBoolean)(properties.primary));
        errors.collect(cdk.propertyValidator('privateIpAddress', cdk.validateString)(properties.privateIpAddress));
        return errors.wrap('supplied properties not correct for "PrivateIpAddProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.PrivateIpAdd`` resource
     *
     * @param properties the TypeScript properties of a ``PrivateIpAddProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.PrivateIpAdd`` resource.
     */
    function launchTemplateResourcePrivateIpAddPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        LaunchTemplateResource_PrivateIpAddPropertyValidator(properties).assertSuccess();
        return {
            Primary: cdk.booleanToCloudFormation(properties.primary),
            PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),
        };
    }
    /**
     * Determine whether the given properties match those of a ``SpotOptionsProperty``
     *
     * @param properties the TypeScript properties of a ``SpotOptionsProperty``
     *
     * @returns the result of the validation.
     */
    function LaunchTemplateResource_SpotOptionsPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('instanceInterruptionBehavior', cdk.validateString)(properties.instanceInterruptionBehavior));
        errors.collect(cdk.propertyValidator('maxPrice', cdk.validateString)(properties.maxPrice));
        errors.collect(cdk.propertyValidator('spotInstanceType', cdk.validateString)(properties.spotInstanceType));
        return errors.wrap('supplied properties not correct for "SpotOptionsProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.SpotOptions`` resource
     *
     * @param properties the TypeScript properties of a ``SpotOptionsProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.SpotOptions`` resource.
     */
    function launchTemplateResourceSpotOptionsPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        LaunchTemplateResource_SpotOptionsPropertyValidator(properties).assertSuccess();
        return {
            InstanceInterruptionBehavior: cdk.stringToCloudFormation(properties.instanceInterruptionBehavior),
            MaxPrice: cdk.stringToCloudFormation(properties.maxPrice),
            SpotInstanceType: cdk.stringToCloudFormation(properties.spotInstanceType),
        };
    }
    /**
     * Determine whether the given properties match those of a ``TagSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``TagSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function LaunchTemplateResource_TagSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('resourceType', cdk.validateString)(properties.resourceType));
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        return errors.wrap('supplied properties not correct for "TagSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.TagSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``TagSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::LaunchTemplate.TagSpecification`` resource.
     */
    function launchTemplateResourceTagSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        LaunchTemplateResource_TagSpecificationPropertyValidator(properties).assertSuccess();
        return {
            ResourceType: cdk.stringToCloudFormation(properties.resourceType),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
        };
    }
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``NatGatewayResourceProps``
     *
     * @param properties the TypeScript properties of a ``NatGatewayResourceProps``
     *
     * @returns the result of the validation.
     */
    function NatGatewayResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('allocationId', cdk.requiredValidator)(properties.allocationId));
        errors.collect(cdk.propertyValidator('allocationId', cdk.validateString)(properties.allocationId));
        errors.collect(cdk.propertyValidator('subnetId', cdk.requiredValidator)(properties.subnetId));
        errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        return errors.wrap('supplied properties not correct for "NatGatewayResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::NatGateway`` resource
     *
     * @param properties the TypeScript properties of a ``NatGatewayResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::NatGateway`` resource.
     */
    function natGatewayResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        NatGatewayResourcePropsValidator(properties).assertSuccess();
        return {
            AllocationId: cdk.stringToCloudFormation(properties.allocationId),
            SubnetId: cdk.stringToCloudFormation(properties.subnetId),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html
     */
    class NatGatewayResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::NatGateway``.
         *
         * @param parent   the ``cdk.Construct`` this ``NatGatewayResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``NatGatewayResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: NatGatewayResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'allocationId', this);
            cdk.requireProperty(properties, 'subnetId', this);
            this.natGatewayId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return natGatewayResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    NatGatewayResource.resourceTypeName = "AWS::EC2::NatGateway";
    cloudformation.NatGatewayResource = NatGatewayResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``NetworkAclResourceProps``
     *
     * @param properties the TypeScript properties of a ``NetworkAclResourceProps``
     *
     * @returns the result of the validation.
     */
    function NetworkAclResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));
        errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));
        return errors.wrap('supplied properties not correct for "NetworkAclResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::NetworkAcl`` resource
     *
     * @param properties the TypeScript properties of a ``NetworkAclResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::NetworkAcl`` resource.
     */
    function networkAclResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        NetworkAclResourcePropsValidator(properties).assertSuccess();
        return {
            VpcId: cdk.stringToCloudFormation(properties.vpcId),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-network-acl.html
     */
    class NetworkAclResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::NetworkAcl``.
         *
         * @param parent   the ``cdk.Construct`` this ``NetworkAclResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``NetworkAclResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: NetworkAclResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'vpcId', this);
            this.networkAclName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return networkAclResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    NetworkAclResource.resourceTypeName = "AWS::EC2::NetworkAcl";
    cloudformation.NetworkAclResource = NetworkAclResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``NetworkAclEntryResourceProps``
     *
     * @param properties the TypeScript properties of a ``NetworkAclEntryResourceProps``
     *
     * @returns the result of the validation.
     */
    function NetworkAclEntryResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('cidrBlock', cdk.requiredValidator)(properties.cidrBlock));
        errors.collect(cdk.propertyValidator('cidrBlock', cdk.validateString)(properties.cidrBlock));
        errors.collect(cdk.propertyValidator('egress', cdk.validateBoolean)(properties.egress));
        errors.collect(cdk.propertyValidator('icmp', NetworkAclEntryResource_IcmpPropertyValidator)(properties.icmp));
        errors.collect(cdk.propertyValidator('ipv6CidrBlock', cdk.validateString)(properties.ipv6CidrBlock));
        errors.collect(cdk.propertyValidator('networkAclId', cdk.requiredValidator)(properties.networkAclId));
        errors.collect(cdk.propertyValidator('networkAclId', cdk.validateString)(properties.networkAclId));
        errors.collect(cdk.propertyValidator('portRange', NetworkAclEntryResource_PortRangePropertyValidator)(properties.portRange));
        errors.collect(cdk.propertyValidator('protocol', cdk.requiredValidator)(properties.protocol));
        errors.collect(cdk.propertyValidator('protocol', cdk.validateNumber)(properties.protocol));
        errors.collect(cdk.propertyValidator('ruleAction', cdk.requiredValidator)(properties.ruleAction));
        errors.collect(cdk.propertyValidator('ruleAction', cdk.validateString)(properties.ruleAction));
        errors.collect(cdk.propertyValidator('ruleNumber', cdk.requiredValidator)(properties.ruleNumber));
        errors.collect(cdk.propertyValidator('ruleNumber', cdk.validateNumber)(properties.ruleNumber));
        return errors.wrap('supplied properties not correct for "NetworkAclEntryResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::NetworkAclEntry`` resource
     *
     * @param properties the TypeScript properties of a ``NetworkAclEntryResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::NetworkAclEntry`` resource.
     */
    function networkAclEntryResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        NetworkAclEntryResourcePropsValidator(properties).assertSuccess();
        return {
            CidrBlock: cdk.stringToCloudFormation(properties.cidrBlock),
            NetworkAclId: cdk.stringToCloudFormation(properties.networkAclId),
            Protocol: cdk.numberToCloudFormation(properties.protocol),
            RuleAction: cdk.stringToCloudFormation(properties.ruleAction),
            RuleNumber: cdk.numberToCloudFormation(properties.ruleNumber),
            Egress: cdk.booleanToCloudFormation(properties.egress),
            Icmp: networkAclEntryResourceIcmpPropertyToCloudFormation(properties.icmp),
            Ipv6CidrBlock: cdk.stringToCloudFormation(properties.ipv6CidrBlock),
            PortRange: networkAclEntryResourcePortRangePropertyToCloudFormation(properties.portRange),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-network-acl-entry.html
     */
    class NetworkAclEntryResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::NetworkAclEntry``.
         *
         * @param parent   the ``cdk.Construct`` this ``NetworkAclEntryResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``NetworkAclEntryResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: NetworkAclEntryResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'cidrBlock', this);
            cdk.requireProperty(properties, 'networkAclId', this);
            cdk.requireProperty(properties, 'protocol', this);
            cdk.requireProperty(properties, 'ruleAction', this);
            cdk.requireProperty(properties, 'ruleNumber', this);
            this.networkAclEntryName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return networkAclEntryResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    NetworkAclEntryResource.resourceTypeName = "AWS::EC2::NetworkAclEntry";
    cloudformation.NetworkAclEntryResource = NetworkAclEntryResource;
    /**
     * Determine whether the given properties match those of a ``IcmpProperty``
     *
     * @param properties the TypeScript properties of a ``IcmpProperty``
     *
     * @returns the result of the validation.
     */
    function NetworkAclEntryResource_IcmpPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('code', cdk.validateNumber)(properties.code));
        errors.collect(cdk.propertyValidator('type', cdk.validateNumber)(properties.type));
        return errors.wrap('supplied properties not correct for "IcmpProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::NetworkAclEntry.Icmp`` resource
     *
     * @param properties the TypeScript properties of a ``IcmpProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::NetworkAclEntry.Icmp`` resource.
     */
    function networkAclEntryResourceIcmpPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        NetworkAclEntryResource_IcmpPropertyValidator(properties).assertSuccess();
        return {
            Code: cdk.numberToCloudFormation(properties.code),
            Type: cdk.numberToCloudFormation(properties.type),
        };
    }
    /**
     * Determine whether the given properties match those of a ``PortRangeProperty``
     *
     * @param properties the TypeScript properties of a ``PortRangeProperty``
     *
     * @returns the result of the validation.
     */
    function NetworkAclEntryResource_PortRangePropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('from', cdk.validateNumber)(properties.from));
        errors.collect(cdk.propertyValidator('to', cdk.validateNumber)(properties.to));
        return errors.wrap('supplied properties not correct for "PortRangeProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::NetworkAclEntry.PortRange`` resource
     *
     * @param properties the TypeScript properties of a ``PortRangeProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::NetworkAclEntry.PortRange`` resource.
     */
    function networkAclEntryResourcePortRangePropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        NetworkAclEntryResource_PortRangePropertyValidator(properties).assertSuccess();
        return {
            From: cdk.numberToCloudFormation(properties.from),
            To: cdk.numberToCloudFormation(properties.to),
        };
    }
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``NetworkInterfaceResourceProps``
     *
     * @param properties the TypeScript properties of a ``NetworkInterfaceResourceProps``
     *
     * @returns the result of the validation.
     */
    function NetworkInterfaceResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));
        errors.collect(cdk.propertyValidator('groupSet', cdk.listValidator(cdk.validateString))(properties.groupSet));
        errors.collect(cdk.propertyValidator('interfaceType', cdk.validateString)(properties.interfaceType));
        errors.collect(cdk.propertyValidator('ipv6AddressCount', cdk.validateNumber)(properties.ipv6AddressCount));
        errors.collect(cdk.propertyValidator('ipv6Addresses', NetworkInterfaceResource_InstanceIpv6AddressPropertyValidator)(properties.ipv6Addresses));
        errors.collect(cdk.propertyValidator('privateIpAddress', cdk.validateString)(properties.privateIpAddress));
        errors.collect(cdk.propertyValidator('privateIpAddresses', cdk.listValidator(NetworkInterfaceResource_PrivateIpAddressSpecificationPropertyValidator))(properties.privateIpAddresses));
        errors.collect(cdk.propertyValidator('secondaryPrivateIpAddressCount', cdk.validateNumber)(properties.secondaryPrivateIpAddressCount));
        errors.collect(cdk.propertyValidator('sourceDestCheck', cdk.validateBoolean)(properties.sourceDestCheck));
        errors.collect(cdk.propertyValidator('subnetId', cdk.requiredValidator)(properties.subnetId));
        errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        return errors.wrap('supplied properties not correct for "NetworkInterfaceResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::NetworkInterface`` resource
     *
     * @param properties the TypeScript properties of a ``NetworkInterfaceResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::NetworkInterface`` resource.
     */
    function networkInterfaceResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        NetworkInterfaceResourcePropsValidator(properties).assertSuccess();
        return {
            SubnetId: cdk.stringToCloudFormation(properties.subnetId),
            Description: cdk.stringToCloudFormation(properties.description),
            GroupSet: cdk.listMapper(cdk.stringToCloudFormation)(properties.groupSet),
            InterfaceType: cdk.stringToCloudFormation(properties.interfaceType),
            Ipv6AddressCount: cdk.numberToCloudFormation(properties.ipv6AddressCount),
            Ipv6Addresses: networkInterfaceResourceInstanceIpv6AddressPropertyToCloudFormation(properties.ipv6Addresses),
            PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),
            PrivateIpAddresses: cdk.listMapper(networkInterfaceResourcePrivateIpAddressSpecificationPropertyToCloudFormation)(properties.privateIpAddresses),
            SecondaryPrivateIpAddressCount: cdk.numberToCloudFormation(properties.secondaryPrivateIpAddressCount),
            SourceDestCheck: cdk.booleanToCloudFormation(properties.sourceDestCheck),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-network-interface.html
     */
    class NetworkInterfaceResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::NetworkInterface``.
         *
         * @param parent   the ``cdk.Construct`` this ``NetworkInterfaceResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``NetworkInterfaceResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: NetworkInterfaceResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'subnetId', this);
            this.networkInterfacePrimaryPrivateIpAddress = this.getAtt('PrimaryPrivateIpAddress').toString();
            this.networkInterfaceSecondaryPrivateIpAddresses = new NetworkInterfaceSecondaryPrivateIpAddresses(this.getAtt('SecondaryPrivateIpAddresses'));
            this.networkInterfaceName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return networkInterfaceResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    NetworkInterfaceResource.resourceTypeName = "AWS::EC2::NetworkInterface";
    cloudformation.NetworkInterfaceResource = NetworkInterfaceResource;
    /**
     * Determine whether the given properties match those of a ``InstanceIpv6AddressProperty``
     *
     * @param properties the TypeScript properties of a ``InstanceIpv6AddressProperty``
     *
     * @returns the result of the validation.
     */
    function NetworkInterfaceResource_InstanceIpv6AddressPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('ipv6Address', cdk.requiredValidator)(properties.ipv6Address));
        errors.collect(cdk.propertyValidator('ipv6Address', cdk.validateString)(properties.ipv6Address));
        return errors.wrap('supplied properties not correct for "InstanceIpv6AddressProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::NetworkInterface.InstanceIpv6Address`` resource
     *
     * @param properties the TypeScript properties of a ``InstanceIpv6AddressProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::NetworkInterface.InstanceIpv6Address`` resource.
     */
    function networkInterfaceResourceInstanceIpv6AddressPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        NetworkInterfaceResource_InstanceIpv6AddressPropertyValidator(properties).assertSuccess();
        return {
            Ipv6Address: cdk.stringToCloudFormation(properties.ipv6Address),
        };
    }
    /**
     * Determine whether the given properties match those of a ``PrivateIpAddressSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``PrivateIpAddressSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function NetworkInterfaceResource_PrivateIpAddressSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('primary', cdk.requiredValidator)(properties.primary));
        errors.collect(cdk.propertyValidator('primary', cdk.validateBoolean)(properties.primary));
        errors.collect(cdk.propertyValidator('privateIpAddress', cdk.requiredValidator)(properties.privateIpAddress));
        errors.collect(cdk.propertyValidator('privateIpAddress', cdk.validateString)(properties.privateIpAddress));
        return errors.wrap('supplied properties not correct for "PrivateIpAddressSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::NetworkInterface.PrivateIpAddressSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``PrivateIpAddressSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::NetworkInterface.PrivateIpAddressSpecification`` resource.
     */
    function networkInterfaceResourcePrivateIpAddressSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        NetworkInterfaceResource_PrivateIpAddressSpecificationPropertyValidator(properties).assertSuccess();
        return {
            Primary: cdk.booleanToCloudFormation(properties.primary),
            PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),
        };
    }
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
class NetworkInterfaceSecondaryPrivateIpAddresses extends cdk.Token {
    constructor() {
        super(...arguments);
        // @ts-ignore: private but unused on purpose.
        this.thisIsANetworkInterfaceSecondaryPrivateIpAddresses = true;
    }
}
exports.NetworkInterfaceSecondaryPrivateIpAddresses = NetworkInterfaceSecondaryPrivateIpAddresses;
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``NetworkInterfaceAttachmentResourceProps``
     *
     * @param properties the TypeScript properties of a ``NetworkInterfaceAttachmentResourceProps``
     *
     * @returns the result of the validation.
     */
    function NetworkInterfaceAttachmentResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('deleteOnTermination', cdk.validateBoolean)(properties.deleteOnTermination));
        errors.collect(cdk.propertyValidator('deviceIndex', cdk.requiredValidator)(properties.deviceIndex));
        errors.collect(cdk.propertyValidator('deviceIndex', cdk.validateString)(properties.deviceIndex));
        errors.collect(cdk.propertyValidator('instanceId', cdk.requiredValidator)(properties.instanceId));
        errors.collect(cdk.propertyValidator('instanceId', cdk.validateString)(properties.instanceId));
        errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.requiredValidator)(properties.networkInterfaceId));
        errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));
        return errors.wrap('supplied properties not correct for "NetworkInterfaceAttachmentResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::NetworkInterfaceAttachment`` resource
     *
     * @param properties the TypeScript properties of a ``NetworkInterfaceAttachmentResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::NetworkInterfaceAttachment`` resource.
     */
    function networkInterfaceAttachmentResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        NetworkInterfaceAttachmentResourcePropsValidator(properties).assertSuccess();
        return {
            DeviceIndex: cdk.stringToCloudFormation(properties.deviceIndex),
            InstanceId: cdk.stringToCloudFormation(properties.instanceId),
            NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),
            DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-network-interface-attachment.html
     */
    class NetworkInterfaceAttachmentResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::NetworkInterfaceAttachment``.
         *
         * @param parent   the ``cdk.Construct`` this ``NetworkInterfaceAttachmentResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``NetworkInterfaceAttachmentResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: NetworkInterfaceAttachmentResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'deviceIndex', this);
            cdk.requireProperty(properties, 'instanceId', this);
            cdk.requireProperty(properties, 'networkInterfaceId', this);
            this.networkInterfaceAttachmentName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return networkInterfaceAttachmentResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    NetworkInterfaceAttachmentResource.resourceTypeName = "AWS::EC2::NetworkInterfaceAttachment";
    cloudformation.NetworkInterfaceAttachmentResource = NetworkInterfaceAttachmentResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``NetworkInterfacePermissionResourceProps``
     *
     * @param properties the TypeScript properties of a ``NetworkInterfacePermissionResourceProps``
     *
     * @returns the result of the validation.
     */
    function NetworkInterfacePermissionResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('awsAccountId', cdk.requiredValidator)(properties.awsAccountId));
        errors.collect(cdk.propertyValidator('awsAccountId', cdk.validateString)(properties.awsAccountId));
        errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.requiredValidator)(properties.networkInterfaceId));
        errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));
        errors.collect(cdk.propertyValidator('permission', cdk.requiredValidator)(properties.permission));
        errors.collect(cdk.propertyValidator('permission', cdk.validateString)(properties.permission));
        return errors.wrap('supplied properties not correct for "NetworkInterfacePermissionResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::NetworkInterfacePermission`` resource
     *
     * @param properties the TypeScript properties of a ``NetworkInterfacePermissionResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::NetworkInterfacePermission`` resource.
     */
    function networkInterfacePermissionResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        NetworkInterfacePermissionResourcePropsValidator(properties).assertSuccess();
        return {
            AwsAccountId: cdk.stringToCloudFormation(properties.awsAccountId),
            NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),
            Permission: cdk.stringToCloudFormation(properties.permission),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterfacepermission.html
     */
    class NetworkInterfacePermissionResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::NetworkInterfacePermission``.
         *
         * @param parent   the ``cdk.Construct`` this ``NetworkInterfacePermissionResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``NetworkInterfacePermissionResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: NetworkInterfacePermissionResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'awsAccountId', this);
            cdk.requireProperty(properties, 'networkInterfaceId', this);
            cdk.requireProperty(properties, 'permission', this);
            this.networkInterfacePermissionId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return networkInterfacePermissionResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    NetworkInterfacePermissionResource.resourceTypeName = "AWS::EC2::NetworkInterfacePermission";
    cloudformation.NetworkInterfacePermissionResource = NetworkInterfacePermissionResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``PlacementGroupResourceProps``
     *
     * @param properties the TypeScript properties of a ``PlacementGroupResourceProps``
     *
     * @returns the result of the validation.
     */
    function PlacementGroupResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('strategy', cdk.validateString)(properties.strategy));
        return errors.wrap('supplied properties not correct for "PlacementGroupResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::PlacementGroup`` resource
     *
     * @param properties the TypeScript properties of a ``PlacementGroupResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::PlacementGroup`` resource.
     */
    function placementGroupResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        PlacementGroupResourcePropsValidator(properties).assertSuccess();
        return {
            Strategy: cdk.stringToCloudFormation(properties.strategy),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-placementgroup.html
     */
    class PlacementGroupResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::PlacementGroup``.
         *
         * @param parent   the ``cdk.Construct`` this ``PlacementGroupResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``PlacementGroupResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: PlacementGroupResource.resourceTypeName, properties });
            this.placementGroupName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return placementGroupResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    PlacementGroupResource.resourceTypeName = "AWS::EC2::PlacementGroup";
    cloudformation.PlacementGroupResource = PlacementGroupResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``RouteResourceProps``
     *
     * @param properties the TypeScript properties of a ``RouteResourceProps``
     *
     * @returns the result of the validation.
     */
    function RouteResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('destinationCidrBlock', cdk.validateString)(properties.destinationCidrBlock));
        errors.collect(cdk.propertyValidator('destinationIpv6CidrBlock', cdk.validateString)(properties.destinationIpv6CidrBlock));
        errors.collect(cdk.propertyValidator('egressOnlyInternetGatewayId', cdk.validateString)(properties.egressOnlyInternetGatewayId));
        errors.collect(cdk.propertyValidator('gatewayId', cdk.validateString)(properties.gatewayId));
        errors.collect(cdk.propertyValidator('instanceId', cdk.validateString)(properties.instanceId));
        errors.collect(cdk.propertyValidator('natGatewayId', cdk.validateString)(properties.natGatewayId));
        errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));
        errors.collect(cdk.propertyValidator('routeTableId', cdk.requiredValidator)(properties.routeTableId));
        errors.collect(cdk.propertyValidator('routeTableId', cdk.validateString)(properties.routeTableId));
        errors.collect(cdk.propertyValidator('vpcPeeringConnectionId', cdk.validateString)(properties.vpcPeeringConnectionId));
        return errors.wrap('supplied properties not correct for "RouteResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Route`` resource
     *
     * @param properties the TypeScript properties of a ``RouteResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Route`` resource.
     */
    function routeResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        RouteResourcePropsValidator(properties).assertSuccess();
        return {
            RouteTableId: cdk.stringToCloudFormation(properties.routeTableId),
            DestinationCidrBlock: cdk.stringToCloudFormation(properties.destinationCidrBlock),
            DestinationIpv6CidrBlock: cdk.stringToCloudFormation(properties.destinationIpv6CidrBlock),
            EgressOnlyInternetGatewayId: cdk.stringToCloudFormation(properties.egressOnlyInternetGatewayId),
            GatewayId: cdk.stringToCloudFormation(properties.gatewayId),
            InstanceId: cdk.stringToCloudFormation(properties.instanceId),
            NatGatewayId: cdk.stringToCloudFormation(properties.natGatewayId),
            NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),
            VpcPeeringConnectionId: cdk.stringToCloudFormation(properties.vpcPeeringConnectionId),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
     */
    class RouteResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::Route``.
         *
         * @param parent   the ``cdk.Construct`` this ``RouteResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``RouteResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: RouteResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'routeTableId', this);
            this.routeName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return routeResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    RouteResource.resourceTypeName = "AWS::EC2::Route";
    cloudformation.RouteResource = RouteResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``RouteTableResourceProps``
     *
     * @param properties the TypeScript properties of a ``RouteTableResourceProps``
     *
     * @returns the result of the validation.
     */
    function RouteTableResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));
        errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));
        return errors.wrap('supplied properties not correct for "RouteTableResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::RouteTable`` resource
     *
     * @param properties the TypeScript properties of a ``RouteTableResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::RouteTable`` resource.
     */
    function routeTableResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        RouteTableResourcePropsValidator(properties).assertSuccess();
        return {
            VpcId: cdk.stringToCloudFormation(properties.vpcId),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
     */
    class RouteTableResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::RouteTable``.
         *
         * @param parent   the ``cdk.Construct`` this ``RouteTableResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``RouteTableResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: RouteTableResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'vpcId', this);
            this.routeTableId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return routeTableResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    RouteTableResource.resourceTypeName = "AWS::EC2::RouteTable";
    cloudformation.RouteTableResource = RouteTableResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``SecurityGroupResourceProps``
     *
     * @param properties the TypeScript properties of a ``SecurityGroupResourceProps``
     *
     * @returns the result of the validation.
     */
    function SecurityGroupResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('groupDescription', cdk.requiredValidator)(properties.groupDescription));
        errors.collect(cdk.propertyValidator('groupDescription', cdk.validateString)(properties.groupDescription));
        errors.collect(cdk.propertyValidator('groupName', cdk.validateString)(properties.groupName));
        errors.collect(cdk.propertyValidator('securityGroupEgress', cdk.listValidator(SecurityGroupResource_EgressPropertyValidator))(properties.securityGroupEgress));
        errors.collect(cdk.propertyValidator('securityGroupIngress', cdk.listValidator(SecurityGroupResource_IngressPropertyValidator))(properties.securityGroupIngress));
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));
        return errors.wrap('supplied properties not correct for "SecurityGroupResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SecurityGroup`` resource
     *
     * @param properties the TypeScript properties of a ``SecurityGroupResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SecurityGroup`` resource.
     */
    function securityGroupResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SecurityGroupResourcePropsValidator(properties).assertSuccess();
        return {
            GroupDescription: cdk.stringToCloudFormation(properties.groupDescription),
            GroupName: cdk.stringToCloudFormation(properties.groupName),
            SecurityGroupEgress: cdk.listMapper(securityGroupResourceEgressPropertyToCloudFormation)(properties.securityGroupEgress),
            SecurityGroupIngress: cdk.listMapper(securityGroupResourceIngressPropertyToCloudFormation)(properties.securityGroupIngress),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
            VpcId: cdk.stringToCloudFormation(properties.vpcId),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
     */
    class SecurityGroupResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::SecurityGroup``.
         *
         * @param parent   the ``cdk.Construct`` this ``SecurityGroupResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``SecurityGroupResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: SecurityGroupResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'groupDescription', this);
            this.securityGroupId = this.getAtt('GroupId').toString();
            this.securityGroupVpcId = this.getAtt('VpcId').toString();
            this.securityGroupName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return securityGroupResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    SecurityGroupResource.resourceTypeName = "AWS::EC2::SecurityGroup";
    cloudformation.SecurityGroupResource = SecurityGroupResource;
    /**
     * Determine whether the given properties match those of a ``EgressProperty``
     *
     * @param properties the TypeScript properties of a ``EgressProperty``
     *
     * @returns the result of the validation.
     */
    function SecurityGroupResource_EgressPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('cidrIp', cdk.validateString)(properties.cidrIp));
        errors.collect(cdk.propertyValidator('cidrIpv6', cdk.validateString)(properties.cidrIpv6));
        errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));
        errors.collect(cdk.propertyValidator('destinationPrefixListId', cdk.validateString)(properties.destinationPrefixListId));
        errors.collect(cdk.propertyValidator('destinationSecurityGroupId', cdk.validateString)(properties.destinationSecurityGroupId));
        errors.collect(cdk.propertyValidator('fromPort', cdk.validateNumber)(properties.fromPort));
        errors.collect(cdk.propertyValidator('ipProtocol', cdk.requiredValidator)(properties.ipProtocol));
        errors.collect(cdk.propertyValidator('ipProtocol', cdk.validateString)(properties.ipProtocol));
        errors.collect(cdk.propertyValidator('toPort', cdk.validateNumber)(properties.toPort));
        return errors.wrap('supplied properties not correct for "EgressProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SecurityGroup.Egress`` resource
     *
     * @param properties the TypeScript properties of a ``EgressProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SecurityGroup.Egress`` resource.
     */
    function securityGroupResourceEgressPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SecurityGroupResource_EgressPropertyValidator(properties).assertSuccess();
        return {
            CidrIp: cdk.stringToCloudFormation(properties.cidrIp),
            CidrIpv6: cdk.stringToCloudFormation(properties.cidrIpv6),
            Description: cdk.stringToCloudFormation(properties.description),
            DestinationPrefixListId: cdk.stringToCloudFormation(properties.destinationPrefixListId),
            DestinationSecurityGroupId: cdk.stringToCloudFormation(properties.destinationSecurityGroupId),
            FromPort: cdk.numberToCloudFormation(properties.fromPort),
            IpProtocol: cdk.stringToCloudFormation(properties.ipProtocol),
            ToPort: cdk.numberToCloudFormation(properties.toPort),
        };
    }
    /**
     * Determine whether the given properties match those of a ``IngressProperty``
     *
     * @param properties the TypeScript properties of a ``IngressProperty``
     *
     * @returns the result of the validation.
     */
    function SecurityGroupResource_IngressPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('cidrIp', cdk.validateString)(properties.cidrIp));
        errors.collect(cdk.propertyValidator('cidrIpv6', cdk.validateString)(properties.cidrIpv6));
        errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));
        errors.collect(cdk.propertyValidator('fromPort', cdk.validateNumber)(properties.fromPort));
        errors.collect(cdk.propertyValidator('ipProtocol', cdk.requiredValidator)(properties.ipProtocol));
        errors.collect(cdk.propertyValidator('ipProtocol', cdk.validateString)(properties.ipProtocol));
        errors.collect(cdk.propertyValidator('sourcePrefixListId', cdk.validateString)(properties.sourcePrefixListId));
        errors.collect(cdk.propertyValidator('sourceSecurityGroupId', cdk.validateString)(properties.sourceSecurityGroupId));
        errors.collect(cdk.propertyValidator('sourceSecurityGroupName', cdk.validateString)(properties.sourceSecurityGroupName));
        errors.collect(cdk.propertyValidator('sourceSecurityGroupOwnerId', cdk.validateString)(properties.sourceSecurityGroupOwnerId));
        errors.collect(cdk.propertyValidator('toPort', cdk.validateNumber)(properties.toPort));
        return errors.wrap('supplied properties not correct for "IngressProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SecurityGroup.Ingress`` resource
     *
     * @param properties the TypeScript properties of a ``IngressProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SecurityGroup.Ingress`` resource.
     */
    function securityGroupResourceIngressPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SecurityGroupResource_IngressPropertyValidator(properties).assertSuccess();
        return {
            CidrIp: cdk.stringToCloudFormation(properties.cidrIp),
            CidrIpv6: cdk.stringToCloudFormation(properties.cidrIpv6),
            Description: cdk.stringToCloudFormation(properties.description),
            FromPort: cdk.numberToCloudFormation(properties.fromPort),
            IpProtocol: cdk.stringToCloudFormation(properties.ipProtocol),
            SourcePrefixListId: cdk.stringToCloudFormation(properties.sourcePrefixListId),
            SourceSecurityGroupId: cdk.stringToCloudFormation(properties.sourceSecurityGroupId),
            SourceSecurityGroupName: cdk.stringToCloudFormation(properties.sourceSecurityGroupName),
            SourceSecurityGroupOwnerId: cdk.stringToCloudFormation(properties.sourceSecurityGroupOwnerId),
            ToPort: cdk.numberToCloudFormation(properties.toPort),
        };
    }
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``SecurityGroupEgressResourceProps``
     *
     * @param properties the TypeScript properties of a ``SecurityGroupEgressResourceProps``
     *
     * @returns the result of the validation.
     */
    function SecurityGroupEgressResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('cidrIp', cdk.validateString)(properties.cidrIp));
        errors.collect(cdk.propertyValidator('cidrIpv6', cdk.validateString)(properties.cidrIpv6));
        errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));
        errors.collect(cdk.propertyValidator('destinationPrefixListId', cdk.validateString)(properties.destinationPrefixListId));
        errors.collect(cdk.propertyValidator('destinationSecurityGroupId', cdk.validateString)(properties.destinationSecurityGroupId));
        errors.collect(cdk.propertyValidator('fromPort', cdk.validateNumber)(properties.fromPort));
        errors.collect(cdk.propertyValidator('groupId', cdk.requiredValidator)(properties.groupId));
        errors.collect(cdk.propertyValidator('groupId', cdk.validateString)(properties.groupId));
        errors.collect(cdk.propertyValidator('ipProtocol', cdk.requiredValidator)(properties.ipProtocol));
        errors.collect(cdk.propertyValidator('ipProtocol', cdk.validateString)(properties.ipProtocol));
        errors.collect(cdk.propertyValidator('toPort', cdk.validateNumber)(properties.toPort));
        return errors.wrap('supplied properties not correct for "SecurityGroupEgressResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SecurityGroupEgress`` resource
     *
     * @param properties the TypeScript properties of a ``SecurityGroupEgressResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SecurityGroupEgress`` resource.
     */
    function securityGroupEgressResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SecurityGroupEgressResourcePropsValidator(properties).assertSuccess();
        return {
            GroupId: cdk.stringToCloudFormation(properties.groupId),
            IpProtocol: cdk.stringToCloudFormation(properties.ipProtocol),
            CidrIp: cdk.stringToCloudFormation(properties.cidrIp),
            CidrIpv6: cdk.stringToCloudFormation(properties.cidrIpv6),
            Description: cdk.stringToCloudFormation(properties.description),
            DestinationPrefixListId: cdk.stringToCloudFormation(properties.destinationPrefixListId),
            DestinationSecurityGroupId: cdk.stringToCloudFormation(properties.destinationSecurityGroupId),
            FromPort: cdk.numberToCloudFormation(properties.fromPort),
            ToPort: cdk.numberToCloudFormation(properties.toPort),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-security-group-egress.html
     */
    class SecurityGroupEgressResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::SecurityGroupEgress``.
         *
         * @param parent   the ``cdk.Construct`` this ``SecurityGroupEgressResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``SecurityGroupEgressResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: SecurityGroupEgressResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'groupId', this);
            cdk.requireProperty(properties, 'ipProtocol', this);
            this.securityGroupEgressId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return securityGroupEgressResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    SecurityGroupEgressResource.resourceTypeName = "AWS::EC2::SecurityGroupEgress";
    cloudformation.SecurityGroupEgressResource = SecurityGroupEgressResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``SecurityGroupIngressResourceProps``
     *
     * @param properties the TypeScript properties of a ``SecurityGroupIngressResourceProps``
     *
     * @returns the result of the validation.
     */
    function SecurityGroupIngressResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('cidrIp', cdk.validateString)(properties.cidrIp));
        errors.collect(cdk.propertyValidator('cidrIpv6', cdk.validateString)(properties.cidrIpv6));
        errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));
        errors.collect(cdk.propertyValidator('fromPort', cdk.validateNumber)(properties.fromPort));
        errors.collect(cdk.propertyValidator('groupId', cdk.validateString)(properties.groupId));
        errors.collect(cdk.propertyValidator('groupName', cdk.validateString)(properties.groupName));
        errors.collect(cdk.propertyValidator('ipProtocol', cdk.requiredValidator)(properties.ipProtocol));
        errors.collect(cdk.propertyValidator('ipProtocol', cdk.validateString)(properties.ipProtocol));
        errors.collect(cdk.propertyValidator('sourcePrefixListId', cdk.validateString)(properties.sourcePrefixListId));
        errors.collect(cdk.propertyValidator('sourceSecurityGroupId', cdk.validateString)(properties.sourceSecurityGroupId));
        errors.collect(cdk.propertyValidator('sourceSecurityGroupName', cdk.validateString)(properties.sourceSecurityGroupName));
        errors.collect(cdk.propertyValidator('sourceSecurityGroupOwnerId', cdk.validateString)(properties.sourceSecurityGroupOwnerId));
        errors.collect(cdk.propertyValidator('toPort', cdk.validateNumber)(properties.toPort));
        return errors.wrap('supplied properties not correct for "SecurityGroupIngressResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SecurityGroupIngress`` resource
     *
     * @param properties the TypeScript properties of a ``SecurityGroupIngressResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SecurityGroupIngress`` resource.
     */
    function securityGroupIngressResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SecurityGroupIngressResourcePropsValidator(properties).assertSuccess();
        return {
            IpProtocol: cdk.stringToCloudFormation(properties.ipProtocol),
            CidrIp: cdk.stringToCloudFormation(properties.cidrIp),
            CidrIpv6: cdk.stringToCloudFormation(properties.cidrIpv6),
            Description: cdk.stringToCloudFormation(properties.description),
            FromPort: cdk.numberToCloudFormation(properties.fromPort),
            GroupId: cdk.stringToCloudFormation(properties.groupId),
            GroupName: cdk.stringToCloudFormation(properties.groupName),
            SourcePrefixListId: cdk.stringToCloudFormation(properties.sourcePrefixListId),
            SourceSecurityGroupId: cdk.stringToCloudFormation(properties.sourceSecurityGroupId),
            SourceSecurityGroupName: cdk.stringToCloudFormation(properties.sourceSecurityGroupName),
            SourceSecurityGroupOwnerId: cdk.stringToCloudFormation(properties.sourceSecurityGroupOwnerId),
            ToPort: cdk.numberToCloudFormation(properties.toPort),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group-ingress.html
     */
    class SecurityGroupIngressResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::SecurityGroupIngress``.
         *
         * @param parent   the ``cdk.Construct`` this ``SecurityGroupIngressResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``SecurityGroupIngressResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: SecurityGroupIngressResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'ipProtocol', this);
            this.securityGroupIngressId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return securityGroupIngressResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    SecurityGroupIngressResource.resourceTypeName = "AWS::EC2::SecurityGroupIngress";
    cloudformation.SecurityGroupIngressResource = SecurityGroupIngressResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``SpotFleetResourceProps``
     *
     * @param properties the TypeScript properties of a ``SpotFleetResourceProps``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('spotFleetRequestConfigData', cdk.requiredValidator)(properties.spotFleetRequestConfigData));
        errors.collect(cdk.propertyValidator('spotFleetRequestConfigData', SpotFleetResource_SpotFleetRequestConfigDataPropertyValidator)(properties.spotFleetRequestConfigData));
        return errors.wrap('supplied properties not correct for "SpotFleetResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet`` resource
     *
     * @param properties the TypeScript properties of a ``SpotFleetResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet`` resource.
     */
    function spotFleetResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResourcePropsValidator(properties).assertSuccess();
        return {
            SpotFleetRequestConfigData: spotFleetResourceSpotFleetRequestConfigDataPropertyToCloudFormation(properties.spotFleetRequestConfigData),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-spotfleet.html
     */
    class SpotFleetResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::SpotFleet``.
         *
         * @param parent   the ``cdk.Construct`` this ``SpotFleetResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``SpotFleetResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: SpotFleetResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'spotFleetRequestConfigData', this);
            this.spotFleetName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return spotFleetResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    SpotFleetResource.resourceTypeName = "AWS::EC2::SpotFleet";
    cloudformation.SpotFleetResource = SpotFleetResource;
    /**
     * Determine whether the given properties match those of a ``BlockDeviceMappingProperty``
     *
     * @param properties the TypeScript properties of a ``BlockDeviceMappingProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_BlockDeviceMappingPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('deviceName', cdk.requiredValidator)(properties.deviceName));
        errors.collect(cdk.propertyValidator('deviceName', cdk.validateString)(properties.deviceName));
        errors.collect(cdk.propertyValidator('ebs', SpotFleetResource_EbsBlockDevicePropertyValidator)(properties.ebs));
        errors.collect(cdk.propertyValidator('noDevice', cdk.validateString)(properties.noDevice));
        errors.collect(cdk.propertyValidator('virtualName', cdk.validateString)(properties.virtualName));
        return errors.wrap('supplied properties not correct for "BlockDeviceMappingProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.BlockDeviceMapping`` resource
     *
     * @param properties the TypeScript properties of a ``BlockDeviceMappingProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.BlockDeviceMapping`` resource.
     */
    function spotFleetResourceBlockDeviceMappingPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_BlockDeviceMappingPropertyValidator(properties).assertSuccess();
        return {
            DeviceName: cdk.stringToCloudFormation(properties.deviceName),
            Ebs: spotFleetResourceEbsBlockDevicePropertyToCloudFormation(properties.ebs),
            NoDevice: cdk.stringToCloudFormation(properties.noDevice),
            VirtualName: cdk.stringToCloudFormation(properties.virtualName),
        };
    }
    /**
     * Determine whether the given properties match those of a ``ClassicLoadBalancerProperty``
     *
     * @param properties the TypeScript properties of a ``ClassicLoadBalancerProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_ClassicLoadBalancerPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));
        errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
        return errors.wrap('supplied properties not correct for "ClassicLoadBalancerProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.ClassicLoadBalancer`` resource
     *
     * @param properties the TypeScript properties of a ``ClassicLoadBalancerProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.ClassicLoadBalancer`` resource.
     */
    function spotFleetResourceClassicLoadBalancerPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_ClassicLoadBalancerPropertyValidator(properties).assertSuccess();
        return {
            Name: cdk.stringToCloudFormation(properties.name),
        };
    }
    /**
     * Determine whether the given properties match those of a ``ClassicLoadBalancersConfigProperty``
     *
     * @param properties the TypeScript properties of a ``ClassicLoadBalancersConfigProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_ClassicLoadBalancersConfigPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('classicLoadBalancers', cdk.requiredValidator)(properties.classicLoadBalancers));
        errors.collect(cdk.propertyValidator('classicLoadBalancers', cdk.listValidator(SpotFleetResource_ClassicLoadBalancerPropertyValidator))(properties.classicLoadBalancers));
        return errors.wrap('supplied properties not correct for "ClassicLoadBalancersConfigProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.ClassicLoadBalancersConfig`` resource
     *
     * @param properties the TypeScript properties of a ``ClassicLoadBalancersConfigProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.ClassicLoadBalancersConfig`` resource.
     */
    function spotFleetResourceClassicLoadBalancersConfigPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_ClassicLoadBalancersConfigPropertyValidator(properties).assertSuccess();
        return {
            ClassicLoadBalancers: cdk.listMapper(spotFleetResourceClassicLoadBalancerPropertyToCloudFormation)(properties.classicLoadBalancers),
        };
    }
    /**
     * Determine whether the given properties match those of a ``EbsBlockDeviceProperty``
     *
     * @param properties the TypeScript properties of a ``EbsBlockDeviceProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_EbsBlockDevicePropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('deleteOnTermination', cdk.validateBoolean)(properties.deleteOnTermination));
        errors.collect(cdk.propertyValidator('encrypted', cdk.validateBoolean)(properties.encrypted));
        errors.collect(cdk.propertyValidator('iops', cdk.validateNumber)(properties.iops));
        errors.collect(cdk.propertyValidator('snapshotId', cdk.validateString)(properties.snapshotId));
        errors.collect(cdk.propertyValidator('volumeSize', cdk.validateNumber)(properties.volumeSize));
        errors.collect(cdk.propertyValidator('volumeType', cdk.validateString)(properties.volumeType));
        return errors.wrap('supplied properties not correct for "EbsBlockDeviceProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.EbsBlockDevice`` resource
     *
     * @param properties the TypeScript properties of a ``EbsBlockDeviceProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.EbsBlockDevice`` resource.
     */
    function spotFleetResourceEbsBlockDevicePropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_EbsBlockDevicePropertyValidator(properties).assertSuccess();
        return {
            DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),
            Encrypted: cdk.booleanToCloudFormation(properties.encrypted),
            Iops: cdk.numberToCloudFormation(properties.iops),
            SnapshotId: cdk.stringToCloudFormation(properties.snapshotId),
            VolumeSize: cdk.numberToCloudFormation(properties.volumeSize),
            VolumeType: cdk.stringToCloudFormation(properties.volumeType),
        };
    }
    /**
     * Determine whether the given properties match those of a ``FleetLaunchTemplateSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``FleetLaunchTemplateSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_FleetLaunchTemplateSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('launchTemplateId', cdk.validateString)(properties.launchTemplateId));
        errors.collect(cdk.propertyValidator('launchTemplateName', cdk.validateString)(properties.launchTemplateName));
        errors.collect(cdk.propertyValidator('version', cdk.requiredValidator)(properties.version));
        errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));
        return errors.wrap('supplied properties not correct for "FleetLaunchTemplateSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.FleetLaunchTemplateSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``FleetLaunchTemplateSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.FleetLaunchTemplateSpecification`` resource.
     */
    function spotFleetResourceFleetLaunchTemplateSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_FleetLaunchTemplateSpecificationPropertyValidator(properties).assertSuccess();
        return {
            LaunchTemplateId: cdk.stringToCloudFormation(properties.launchTemplateId),
            LaunchTemplateName: cdk.stringToCloudFormation(properties.launchTemplateName),
            Version: cdk.stringToCloudFormation(properties.version),
        };
    }
    /**
     * Determine whether the given properties match those of a ``GroupIdentifierProperty``
     *
     * @param properties the TypeScript properties of a ``GroupIdentifierProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_GroupIdentifierPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('groupId', cdk.requiredValidator)(properties.groupId));
        errors.collect(cdk.propertyValidator('groupId', cdk.validateString)(properties.groupId));
        return errors.wrap('supplied properties not correct for "GroupIdentifierProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.GroupIdentifier`` resource
     *
     * @param properties the TypeScript properties of a ``GroupIdentifierProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.GroupIdentifier`` resource.
     */
    function spotFleetResourceGroupIdentifierPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_GroupIdentifierPropertyValidator(properties).assertSuccess();
        return {
            GroupId: cdk.stringToCloudFormation(properties.groupId),
        };
    }
    /**
     * Determine whether the given properties match those of a ``IamInstanceProfileSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``IamInstanceProfileSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_IamInstanceProfileSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));
        return errors.wrap('supplied properties not correct for "IamInstanceProfileSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.IamInstanceProfileSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``IamInstanceProfileSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.IamInstanceProfileSpecification`` resource.
     */
    function spotFleetResourceIamInstanceProfileSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_IamInstanceProfileSpecificationPropertyValidator(properties).assertSuccess();
        return {
            Arn: cdk.stringToCloudFormation(properties.arn),
        };
    }
    /**
     * Determine whether the given properties match those of a ``InstanceIpv6AddressProperty``
     *
     * @param properties the TypeScript properties of a ``InstanceIpv6AddressProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_InstanceIpv6AddressPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('ipv6Address', cdk.requiredValidator)(properties.ipv6Address));
        errors.collect(cdk.propertyValidator('ipv6Address', cdk.validateString)(properties.ipv6Address));
        return errors.wrap('supplied properties not correct for "InstanceIpv6AddressProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.InstanceIpv6Address`` resource
     *
     * @param properties the TypeScript properties of a ``InstanceIpv6AddressProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.InstanceIpv6Address`` resource.
     */
    function spotFleetResourceInstanceIpv6AddressPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_InstanceIpv6AddressPropertyValidator(properties).assertSuccess();
        return {
            Ipv6Address: cdk.stringToCloudFormation(properties.ipv6Address),
        };
    }
    /**
     * Determine whether the given properties match those of a ``InstanceNetworkInterfaceSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``InstanceNetworkInterfaceSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_InstanceNetworkInterfaceSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('associatePublicIpAddress', cdk.validateBoolean)(properties.associatePublicIpAddress));
        errors.collect(cdk.propertyValidator('deleteOnTermination', cdk.validateBoolean)(properties.deleteOnTermination));
        errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));
        errors.collect(cdk.propertyValidator('deviceIndex', cdk.validateNumber)(properties.deviceIndex));
        errors.collect(cdk.propertyValidator('groups', cdk.listValidator(cdk.validateString))(properties.groups));
        errors.collect(cdk.propertyValidator('ipv6AddressCount', cdk.validateNumber)(properties.ipv6AddressCount));
        errors.collect(cdk.propertyValidator('ipv6Addresses', cdk.listValidator(SpotFleetResource_InstanceIpv6AddressPropertyValidator))(properties.ipv6Addresses));
        errors.collect(cdk.propertyValidator('networkInterfaceId', cdk.validateString)(properties.networkInterfaceId));
        errors.collect(cdk.propertyValidator('privateIpAddresses', cdk.listValidator(SpotFleetResource_PrivateIpAddressSpecificationPropertyValidator))(properties.privateIpAddresses));
        errors.collect(cdk.propertyValidator('secondaryPrivateIpAddressCount', cdk.validateNumber)(properties.secondaryPrivateIpAddressCount));
        errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));
        return errors.wrap('supplied properties not correct for "InstanceNetworkInterfaceSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.InstanceNetworkInterfaceSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``InstanceNetworkInterfaceSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.InstanceNetworkInterfaceSpecification`` resource.
     */
    function spotFleetResourceInstanceNetworkInterfaceSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_InstanceNetworkInterfaceSpecificationPropertyValidator(properties).assertSuccess();
        return {
            AssociatePublicIpAddress: cdk.booleanToCloudFormation(properties.associatePublicIpAddress),
            DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),
            Description: cdk.stringToCloudFormation(properties.description),
            DeviceIndex: cdk.numberToCloudFormation(properties.deviceIndex),
            Groups: cdk.listMapper(cdk.stringToCloudFormation)(properties.groups),
            Ipv6AddressCount: cdk.numberToCloudFormation(properties.ipv6AddressCount),
            Ipv6Addresses: cdk.listMapper(spotFleetResourceInstanceIpv6AddressPropertyToCloudFormation)(properties.ipv6Addresses),
            NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),
            PrivateIpAddresses: cdk.listMapper(spotFleetResourcePrivateIpAddressSpecificationPropertyToCloudFormation)(properties.privateIpAddresses),
            SecondaryPrivateIpAddressCount: cdk.numberToCloudFormation(properties.secondaryPrivateIpAddressCount),
            SubnetId: cdk.stringToCloudFormation(properties.subnetId),
        };
    }
    /**
     * Determine whether the given properties match those of a ``LaunchTemplateConfigProperty``
     *
     * @param properties the TypeScript properties of a ``LaunchTemplateConfigProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_LaunchTemplateConfigPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('launchTemplateSpecification', SpotFleetResource_FleetLaunchTemplateSpecificationPropertyValidator)(properties.launchTemplateSpecification));
        errors.collect(cdk.propertyValidator('overrides', cdk.listValidator(SpotFleetResource_LaunchTemplateOverridesPropertyValidator))(properties.overrides));
        return errors.wrap('supplied properties not correct for "LaunchTemplateConfigProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.LaunchTemplateConfig`` resource
     *
     * @param properties the TypeScript properties of a ``LaunchTemplateConfigProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.LaunchTemplateConfig`` resource.
     */
    function spotFleetResourceLaunchTemplateConfigPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_LaunchTemplateConfigPropertyValidator(properties).assertSuccess();
        return {
            LaunchTemplateSpecification: spotFleetResourceFleetLaunchTemplateSpecificationPropertyToCloudFormation(properties.launchTemplateSpecification),
            Overrides: cdk.listMapper(spotFleetResourceLaunchTemplateOverridesPropertyToCloudFormation)(properties.overrides),
        };
    }
    /**
     * Determine whether the given properties match those of a ``LaunchTemplateOverridesProperty``
     *
     * @param properties the TypeScript properties of a ``LaunchTemplateOverridesProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_LaunchTemplateOverridesPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));
        errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));
        errors.collect(cdk.propertyValidator('spotPrice', cdk.validateString)(properties.spotPrice));
        errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));
        errors.collect(cdk.propertyValidator('weightedCapacity', cdk.validateNumber)(properties.weightedCapacity));
        return errors.wrap('supplied properties not correct for "LaunchTemplateOverridesProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.LaunchTemplateOverrides`` resource
     *
     * @param properties the TypeScript properties of a ``LaunchTemplateOverridesProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.LaunchTemplateOverrides`` resource.
     */
    function spotFleetResourceLaunchTemplateOverridesPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_LaunchTemplateOverridesPropertyValidator(properties).assertSuccess();
        return {
            AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
            InstanceType: cdk.stringToCloudFormation(properties.instanceType),
            SpotPrice: cdk.stringToCloudFormation(properties.spotPrice),
            SubnetId: cdk.stringToCloudFormation(properties.subnetId),
            WeightedCapacity: cdk.numberToCloudFormation(properties.weightedCapacity),
        };
    }
    /**
     * Determine whether the given properties match those of a ``LoadBalancersConfigProperty``
     *
     * @param properties the TypeScript properties of a ``LoadBalancersConfigProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_LoadBalancersConfigPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('classicLoadBalancersConfig', SpotFleetResource_ClassicLoadBalancersConfigPropertyValidator)(properties.classicLoadBalancersConfig));
        errors.collect(cdk.propertyValidator('targetGroupsConfig', SpotFleetResource_TargetGroupsConfigPropertyValidator)(properties.targetGroupsConfig));
        return errors.wrap('supplied properties not correct for "LoadBalancersConfigProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.LoadBalancersConfig`` resource
     *
     * @param properties the TypeScript properties of a ``LoadBalancersConfigProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.LoadBalancersConfig`` resource.
     */
    function spotFleetResourceLoadBalancersConfigPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_LoadBalancersConfigPropertyValidator(properties).assertSuccess();
        return {
            ClassicLoadBalancersConfig: spotFleetResourceClassicLoadBalancersConfigPropertyToCloudFormation(properties.classicLoadBalancersConfig),
            TargetGroupsConfig: spotFleetResourceTargetGroupsConfigPropertyToCloudFormation(properties.targetGroupsConfig),
        };
    }
    /**
     * Determine whether the given properties match those of a ``PrivateIpAddressSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``PrivateIpAddressSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_PrivateIpAddressSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('primary', cdk.validateBoolean)(properties.primary));
        errors.collect(cdk.propertyValidator('privateIpAddress', cdk.requiredValidator)(properties.privateIpAddress));
        errors.collect(cdk.propertyValidator('privateIpAddress', cdk.validateString)(properties.privateIpAddress));
        return errors.wrap('supplied properties not correct for "PrivateIpAddressSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.PrivateIpAddressSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``PrivateIpAddressSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.PrivateIpAddressSpecification`` resource.
     */
    function spotFleetResourcePrivateIpAddressSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_PrivateIpAddressSpecificationPropertyValidator(properties).assertSuccess();
        return {
            Primary: cdk.booleanToCloudFormation(properties.primary),
            PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),
        };
    }
    /**
     * Determine whether the given properties match those of a ``SpotFleetLaunchSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``SpotFleetLaunchSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_SpotFleetLaunchSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('blockDeviceMappings', cdk.listValidator(SpotFleetResource_BlockDeviceMappingPropertyValidator))(properties.blockDeviceMappings));
        errors.collect(cdk.propertyValidator('ebsOptimized', cdk.validateBoolean)(properties.ebsOptimized));
        errors.collect(cdk.propertyValidator('iamInstanceProfile', SpotFleetResource_IamInstanceProfileSpecificationPropertyValidator)(properties.iamInstanceProfile));
        errors.collect(cdk.propertyValidator('imageId', cdk.requiredValidator)(properties.imageId));
        errors.collect(cdk.propertyValidator('imageId', cdk.validateString)(properties.imageId));
        errors.collect(cdk.propertyValidator('instanceType', cdk.requiredValidator)(properties.instanceType));
        errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));
        errors.collect(cdk.propertyValidator('kernelId', cdk.validateString)(properties.kernelId));
        errors.collect(cdk.propertyValidator('keyName', cdk.validateString)(properties.keyName));
        errors.collect(cdk.propertyValidator('monitoring', SpotFleetResource_SpotFleetMonitoringPropertyValidator)(properties.monitoring));
        errors.collect(cdk.propertyValidator('networkInterfaces', cdk.listValidator(SpotFleetResource_InstanceNetworkInterfaceSpecificationPropertyValidator))(properties.networkInterfaces));
        errors.collect(cdk.propertyValidator('placement', SpotFleetResource_SpotPlacementPropertyValidator)(properties.placement));
        errors.collect(cdk.propertyValidator('ramdiskId', cdk.validateString)(properties.ramdiskId));
        errors.collect(cdk.propertyValidator('securityGroups', cdk.listValidator(SpotFleetResource_GroupIdentifierPropertyValidator))(properties.securityGroups));
        errors.collect(cdk.propertyValidator('spotPrice', cdk.validateString)(properties.spotPrice));
        errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));
        errors.collect(cdk.propertyValidator('tagSpecifications', cdk.listValidator(SpotFleetResource_SpotFleetTagSpecificationPropertyValidator))(properties.tagSpecifications));
        errors.collect(cdk.propertyValidator('userData', cdk.validateString)(properties.userData));
        errors.collect(cdk.propertyValidator('weightedCapacity', cdk.validateNumber)(properties.weightedCapacity));
        return errors.wrap('supplied properties not correct for "SpotFleetLaunchSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.SpotFleetLaunchSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``SpotFleetLaunchSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.SpotFleetLaunchSpecification`` resource.
     */
    function spotFleetResourceSpotFleetLaunchSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_SpotFleetLaunchSpecificationPropertyValidator(properties).assertSuccess();
        return {
            BlockDeviceMappings: cdk.listMapper(spotFleetResourceBlockDeviceMappingPropertyToCloudFormation)(properties.blockDeviceMappings),
            EbsOptimized: cdk.booleanToCloudFormation(properties.ebsOptimized),
            IamInstanceProfile: spotFleetResourceIamInstanceProfileSpecificationPropertyToCloudFormation(properties.iamInstanceProfile),
            ImageId: cdk.stringToCloudFormation(properties.imageId),
            InstanceType: cdk.stringToCloudFormation(properties.instanceType),
            KernelId: cdk.stringToCloudFormation(properties.kernelId),
            KeyName: cdk.stringToCloudFormation(properties.keyName),
            Monitoring: spotFleetResourceSpotFleetMonitoringPropertyToCloudFormation(properties.monitoring),
            NetworkInterfaces: cdk.listMapper(spotFleetResourceInstanceNetworkInterfaceSpecificationPropertyToCloudFormation)(properties.networkInterfaces),
            Placement: spotFleetResourceSpotPlacementPropertyToCloudFormation(properties.placement),
            RamdiskId: cdk.stringToCloudFormation(properties.ramdiskId),
            SecurityGroups: cdk.listMapper(spotFleetResourceGroupIdentifierPropertyToCloudFormation)(properties.securityGroups),
            SpotPrice: cdk.stringToCloudFormation(properties.spotPrice),
            SubnetId: cdk.stringToCloudFormation(properties.subnetId),
            TagSpecifications: cdk.listMapper(spotFleetResourceSpotFleetTagSpecificationPropertyToCloudFormation)(properties.tagSpecifications),
            UserData: cdk.stringToCloudFormation(properties.userData),
            WeightedCapacity: cdk.numberToCloudFormation(properties.weightedCapacity),
        };
    }
    /**
     * Determine whether the given properties match those of a ``SpotFleetMonitoringProperty``
     *
     * @param properties the TypeScript properties of a ``SpotFleetMonitoringProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_SpotFleetMonitoringPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));
        return errors.wrap('supplied properties not correct for "SpotFleetMonitoringProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.SpotFleetMonitoring`` resource
     *
     * @param properties the TypeScript properties of a ``SpotFleetMonitoringProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.SpotFleetMonitoring`` resource.
     */
    function spotFleetResourceSpotFleetMonitoringPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_SpotFleetMonitoringPropertyValidator(properties).assertSuccess();
        return {
            Enabled: cdk.booleanToCloudFormation(properties.enabled),
        };
    }
    /**
     * Determine whether the given properties match those of a ``SpotFleetRequestConfigDataProperty``
     *
     * @param properties the TypeScript properties of a ``SpotFleetRequestConfigDataProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_SpotFleetRequestConfigDataPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('allocationStrategy', cdk.validateString)(properties.allocationStrategy));
        errors.collect(cdk.propertyValidator('excessCapacityTerminationPolicy', cdk.validateString)(properties.excessCapacityTerminationPolicy));
        errors.collect(cdk.propertyValidator('iamFleetRole', cdk.requiredValidator)(properties.iamFleetRole));
        errors.collect(cdk.propertyValidator('iamFleetRole', cdk.validateString)(properties.iamFleetRole));
        errors.collect(cdk.propertyValidator('instanceInterruptionBehavior', cdk.validateString)(properties.instanceInterruptionBehavior));
        errors.collect(cdk.propertyValidator('launchSpecifications', cdk.listValidator(SpotFleetResource_SpotFleetLaunchSpecificationPropertyValidator))(properties.launchSpecifications));
        errors.collect(cdk.propertyValidator('launchTemplateConfigs', cdk.listValidator(SpotFleetResource_LaunchTemplateConfigPropertyValidator))(properties.launchTemplateConfigs));
        errors.collect(cdk.propertyValidator('loadBalancersConfig', SpotFleetResource_LoadBalancersConfigPropertyValidator)(properties.loadBalancersConfig));
        errors.collect(cdk.propertyValidator('replaceUnhealthyInstances', cdk.validateBoolean)(properties.replaceUnhealthyInstances));
        errors.collect(cdk.propertyValidator('spotPrice', cdk.validateString)(properties.spotPrice));
        errors.collect(cdk.propertyValidator('targetCapacity', cdk.requiredValidator)(properties.targetCapacity));
        errors.collect(cdk.propertyValidator('targetCapacity', cdk.validateNumber)(properties.targetCapacity));
        errors.collect(cdk.propertyValidator('terminateInstancesWithExpiration', cdk.validateBoolean)(properties.terminateInstancesWithExpiration));
        errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));
        errors.collect(cdk.propertyValidator('validFrom', cdk.validateString)(properties.validFrom));
        errors.collect(cdk.propertyValidator('validUntil', cdk.validateString)(properties.validUntil));
        return errors.wrap('supplied properties not correct for "SpotFleetRequestConfigDataProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.SpotFleetRequestConfigData`` resource
     *
     * @param properties the TypeScript properties of a ``SpotFleetRequestConfigDataProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.SpotFleetRequestConfigData`` resource.
     */
    function spotFleetResourceSpotFleetRequestConfigDataPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_SpotFleetRequestConfigDataPropertyValidator(properties).assertSuccess();
        return {
            AllocationStrategy: cdk.stringToCloudFormation(properties.allocationStrategy),
            ExcessCapacityTerminationPolicy: cdk.stringToCloudFormation(properties.excessCapacityTerminationPolicy),
            IamFleetRole: cdk.stringToCloudFormation(properties.iamFleetRole),
            InstanceInterruptionBehavior: cdk.stringToCloudFormation(properties.instanceInterruptionBehavior),
            LaunchSpecifications: cdk.listMapper(spotFleetResourceSpotFleetLaunchSpecificationPropertyToCloudFormation)(properties.launchSpecifications),
            LaunchTemplateConfigs: cdk.listMapper(spotFleetResourceLaunchTemplateConfigPropertyToCloudFormation)(properties.launchTemplateConfigs),
            LoadBalancersConfig: spotFleetResourceLoadBalancersConfigPropertyToCloudFormation(properties.loadBalancersConfig),
            ReplaceUnhealthyInstances: cdk.booleanToCloudFormation(properties.replaceUnhealthyInstances),
            SpotPrice: cdk.stringToCloudFormation(properties.spotPrice),
            TargetCapacity: cdk.numberToCloudFormation(properties.targetCapacity),
            TerminateInstancesWithExpiration: cdk.booleanToCloudFormation(properties.terminateInstancesWithExpiration),
            Type: cdk.stringToCloudFormation(properties.type),
            ValidFrom: cdk.stringToCloudFormation(properties.validFrom),
            ValidUntil: cdk.stringToCloudFormation(properties.validUntil),
        };
    }
    /**
     * Determine whether the given properties match those of a ``SpotFleetTagSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``SpotFleetTagSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_SpotFleetTagSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('resourceType', cdk.validateString)(properties.resourceType));
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        return errors.wrap('supplied properties not correct for "SpotFleetTagSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.SpotFleetTagSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``SpotFleetTagSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.SpotFleetTagSpecification`` resource.
     */
    function spotFleetResourceSpotFleetTagSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_SpotFleetTagSpecificationPropertyValidator(properties).assertSuccess();
        return {
            ResourceType: cdk.stringToCloudFormation(properties.resourceType),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
        };
    }
    /**
     * Determine whether the given properties match those of a ``SpotPlacementProperty``
     *
     * @param properties the TypeScript properties of a ``SpotPlacementProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_SpotPlacementPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));
        errors.collect(cdk.propertyValidator('groupName', cdk.validateString)(properties.groupName));
        errors.collect(cdk.propertyValidator('tenancy', cdk.validateString)(properties.tenancy));
        return errors.wrap('supplied properties not correct for "SpotPlacementProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.SpotPlacement`` resource
     *
     * @param properties the TypeScript properties of a ``SpotPlacementProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.SpotPlacement`` resource.
     */
    function spotFleetResourceSpotPlacementPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_SpotPlacementPropertyValidator(properties).assertSuccess();
        return {
            AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
            GroupName: cdk.stringToCloudFormation(properties.groupName),
            Tenancy: cdk.stringToCloudFormation(properties.tenancy),
        };
    }
    /**
     * Determine whether the given properties match those of a ``TargetGroupProperty``
     *
     * @param properties the TypeScript properties of a ``TargetGroupProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_TargetGroupPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('arn', cdk.requiredValidator)(properties.arn));
        errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));
        return errors.wrap('supplied properties not correct for "TargetGroupProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.TargetGroup`` resource
     *
     * @param properties the TypeScript properties of a ``TargetGroupProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.TargetGroup`` resource.
     */
    function spotFleetResourceTargetGroupPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_TargetGroupPropertyValidator(properties).assertSuccess();
        return {
            Arn: cdk.stringToCloudFormation(properties.arn),
        };
    }
    /**
     * Determine whether the given properties match those of a ``TargetGroupsConfigProperty``
     *
     * @param properties the TypeScript properties of a ``TargetGroupsConfigProperty``
     *
     * @returns the result of the validation.
     */
    function SpotFleetResource_TargetGroupsConfigPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('targetGroups', cdk.requiredValidator)(properties.targetGroups));
        errors.collect(cdk.propertyValidator('targetGroups', cdk.listValidator(SpotFleetResource_TargetGroupPropertyValidator))(properties.targetGroups));
        return errors.wrap('supplied properties not correct for "TargetGroupsConfigProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.TargetGroupsConfig`` resource
     *
     * @param properties the TypeScript properties of a ``TargetGroupsConfigProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SpotFleet.TargetGroupsConfig`` resource.
     */
    function spotFleetResourceTargetGroupsConfigPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SpotFleetResource_TargetGroupsConfigPropertyValidator(properties).assertSuccess();
        return {
            TargetGroups: cdk.listMapper(spotFleetResourceTargetGroupPropertyToCloudFormation)(properties.targetGroups),
        };
    }
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``SubnetResourceProps``
     *
     * @param properties the TypeScript properties of a ``SubnetResourceProps``
     *
     * @returns the result of the validation.
     */
    function SubnetResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('assignIpv6AddressOnCreation', cdk.validateBoolean)(properties.assignIpv6AddressOnCreation));
        errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));
        errors.collect(cdk.propertyValidator('cidrBlock', cdk.requiredValidator)(properties.cidrBlock));
        errors.collect(cdk.propertyValidator('cidrBlock', cdk.validateString)(properties.cidrBlock));
        errors.collect(cdk.propertyValidator('ipv6CidrBlock', cdk.validateString)(properties.ipv6CidrBlock));
        errors.collect(cdk.propertyValidator('mapPublicIpOnLaunch', cdk.validateBoolean)(properties.mapPublicIpOnLaunch));
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));
        errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));
        return errors.wrap('supplied properties not correct for "SubnetResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Subnet`` resource
     *
     * @param properties the TypeScript properties of a ``SubnetResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Subnet`` resource.
     */
    function subnetResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SubnetResourcePropsValidator(properties).assertSuccess();
        return {
            CidrBlock: cdk.stringToCloudFormation(properties.cidrBlock),
            VpcId: cdk.stringToCloudFormation(properties.vpcId),
            AssignIpv6AddressOnCreation: cdk.booleanToCloudFormation(properties.assignIpv6AddressOnCreation),
            AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
            Ipv6CidrBlock: cdk.stringToCloudFormation(properties.ipv6CidrBlock),
            MapPublicIpOnLaunch: cdk.booleanToCloudFormation(properties.mapPublicIpOnLaunch),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
     */
    class SubnetResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::Subnet``.
         *
         * @param parent   the ``cdk.Construct`` this ``SubnetResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``SubnetResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: SubnetResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'cidrBlock', this);
            cdk.requireProperty(properties, 'vpcId', this);
            this.subnetAvailabilityZone = this.getAtt('AvailabilityZone').toString();
            this.subnetIpv6CidrBlocks = new SubnetIpv6CidrBlocks(this.getAtt('Ipv6CidrBlocks'));
            this.subnetNetworkAclAssociationId = this.getAtt('NetworkAclAssociationId').toString();
            this.subnetVpcId = this.getAtt('VpcId').toString();
            this.subnetId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return subnetResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    SubnetResource.resourceTypeName = "AWS::EC2::Subnet";
    cloudformation.SubnetResource = SubnetResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
class SubnetIpv6CidrBlocks extends cdk.Token {
    constructor() {
        super(...arguments);
        // @ts-ignore: private but unused on purpose.
        this.thisIsASubnetIpv6CidrBlocks = true;
    }
}
exports.SubnetIpv6CidrBlocks = SubnetIpv6CidrBlocks;
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``SubnetCidrBlockResourceProps``
     *
     * @param properties the TypeScript properties of a ``SubnetCidrBlockResourceProps``
     *
     * @returns the result of the validation.
     */
    function SubnetCidrBlockResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('ipv6CidrBlock', cdk.requiredValidator)(properties.ipv6CidrBlock));
        errors.collect(cdk.propertyValidator('ipv6CidrBlock', cdk.validateString)(properties.ipv6CidrBlock));
        errors.collect(cdk.propertyValidator('subnetId', cdk.requiredValidator)(properties.subnetId));
        errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));
        return errors.wrap('supplied properties not correct for "SubnetCidrBlockResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SubnetCidrBlock`` resource
     *
     * @param properties the TypeScript properties of a ``SubnetCidrBlockResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SubnetCidrBlock`` resource.
     */
    function subnetCidrBlockResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SubnetCidrBlockResourcePropsValidator(properties).assertSuccess();
        return {
            Ipv6CidrBlock: cdk.stringToCloudFormation(properties.ipv6CidrBlock),
            SubnetId: cdk.stringToCloudFormation(properties.subnetId),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetcidrblock.html
     */
    class SubnetCidrBlockResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::SubnetCidrBlock``.
         *
         * @param parent   the ``cdk.Construct`` this ``SubnetCidrBlockResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``SubnetCidrBlockResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: SubnetCidrBlockResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'ipv6CidrBlock', this);
            cdk.requireProperty(properties, 'subnetId', this);
            this.subnetCidrBlockId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return subnetCidrBlockResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    SubnetCidrBlockResource.resourceTypeName = "AWS::EC2::SubnetCidrBlock";
    cloudformation.SubnetCidrBlockResource = SubnetCidrBlockResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``SubnetNetworkAclAssociationResourceProps``
     *
     * @param properties the TypeScript properties of a ``SubnetNetworkAclAssociationResourceProps``
     *
     * @returns the result of the validation.
     */
    function SubnetNetworkAclAssociationResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('networkAclId', cdk.requiredValidator)(properties.networkAclId));
        errors.collect(cdk.propertyValidator('networkAclId', cdk.validateString)(properties.networkAclId));
        errors.collect(cdk.propertyValidator('subnetId', cdk.requiredValidator)(properties.subnetId));
        errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));
        return errors.wrap('supplied properties not correct for "SubnetNetworkAclAssociationResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SubnetNetworkAclAssociation`` resource
     *
     * @param properties the TypeScript properties of a ``SubnetNetworkAclAssociationResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SubnetNetworkAclAssociation`` resource.
     */
    function subnetNetworkAclAssociationResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SubnetNetworkAclAssociationResourcePropsValidator(properties).assertSuccess();
        return {
            NetworkAclId: cdk.stringToCloudFormation(properties.networkAclId),
            SubnetId: cdk.stringToCloudFormation(properties.subnetId),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-network-acl-assoc.html
     */
    class SubnetNetworkAclAssociationResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::SubnetNetworkAclAssociation``.
         *
         * @param parent   the ``cdk.Construct`` this ``SubnetNetworkAclAssociationResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``SubnetNetworkAclAssociationResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: SubnetNetworkAclAssociationResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'networkAclId', this);
            cdk.requireProperty(properties, 'subnetId', this);
            this.subnetNetworkAclAssociationAssociationId = this.getAtt('AssociationId').toString();
            this.subnetNetworkAclAssociationName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return subnetNetworkAclAssociationResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    SubnetNetworkAclAssociationResource.resourceTypeName = "AWS::EC2::SubnetNetworkAclAssociation";
    cloudformation.SubnetNetworkAclAssociationResource = SubnetNetworkAclAssociationResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``SubnetRouteTableAssociationResourceProps``
     *
     * @param properties the TypeScript properties of a ``SubnetRouteTableAssociationResourceProps``
     *
     * @returns the result of the validation.
     */
    function SubnetRouteTableAssociationResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('routeTableId', cdk.requiredValidator)(properties.routeTableId));
        errors.collect(cdk.propertyValidator('routeTableId', cdk.validateString)(properties.routeTableId));
        errors.collect(cdk.propertyValidator('subnetId', cdk.requiredValidator)(properties.subnetId));
        errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));
        return errors.wrap('supplied properties not correct for "SubnetRouteTableAssociationResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::SubnetRouteTableAssociation`` resource
     *
     * @param properties the TypeScript properties of a ``SubnetRouteTableAssociationResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::SubnetRouteTableAssociation`` resource.
     */
    function subnetRouteTableAssociationResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        SubnetRouteTableAssociationResourcePropsValidator(properties).assertSuccess();
        return {
            RouteTableId: cdk.stringToCloudFormation(properties.routeTableId),
            SubnetId: cdk.stringToCloudFormation(properties.subnetId),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html
     */
    class SubnetRouteTableAssociationResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::SubnetRouteTableAssociation``.
         *
         * @param parent   the ``cdk.Construct`` this ``SubnetRouteTableAssociationResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``SubnetRouteTableAssociationResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: SubnetRouteTableAssociationResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'routeTableId', this);
            cdk.requireProperty(properties, 'subnetId', this);
            this.subnetRouteTableAssociationName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return subnetRouteTableAssociationResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    SubnetRouteTableAssociationResource.resourceTypeName = "AWS::EC2::SubnetRouteTableAssociation";
    cloudformation.SubnetRouteTableAssociationResource = SubnetRouteTableAssociationResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``TransitGatewayResourceProps``
     *
     * @param properties the TypeScript properties of a ``TransitGatewayResourceProps``
     *
     * @returns the result of the validation.
     */
    function TransitGatewayResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('amazonSideAsn', cdk.validateNumber)(properties.amazonSideAsn));
        errors.collect(cdk.propertyValidator('autoAcceptSharedAttachments', cdk.validateString)(properties.autoAcceptSharedAttachments));
        errors.collect(cdk.propertyValidator('defaultRouteTableAssociation', cdk.validateString)(properties.defaultRouteTableAssociation));
        errors.collect(cdk.propertyValidator('defaultRouteTablePropagation', cdk.validateString)(properties.defaultRouteTablePropagation));
        errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));
        errors.collect(cdk.propertyValidator('dnsSupport', cdk.validateString)(properties.dnsSupport));
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        errors.collect(cdk.propertyValidator('vpnEcmpSupport', cdk.validateString)(properties.vpnEcmpSupport));
        return errors.wrap('supplied properties not correct for "TransitGatewayResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::TransitGateway`` resource
     *
     * @param properties the TypeScript properties of a ``TransitGatewayResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::TransitGateway`` resource.
     */
    function transitGatewayResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        TransitGatewayResourcePropsValidator(properties).assertSuccess();
        return {
            AmazonSideAsn: cdk.numberToCloudFormation(properties.amazonSideAsn),
            AutoAcceptSharedAttachments: cdk.stringToCloudFormation(properties.autoAcceptSharedAttachments),
            DefaultRouteTableAssociation: cdk.stringToCloudFormation(properties.defaultRouteTableAssociation),
            DefaultRouteTablePropagation: cdk.stringToCloudFormation(properties.defaultRouteTablePropagation),
            Description: cdk.stringToCloudFormation(properties.description),
            DnsSupport: cdk.stringToCloudFormation(properties.dnsSupport),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
            VpnEcmpSupport: cdk.stringToCloudFormation(properties.vpnEcmpSupport),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgateway.html
     */
    class TransitGatewayResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::TransitGateway``.
         *
         * @param parent   the ``cdk.Construct`` this ``TransitGatewayResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``TransitGatewayResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: TransitGatewayResource.resourceTypeName, properties });
            this.transitGatewayId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return transitGatewayResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    TransitGatewayResource.resourceTypeName = "AWS::EC2::TransitGateway";
    cloudformation.TransitGatewayResource = TransitGatewayResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``TransitGatewayAttachmentResourceProps``
     *
     * @param properties the TypeScript properties of a ``TransitGatewayAttachmentResourceProps``
     *
     * @returns the result of the validation.
     */
    function TransitGatewayAttachmentResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('subnetIds', cdk.requiredValidator)(properties.subnetIds));
        errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        errors.collect(cdk.propertyValidator('transitGatewayId', cdk.requiredValidator)(properties.transitGatewayId));
        errors.collect(cdk.propertyValidator('transitGatewayId', cdk.validateString)(properties.transitGatewayId));
        errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));
        errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));
        return errors.wrap('supplied properties not correct for "TransitGatewayAttachmentResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::TransitGatewayAttachment`` resource
     *
     * @param properties the TypeScript properties of a ``TransitGatewayAttachmentResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::TransitGatewayAttachment`` resource.
     */
    function transitGatewayAttachmentResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        TransitGatewayAttachmentResourcePropsValidator(properties).assertSuccess();
        return {
            SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),
            TransitGatewayId: cdk.stringToCloudFormation(properties.transitGatewayId),
            VpcId: cdk.stringToCloudFormation(properties.vpcId),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgatewayattachment.html
     */
    class TransitGatewayAttachmentResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::TransitGatewayAttachment``.
         *
         * @param parent   the ``cdk.Construct`` this ``TransitGatewayAttachmentResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``TransitGatewayAttachmentResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: TransitGatewayAttachmentResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'subnetIds', this);
            cdk.requireProperty(properties, 'transitGatewayId', this);
            cdk.requireProperty(properties, 'vpcId', this);
            this.transitGatewayAttachmentId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return transitGatewayAttachmentResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    TransitGatewayAttachmentResource.resourceTypeName = "AWS::EC2::TransitGatewayAttachment";
    cloudformation.TransitGatewayAttachmentResource = TransitGatewayAttachmentResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``TransitGatewayRouteResourceProps``
     *
     * @param properties the TypeScript properties of a ``TransitGatewayRouteResourceProps``
     *
     * @returns the result of the validation.
     */
    function TransitGatewayRouteResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('blackhole', cdk.validateBoolean)(properties.blackhole));
        errors.collect(cdk.propertyValidator('destinationCidrBlock', cdk.validateString)(properties.destinationCidrBlock));
        errors.collect(cdk.propertyValidator('transitGatewayAttachmentId', cdk.validateString)(properties.transitGatewayAttachmentId));
        errors.collect(cdk.propertyValidator('transitGatewayRouteTableId', cdk.requiredValidator)(properties.transitGatewayRouteTableId));
        errors.collect(cdk.propertyValidator('transitGatewayRouteTableId', cdk.validateString)(properties.transitGatewayRouteTableId));
        return errors.wrap('supplied properties not correct for "TransitGatewayRouteResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::TransitGatewayRoute`` resource
     *
     * @param properties the TypeScript properties of a ``TransitGatewayRouteResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::TransitGatewayRoute`` resource.
     */
    function transitGatewayRouteResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        TransitGatewayRouteResourcePropsValidator(properties).assertSuccess();
        return {
            TransitGatewayRouteTableId: cdk.stringToCloudFormation(properties.transitGatewayRouteTableId),
            Blackhole: cdk.booleanToCloudFormation(properties.blackhole),
            DestinationCidrBlock: cdk.stringToCloudFormation(properties.destinationCidrBlock),
            TransitGatewayAttachmentId: cdk.stringToCloudFormation(properties.transitGatewayAttachmentId),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgatewayroute.html
     */
    class TransitGatewayRouteResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::TransitGatewayRoute``.
         *
         * @param parent   the ``cdk.Construct`` this ``TransitGatewayRouteResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``TransitGatewayRouteResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: TransitGatewayRouteResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'transitGatewayRouteTableId', this);
            this.transitGatewayRouteId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return transitGatewayRouteResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    TransitGatewayRouteResource.resourceTypeName = "AWS::EC2::TransitGatewayRoute";
    cloudformation.TransitGatewayRouteResource = TransitGatewayRouteResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``TransitGatewayRouteTableResourceProps``
     *
     * @param properties the TypeScript properties of a ``TransitGatewayRouteTableResourceProps``
     *
     * @returns the result of the validation.
     */
    function TransitGatewayRouteTableResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        errors.collect(cdk.propertyValidator('transitGatewayId', cdk.requiredValidator)(properties.transitGatewayId));
        errors.collect(cdk.propertyValidator('transitGatewayId', cdk.validateString)(properties.transitGatewayId));
        return errors.wrap('supplied properties not correct for "TransitGatewayRouteTableResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::TransitGatewayRouteTable`` resource
     *
     * @param properties the TypeScript properties of a ``TransitGatewayRouteTableResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::TransitGatewayRouteTable`` resource.
     */
    function transitGatewayRouteTableResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        TransitGatewayRouteTableResourcePropsValidator(properties).assertSuccess();
        return {
            TransitGatewayId: cdk.stringToCloudFormation(properties.transitGatewayId),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgatewayroutetable.html
     */
    class TransitGatewayRouteTableResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::TransitGatewayRouteTable``.
         *
         * @param parent   the ``cdk.Construct`` this ``TransitGatewayRouteTableResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``TransitGatewayRouteTableResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: TransitGatewayRouteTableResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'transitGatewayId', this);
            this.transitGatewayRouteTableId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return transitGatewayRouteTableResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    TransitGatewayRouteTableResource.resourceTypeName = "AWS::EC2::TransitGatewayRouteTable";
    cloudformation.TransitGatewayRouteTableResource = TransitGatewayRouteTableResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``TransitGatewayRouteTableAssociationResourceProps``
     *
     * @param properties the TypeScript properties of a ``TransitGatewayRouteTableAssociationResourceProps``
     *
     * @returns the result of the validation.
     */
    function TransitGatewayRouteTableAssociationResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('transitGatewayAttachmentId', cdk.requiredValidator)(properties.transitGatewayAttachmentId));
        errors.collect(cdk.propertyValidator('transitGatewayAttachmentId', cdk.validateString)(properties.transitGatewayAttachmentId));
        errors.collect(cdk.propertyValidator('transitGatewayRouteTableId', cdk.requiredValidator)(properties.transitGatewayRouteTableId));
        errors.collect(cdk.propertyValidator('transitGatewayRouteTableId', cdk.validateString)(properties.transitGatewayRouteTableId));
        return errors.wrap('supplied properties not correct for "TransitGatewayRouteTableAssociationResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::TransitGatewayRouteTableAssociation`` resource
     *
     * @param properties the TypeScript properties of a ``TransitGatewayRouteTableAssociationResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::TransitGatewayRouteTableAssociation`` resource.
     */
    function transitGatewayRouteTableAssociationResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        TransitGatewayRouteTableAssociationResourcePropsValidator(properties).assertSuccess();
        return {
            TransitGatewayAttachmentId: cdk.stringToCloudFormation(properties.transitGatewayAttachmentId),
            TransitGatewayRouteTableId: cdk.stringToCloudFormation(properties.transitGatewayRouteTableId),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgatewayroutetableassociation.html
     */
    class TransitGatewayRouteTableAssociationResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::TransitGatewayRouteTableAssociation``.
         *
         * @param parent   the ``cdk.Construct`` this ``TransitGatewayRouteTableAssociationResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``TransitGatewayRouteTableAssociationResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: TransitGatewayRouteTableAssociationResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'transitGatewayAttachmentId', this);
            cdk.requireProperty(properties, 'transitGatewayRouteTableId', this);
            this.transitGatewayRouteTableAssociationId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return transitGatewayRouteTableAssociationResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    TransitGatewayRouteTableAssociationResource.resourceTypeName = "AWS::EC2::TransitGatewayRouteTableAssociation";
    cloudformation.TransitGatewayRouteTableAssociationResource = TransitGatewayRouteTableAssociationResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``TransitGatewayRouteTablePropagationResourceProps``
     *
     * @param properties the TypeScript properties of a ``TransitGatewayRouteTablePropagationResourceProps``
     *
     * @returns the result of the validation.
     */
    function TransitGatewayRouteTablePropagationResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('transitGatewayAttachmentId', cdk.requiredValidator)(properties.transitGatewayAttachmentId));
        errors.collect(cdk.propertyValidator('transitGatewayAttachmentId', cdk.validateString)(properties.transitGatewayAttachmentId));
        errors.collect(cdk.propertyValidator('transitGatewayRouteTableId', cdk.requiredValidator)(properties.transitGatewayRouteTableId));
        errors.collect(cdk.propertyValidator('transitGatewayRouteTableId', cdk.validateString)(properties.transitGatewayRouteTableId));
        return errors.wrap('supplied properties not correct for "TransitGatewayRouteTablePropagationResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::TransitGatewayRouteTablePropagation`` resource
     *
     * @param properties the TypeScript properties of a ``TransitGatewayRouteTablePropagationResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::TransitGatewayRouteTablePropagation`` resource.
     */
    function transitGatewayRouteTablePropagationResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        TransitGatewayRouteTablePropagationResourcePropsValidator(properties).assertSuccess();
        return {
            TransitGatewayAttachmentId: cdk.stringToCloudFormation(properties.transitGatewayAttachmentId),
            TransitGatewayRouteTableId: cdk.stringToCloudFormation(properties.transitGatewayRouteTableId),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgatewayroutetablepropagation.html
     */
    class TransitGatewayRouteTablePropagationResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::TransitGatewayRouteTablePropagation``.
         *
         * @param parent   the ``cdk.Construct`` this ``TransitGatewayRouteTablePropagationResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``TransitGatewayRouteTablePropagationResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: TransitGatewayRouteTablePropagationResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'transitGatewayAttachmentId', this);
            cdk.requireProperty(properties, 'transitGatewayRouteTableId', this);
            this.transitGatewayRouteTablePropagationId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return transitGatewayRouteTablePropagationResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    TransitGatewayRouteTablePropagationResource.resourceTypeName = "AWS::EC2::TransitGatewayRouteTablePropagation";
    cloudformation.TransitGatewayRouteTablePropagationResource = TransitGatewayRouteTablePropagationResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``TrunkInterfaceAssociationResourceProps``
     *
     * @param properties the TypeScript properties of a ``TrunkInterfaceAssociationResourceProps``
     *
     * @returns the result of the validation.
     */
    function TrunkInterfaceAssociationResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('branchInterfaceId', cdk.requiredValidator)(properties.branchInterfaceId));
        errors.collect(cdk.propertyValidator('branchInterfaceId', cdk.validateString)(properties.branchInterfaceId));
        errors.collect(cdk.propertyValidator('greKey', cdk.validateNumber)(properties.greKey));
        errors.collect(cdk.propertyValidator('trunkInterfaceId', cdk.requiredValidator)(properties.trunkInterfaceId));
        errors.collect(cdk.propertyValidator('trunkInterfaceId', cdk.validateString)(properties.trunkInterfaceId));
        errors.collect(cdk.propertyValidator('vlanId', cdk.validateNumber)(properties.vlanId));
        return errors.wrap('supplied properties not correct for "TrunkInterfaceAssociationResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::TrunkInterfaceAssociation`` resource
     *
     * @param properties the TypeScript properties of a ``TrunkInterfaceAssociationResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::TrunkInterfaceAssociation`` resource.
     */
    function trunkInterfaceAssociationResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        TrunkInterfaceAssociationResourcePropsValidator(properties).assertSuccess();
        return {
            BranchInterfaceId: cdk.stringToCloudFormation(properties.branchInterfaceId),
            TrunkInterfaceId: cdk.stringToCloudFormation(properties.trunkInterfaceId),
            GREKey: cdk.numberToCloudFormation(properties.greKey),
            VLANId: cdk.numberToCloudFormation(properties.vlanId),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trunkinterfaceassociation.html
     */
    class TrunkInterfaceAssociationResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::TrunkInterfaceAssociation``.
         *
         * @param parent   the ``cdk.Construct`` this ``TrunkInterfaceAssociationResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``TrunkInterfaceAssociationResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: TrunkInterfaceAssociationResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'branchInterfaceId', this);
            cdk.requireProperty(properties, 'trunkInterfaceId', this);
            this.trunkInterfaceAssociationId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return trunkInterfaceAssociationResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    TrunkInterfaceAssociationResource.resourceTypeName = "AWS::EC2::TrunkInterfaceAssociation";
    cloudformation.TrunkInterfaceAssociationResource = TrunkInterfaceAssociationResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``VPCResourceProps``
     *
     * @param properties the TypeScript properties of a ``VPCResourceProps``
     *
     * @returns the result of the validation.
     */
    function VPCResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('cidrBlock', cdk.requiredValidator)(properties.cidrBlock));
        errors.collect(cdk.propertyValidator('cidrBlock', cdk.validateString)(properties.cidrBlock));
        errors.collect(cdk.propertyValidator('enableDnsHostnames', cdk.validateBoolean)(properties.enableDnsHostnames));
        errors.collect(cdk.propertyValidator('enableDnsSupport', cdk.validateBoolean)(properties.enableDnsSupport));
        errors.collect(cdk.propertyValidator('instanceTenancy', cdk.validateString)(properties.instanceTenancy));
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        return errors.wrap('supplied properties not correct for "VPCResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::VPC`` resource
     *
     * @param properties the TypeScript properties of a ``VPCResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::VPC`` resource.
     */
    function vPCResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        VPCResourcePropsValidator(properties).assertSuccess();
        return {
            CidrBlock: cdk.stringToCloudFormation(properties.cidrBlock),
            EnableDnsHostnames: cdk.booleanToCloudFormation(properties.enableDnsHostnames),
            EnableDnsSupport: cdk.booleanToCloudFormation(properties.enableDnsSupport),
            InstanceTenancy: cdk.stringToCloudFormation(properties.instanceTenancy),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html
     */
    class VPCResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::VPC``.
         *
         * @param parent   the ``cdk.Construct`` this ``VPCResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``VPCResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: VPCResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'cidrBlock', this);
            this.vpcCidrBlock = this.getAtt('CidrBlock').toString();
            this.vpcCidrBlockAssociations = new VPCCidrBlockAssociations(this.getAtt('CidrBlockAssociations'));
            this.vpcDefaultNetworkAcl = this.getAtt('DefaultNetworkAcl').toString();
            this.vpcDefaultSecurityGroup = this.getAtt('DefaultSecurityGroup').toString();
            this.vpcIpv6CidrBlocks = new VPCIpv6CidrBlocks(this.getAtt('Ipv6CidrBlocks'));
            this.vpcId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return vPCResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    VPCResource.resourceTypeName = "AWS::EC2::VPC";
    cloudformation.VPCResource = VPCResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
class VPCCidrBlockAssociations extends cdk.Token {
    constructor() {
        super(...arguments);
        // @ts-ignore: private but unused on purpose.
        this.thisIsAVPCCidrBlockAssociations = true;
    }
}
exports.VPCCidrBlockAssociations = VPCCidrBlockAssociations;
class VPCIpv6CidrBlocks extends cdk.Token {
    constructor() {
        super(...arguments);
        // @ts-ignore: private but unused on purpose.
        this.thisIsAVPCIpv6CidrBlocks = true;
    }
}
exports.VPCIpv6CidrBlocks = VPCIpv6CidrBlocks;
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``VPCCidrBlockResourceProps``
     *
     * @param properties the TypeScript properties of a ``VPCCidrBlockResourceProps``
     *
     * @returns the result of the validation.
     */
    function VPCCidrBlockResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('amazonProvidedIpv6CidrBlock', cdk.validateBoolean)(properties.amazonProvidedIpv6CidrBlock));
        errors.collect(cdk.propertyValidator('cidrBlock', cdk.validateString)(properties.cidrBlock));
        errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));
        errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));
        return errors.wrap('supplied properties not correct for "VPCCidrBlockResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::VPCCidrBlock`` resource
     *
     * @param properties the TypeScript properties of a ``VPCCidrBlockResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::VPCCidrBlock`` resource.
     */
    function vPCCidrBlockResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        VPCCidrBlockResourcePropsValidator(properties).assertSuccess();
        return {
            VpcId: cdk.stringToCloudFormation(properties.vpcId),
            AmazonProvidedIpv6CidrBlock: cdk.booleanToCloudFormation(properties.amazonProvidedIpv6CidrBlock),
            CidrBlock: cdk.stringToCloudFormation(properties.cidrBlock),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpccidrblock.html
     */
    class VPCCidrBlockResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::VPCCidrBlock``.
         *
         * @param parent   the ``cdk.Construct`` this ``VPCCidrBlockResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``VPCCidrBlockResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: VPCCidrBlockResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'vpcId', this);
            this.vpcCidrBlockId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return vPCCidrBlockResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    VPCCidrBlockResource.resourceTypeName = "AWS::EC2::VPCCidrBlock";
    cloudformation.VPCCidrBlockResource = VPCCidrBlockResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``VPCDHCPOptionsAssociationResourceProps``
     *
     * @param properties the TypeScript properties of a ``VPCDHCPOptionsAssociationResourceProps``
     *
     * @returns the result of the validation.
     */
    function VPCDHCPOptionsAssociationResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('dhcpOptionsId', cdk.requiredValidator)(properties.dhcpOptionsId));
        errors.collect(cdk.propertyValidator('dhcpOptionsId', cdk.validateString)(properties.dhcpOptionsId));
        errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));
        errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));
        return errors.wrap('supplied properties not correct for "VPCDHCPOptionsAssociationResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::VPCDHCPOptionsAssociation`` resource
     *
     * @param properties the TypeScript properties of a ``VPCDHCPOptionsAssociationResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::VPCDHCPOptionsAssociation`` resource.
     */
    function vPCDHCPOptionsAssociationResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        VPCDHCPOptionsAssociationResourcePropsValidator(properties).assertSuccess();
        return {
            DhcpOptionsId: cdk.stringToCloudFormation(properties.dhcpOptionsId),
            VpcId: cdk.stringToCloudFormation(properties.vpcId),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-dhcp-options-assoc.html
     */
    class VPCDHCPOptionsAssociationResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::VPCDHCPOptionsAssociation``.
         *
         * @param parent   the ``cdk.Construct`` this ``VPCDHCPOptionsAssociationResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``VPCDHCPOptionsAssociationResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: VPCDHCPOptionsAssociationResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'dhcpOptionsId', this);
            cdk.requireProperty(properties, 'vpcId', this);
            this.vpcdhcpOptionsAssociationName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return vPCDHCPOptionsAssociationResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    VPCDHCPOptionsAssociationResource.resourceTypeName = "AWS::EC2::VPCDHCPOptionsAssociation";
    cloudformation.VPCDHCPOptionsAssociationResource = VPCDHCPOptionsAssociationResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``VPCEndpointResourceProps``
     *
     * @param properties the TypeScript properties of a ``VPCEndpointResourceProps``
     *
     * @returns the result of the validation.
     */
    function VPCEndpointResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('policyDocument', cdk.validateObject)(properties.policyDocument));
        errors.collect(cdk.propertyValidator('privateDnsEnabled', cdk.validateBoolean)(properties.privateDnsEnabled));
        errors.collect(cdk.propertyValidator('routeTableIds', cdk.listValidator(cdk.validateString))(properties.routeTableIds));
        errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
        errors.collect(cdk.propertyValidator('serviceName', cdk.requiredValidator)(properties.serviceName));
        errors.collect(cdk.propertyValidator('serviceName', cdk.validateString)(properties.serviceName));
        errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));
        errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));
        errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));
        errors.collect(cdk.propertyValidator('vpcEndpointType', cdk.validateString)(properties.vpcEndpointType));
        return errors.wrap('supplied properties not correct for "VPCEndpointResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::VPCEndpoint`` resource
     *
     * @param properties the TypeScript properties of a ``VPCEndpointResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::VPCEndpoint`` resource.
     */
    function vPCEndpointResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        VPCEndpointResourcePropsValidator(properties).assertSuccess();
        return {
            ServiceName: cdk.stringToCloudFormation(properties.serviceName),
            VpcId: cdk.stringToCloudFormation(properties.vpcId),
            PolicyDocument: cdk.objectToCloudFormation(properties.policyDocument),
            PrivateDnsEnabled: cdk.booleanToCloudFormation(properties.privateDnsEnabled),
            RouteTableIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.routeTableIds),
            SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
            SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),
            VpcEndpointType: cdk.stringToCloudFormation(properties.vpcEndpointType),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpoint.html
     */
    class VPCEndpointResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::VPCEndpoint``.
         *
         * @param parent   the ``cdk.Construct`` this ``VPCEndpointResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``VPCEndpointResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: VPCEndpointResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'serviceName', this);
            cdk.requireProperty(properties, 'vpcId', this);
            this.vpcEndpointCreationTimestamp = this.getAtt('CreationTimestamp').toString();
            this.vpcEndpointDnsEntries = new VPCEndpointDnsEntries(this.getAtt('DnsEntries'));
            this.vpcEndpointNetworkInterfaceIds = new VPCEndpointNetworkInterfaceIds(this.getAtt('NetworkInterfaceIds'));
            this.vpcEndpointId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return vPCEndpointResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    VPCEndpointResource.resourceTypeName = "AWS::EC2::VPCEndpoint";
    cloudformation.VPCEndpointResource = VPCEndpointResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
class VPCEndpointDnsEntries extends cdk.Token {
    constructor() {
        super(...arguments);
        // @ts-ignore: private but unused on purpose.
        this.thisIsAVPCEndpointDnsEntries = true;
    }
}
exports.VPCEndpointDnsEntries = VPCEndpointDnsEntries;
class VPCEndpointNetworkInterfaceIds extends cdk.Token {
    constructor() {
        super(...arguments);
        // @ts-ignore: private but unused on purpose.
        this.thisIsAVPCEndpointNetworkInterfaceIds = true;
    }
}
exports.VPCEndpointNetworkInterfaceIds = VPCEndpointNetworkInterfaceIds;
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``VPCEndpointConnectionNotificationResourceProps``
     *
     * @param properties the TypeScript properties of a ``VPCEndpointConnectionNotificationResourceProps``
     *
     * @returns the result of the validation.
     */
    function VPCEndpointConnectionNotificationResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('connectionEvents', cdk.requiredValidator)(properties.connectionEvents));
        errors.collect(cdk.propertyValidator('connectionEvents', cdk.listValidator(cdk.validateString))(properties.connectionEvents));
        errors.collect(cdk.propertyValidator('connectionNotificationArn', cdk.requiredValidator)(properties.connectionNotificationArn));
        errors.collect(cdk.propertyValidator('connectionNotificationArn', cdk.validateString)(properties.connectionNotificationArn));
        errors.collect(cdk.propertyValidator('serviceId', cdk.validateString)(properties.serviceId));
        errors.collect(cdk.propertyValidator('vpcEndpointId', cdk.validateString)(properties.vpcEndpointId));
        return errors.wrap('supplied properties not correct for "VPCEndpointConnectionNotificationResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::VPCEndpointConnectionNotification`` resource
     *
     * @param properties the TypeScript properties of a ``VPCEndpointConnectionNotificationResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::VPCEndpointConnectionNotification`` resource.
     */
    function vPCEndpointConnectionNotificationResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        VPCEndpointConnectionNotificationResourcePropsValidator(properties).assertSuccess();
        return {
            ConnectionEvents: cdk.listMapper(cdk.stringToCloudFormation)(properties.connectionEvents),
            ConnectionNotificationArn: cdk.stringToCloudFormation(properties.connectionNotificationArn),
            ServiceId: cdk.stringToCloudFormation(properties.serviceId),
            VPCEndpointId: cdk.stringToCloudFormation(properties.vpcEndpointId),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpointconnectionnotification.html
     */
    class VPCEndpointConnectionNotificationResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::VPCEndpointConnectionNotification``.
         *
         * @param parent   the ``cdk.Construct`` this ``VPCEndpointConnectionNotificationResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``VPCEndpointConnectionNotificationResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: VPCEndpointConnectionNotificationResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'connectionEvents', this);
            cdk.requireProperty(properties, 'connectionNotificationArn', this);
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return vPCEndpointConnectionNotificationResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    VPCEndpointConnectionNotificationResource.resourceTypeName = "AWS::EC2::VPCEndpointConnectionNotification";
    cloudformation.VPCEndpointConnectionNotificationResource = VPCEndpointConnectionNotificationResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``VPCEndpointServicePermissionsResourceProps``
     *
     * @param properties the TypeScript properties of a ``VPCEndpointServicePermissionsResourceProps``
     *
     * @returns the result of the validation.
     */
    function VPCEndpointServicePermissionsResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('allowedPrincipals', cdk.listValidator(cdk.validateString))(properties.allowedPrincipals));
        errors.collect(cdk.propertyValidator('serviceId', cdk.requiredValidator)(properties.serviceId));
        errors.collect(cdk.propertyValidator('serviceId', cdk.validateString)(properties.serviceId));
        return errors.wrap('supplied properties not correct for "VPCEndpointServicePermissionsResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::VPCEndpointServicePermissions`` resource
     *
     * @param properties the TypeScript properties of a ``VPCEndpointServicePermissionsResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::VPCEndpointServicePermissions`` resource.
     */
    function vPCEndpointServicePermissionsResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        VPCEndpointServicePermissionsResourcePropsValidator(properties).assertSuccess();
        return {
            ServiceId: cdk.stringToCloudFormation(properties.serviceId),
            AllowedPrincipals: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowedPrincipals),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpointservicepermissions.html
     */
    class VPCEndpointServicePermissionsResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::VPCEndpointServicePermissions``.
         *
         * @param parent   the ``cdk.Construct`` this ``VPCEndpointServicePermissionsResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``VPCEndpointServicePermissionsResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: VPCEndpointServicePermissionsResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'serviceId', this);
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return vPCEndpointServicePermissionsResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    VPCEndpointServicePermissionsResource.resourceTypeName = "AWS::EC2::VPCEndpointServicePermissions";
    cloudformation.VPCEndpointServicePermissionsResource = VPCEndpointServicePermissionsResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``VPCGatewayAttachmentResourceProps``
     *
     * @param properties the TypeScript properties of a ``VPCGatewayAttachmentResourceProps``
     *
     * @returns the result of the validation.
     */
    function VPCGatewayAttachmentResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('internetGatewayId', cdk.validateString)(properties.internetGatewayId));
        errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));
        errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));
        errors.collect(cdk.propertyValidator('vpnGatewayId', cdk.validateString)(properties.vpnGatewayId));
        return errors.wrap('supplied properties not correct for "VPCGatewayAttachmentResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::VPCGatewayAttachment`` resource
     *
     * @param properties the TypeScript properties of a ``VPCGatewayAttachmentResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::VPCGatewayAttachment`` resource.
     */
    function vPCGatewayAttachmentResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        VPCGatewayAttachmentResourcePropsValidator(properties).assertSuccess();
        return {
            VpcId: cdk.stringToCloudFormation(properties.vpcId),
            InternetGatewayId: cdk.stringToCloudFormation(properties.internetGatewayId),
            VpnGatewayId: cdk.stringToCloudFormation(properties.vpnGatewayId),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html
     */
    class VPCGatewayAttachmentResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::VPCGatewayAttachment``.
         *
         * @param parent   the ``cdk.Construct`` this ``VPCGatewayAttachmentResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``VPCGatewayAttachmentResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: VPCGatewayAttachmentResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'vpcId', this);
            this.vpcGatewayAttachmentName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return vPCGatewayAttachmentResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    VPCGatewayAttachmentResource.resourceTypeName = "AWS::EC2::VPCGatewayAttachment";
    cloudformation.VPCGatewayAttachmentResource = VPCGatewayAttachmentResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``VPCPeeringConnectionResourceProps``
     *
     * @param properties the TypeScript properties of a ``VPCPeeringConnectionResourceProps``
     *
     * @returns the result of the validation.
     */
    function VPCPeeringConnectionResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('peerOwnerId', cdk.validateString)(properties.peerOwnerId));
        errors.collect(cdk.propertyValidator('peerRegion', cdk.validateString)(properties.peerRegion));
        errors.collect(cdk.propertyValidator('peerRoleArn', cdk.validateString)(properties.peerRoleArn));
        errors.collect(cdk.propertyValidator('peerVpcId', cdk.requiredValidator)(properties.peerVpcId));
        errors.collect(cdk.propertyValidator('peerVpcId', cdk.validateString)(properties.peerVpcId));
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));
        errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));
        return errors.wrap('supplied properties not correct for "VPCPeeringConnectionResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::VPCPeeringConnection`` resource
     *
     * @param properties the TypeScript properties of a ``VPCPeeringConnectionResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::VPCPeeringConnection`` resource.
     */
    function vPCPeeringConnectionResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        VPCPeeringConnectionResourcePropsValidator(properties).assertSuccess();
        return {
            PeerVpcId: cdk.stringToCloudFormation(properties.peerVpcId),
            VpcId: cdk.stringToCloudFormation(properties.vpcId),
            PeerOwnerId: cdk.stringToCloudFormation(properties.peerOwnerId),
            PeerRegion: cdk.stringToCloudFormation(properties.peerRegion),
            PeerRoleArn: cdk.stringToCloudFormation(properties.peerRoleArn),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcpeeringconnection.html
     */
    class VPCPeeringConnectionResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::VPCPeeringConnection``.
         *
         * @param parent   the ``cdk.Construct`` this ``VPCPeeringConnectionResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``VPCPeeringConnectionResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: VPCPeeringConnectionResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'peerVpcId', this);
            cdk.requireProperty(properties, 'vpcId', this);
            this.vpcPeeringConnectionName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return vPCPeeringConnectionResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    VPCPeeringConnectionResource.resourceTypeName = "AWS::EC2::VPCPeeringConnection";
    cloudformation.VPCPeeringConnectionResource = VPCPeeringConnectionResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``VPNConnectionResourceProps``
     *
     * @param properties the TypeScript properties of a ``VPNConnectionResourceProps``
     *
     * @returns the result of the validation.
     */
    function VPNConnectionResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('customerGatewayId', cdk.requiredValidator)(properties.customerGatewayId));
        errors.collect(cdk.propertyValidator('customerGatewayId', cdk.validateString)(properties.customerGatewayId));
        errors.collect(cdk.propertyValidator('staticRoutesOnly', cdk.validateBoolean)(properties.staticRoutesOnly));
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));
        errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));
        errors.collect(cdk.propertyValidator('vpnGatewayId', cdk.requiredValidator)(properties.vpnGatewayId));
        errors.collect(cdk.propertyValidator('vpnGatewayId', cdk.validateString)(properties.vpnGatewayId));
        errors.collect(cdk.propertyValidator('vpnTunnelOptionsSpecifications', cdk.listValidator(VPNConnectionResource_VpnTunnelOptionsSpecificationPropertyValidator))(properties.vpnTunnelOptionsSpecifications));
        return errors.wrap('supplied properties not correct for "VPNConnectionResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::VPNConnection`` resource
     *
     * @param properties the TypeScript properties of a ``VPNConnectionResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::VPNConnection`` resource.
     */
    function vPNConnectionResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        VPNConnectionResourcePropsValidator(properties).assertSuccess();
        return {
            CustomerGatewayId: cdk.stringToCloudFormation(properties.customerGatewayId),
            Type: cdk.stringToCloudFormation(properties.type),
            VpnGatewayId: cdk.stringToCloudFormation(properties.vpnGatewayId),
            StaticRoutesOnly: cdk.booleanToCloudFormation(properties.staticRoutesOnly),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
            VpnTunnelOptionsSpecifications: cdk.listMapper(vPNConnectionResourceVpnTunnelOptionsSpecificationPropertyToCloudFormation)(properties.vpnTunnelOptionsSpecifications),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-connection.html
     */
    class VPNConnectionResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::VPNConnection``.
         *
         * @param parent   the ``cdk.Construct`` this ``VPNConnectionResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``VPNConnectionResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: VPNConnectionResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'customerGatewayId', this);
            cdk.requireProperty(properties, 'type', this);
            cdk.requireProperty(properties, 'vpnGatewayId', this);
            this.vpnConnectionName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return vPNConnectionResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    VPNConnectionResource.resourceTypeName = "AWS::EC2::VPNConnection";
    cloudformation.VPNConnectionResource = VPNConnectionResource;
    /**
     * Determine whether the given properties match those of a ``VpnTunnelOptionsSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``VpnTunnelOptionsSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function VPNConnectionResource_VpnTunnelOptionsSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('preSharedKey', cdk.validateString)(properties.preSharedKey));
        errors.collect(cdk.propertyValidator('tunnelInsideCidr', cdk.validateString)(properties.tunnelInsideCidr));
        return errors.wrap('supplied properties not correct for "VpnTunnelOptionsSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::VPNConnection.VpnTunnelOptionsSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``VpnTunnelOptionsSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::VPNConnection.VpnTunnelOptionsSpecification`` resource.
     */
    function vPNConnectionResourceVpnTunnelOptionsSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        VPNConnectionResource_VpnTunnelOptionsSpecificationPropertyValidator(properties).assertSuccess();
        return {
            PreSharedKey: cdk.stringToCloudFormation(properties.preSharedKey),
            TunnelInsideCidr: cdk.stringToCloudFormation(properties.tunnelInsideCidr),
        };
    }
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``VPNConnectionRouteResourceProps``
     *
     * @param properties the TypeScript properties of a ``VPNConnectionRouteResourceProps``
     *
     * @returns the result of the validation.
     */
    function VPNConnectionRouteResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('destinationCidrBlock', cdk.requiredValidator)(properties.destinationCidrBlock));
        errors.collect(cdk.propertyValidator('destinationCidrBlock', cdk.validateString)(properties.destinationCidrBlock));
        errors.collect(cdk.propertyValidator('vpnConnectionId', cdk.requiredValidator)(properties.vpnConnectionId));
        errors.collect(cdk.propertyValidator('vpnConnectionId', cdk.validateString)(properties.vpnConnectionId));
        return errors.wrap('supplied properties not correct for "VPNConnectionRouteResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::VPNConnectionRoute`` resource
     *
     * @param properties the TypeScript properties of a ``VPNConnectionRouteResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::VPNConnectionRoute`` resource.
     */
    function vPNConnectionRouteResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        VPNConnectionRouteResourcePropsValidator(properties).assertSuccess();
        return {
            DestinationCidrBlock: cdk.stringToCloudFormation(properties.destinationCidrBlock),
            VpnConnectionId: cdk.stringToCloudFormation(properties.vpnConnectionId),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-connection-route.html
     */
    class VPNConnectionRouteResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::VPNConnectionRoute``.
         *
         * @param parent   the ``cdk.Construct`` this ``VPNConnectionRouteResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``VPNConnectionRouteResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: VPNConnectionRouteResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'destinationCidrBlock', this);
            cdk.requireProperty(properties, 'vpnConnectionId', this);
            this.vpnConnectionRouteName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return vPNConnectionRouteResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    VPNConnectionRouteResource.resourceTypeName = "AWS::EC2::VPNConnectionRoute";
    cloudformation.VPNConnectionRouteResource = VPNConnectionRouteResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``VPNGatewayResourceProps``
     *
     * @param properties the TypeScript properties of a ``VPNGatewayResourceProps``
     *
     * @returns the result of the validation.
     */
    function VPNGatewayResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('amazonSideAsn', cdk.validateNumber)(properties.amazonSideAsn));
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));
        errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));
        return errors.wrap('supplied properties not correct for "VPNGatewayResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::VPNGateway`` resource
     *
     * @param properties the TypeScript properties of a ``VPNGatewayResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::VPNGateway`` resource.
     */
    function vPNGatewayResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        VPNGatewayResourcePropsValidator(properties).assertSuccess();
        return {
            Type: cdk.stringToCloudFormation(properties.type),
            AmazonSideAsn: cdk.numberToCloudFormation(properties.amazonSideAsn),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-gateway.html
     */
    class VPNGatewayResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::VPNGateway``.
         *
         * @param parent   the ``cdk.Construct`` this ``VPNGatewayResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``VPNGatewayResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: VPNGatewayResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'type', this);
            this.vpnGatewayName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return vPNGatewayResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    VPNGatewayResource.resourceTypeName = "AWS::EC2::VPNGateway";
    cloudformation.VPNGatewayResource = VPNGatewayResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``VPNGatewayRoutePropagationResourceProps``
     *
     * @param properties the TypeScript properties of a ``VPNGatewayRoutePropagationResourceProps``
     *
     * @returns the result of the validation.
     */
    function VPNGatewayRoutePropagationResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('routeTableIds', cdk.requiredValidator)(properties.routeTableIds));
        errors.collect(cdk.propertyValidator('routeTableIds', cdk.listValidator(cdk.validateString))(properties.routeTableIds));
        errors.collect(cdk.propertyValidator('vpnGatewayId', cdk.requiredValidator)(properties.vpnGatewayId));
        errors.collect(cdk.propertyValidator('vpnGatewayId', cdk.validateString)(properties.vpnGatewayId));
        return errors.wrap('supplied properties not correct for "VPNGatewayRoutePropagationResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::VPNGatewayRoutePropagation`` resource
     *
     * @param properties the TypeScript properties of a ``VPNGatewayRoutePropagationResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::VPNGatewayRoutePropagation`` resource.
     */
    function vPNGatewayRoutePropagationResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        VPNGatewayRoutePropagationResourcePropsValidator(properties).assertSuccess();
        return {
            RouteTableIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.routeTableIds),
            VpnGatewayId: cdk.stringToCloudFormation(properties.vpnGatewayId),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-gatewayrouteprop.html
     */
    class VPNGatewayRoutePropagationResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::VPNGatewayRoutePropagation``.
         *
         * @param parent   the ``cdk.Construct`` this ``VPNGatewayRoutePropagationResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``VPNGatewayRoutePropagationResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: VPNGatewayRoutePropagationResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'routeTableIds', this);
            cdk.requireProperty(properties, 'vpnGatewayId', this);
            this.vpnGatewayRoutePropagationName = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return vPNGatewayRoutePropagationResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    VPNGatewayRoutePropagationResource.resourceTypeName = "AWS::EC2::VPNGatewayRoutePropagation";
    cloudformation.VPNGatewayRoutePropagationResource = VPNGatewayRoutePropagationResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``VolumeResourceProps``
     *
     * @param properties the TypeScript properties of a ``VolumeResourceProps``
     *
     * @returns the result of the validation.
     */
    function VolumeResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('autoEnableIo', cdk.validateBoolean)(properties.autoEnableIo));
        errors.collect(cdk.propertyValidator('availabilityZone', cdk.requiredValidator)(properties.availabilityZone));
        errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));
        errors.collect(cdk.propertyValidator('encrypted', cdk.validateBoolean)(properties.encrypted));
        errors.collect(cdk.propertyValidator('iops', cdk.validateNumber)(properties.iops));
        errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));
        errors.collect(cdk.propertyValidator('size', cdk.validateNumber)(properties.size));
        errors.collect(cdk.propertyValidator('snapshotId', cdk.validateString)(properties.snapshotId));
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        errors.collect(cdk.propertyValidator('volumeType', cdk.validateString)(properties.volumeType));
        return errors.wrap('supplied properties not correct for "VolumeResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::Volume`` resource
     *
     * @param properties the TypeScript properties of a ``VolumeResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::Volume`` resource.
     */
    function volumeResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        VolumeResourcePropsValidator(properties).assertSuccess();
        return {
            AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
            AutoEnableIO: cdk.booleanToCloudFormation(properties.autoEnableIo),
            Encrypted: cdk.booleanToCloudFormation(properties.encrypted),
            Iops: cdk.numberToCloudFormation(properties.iops),
            KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),
            Size: cdk.numberToCloudFormation(properties.size),
            SnapshotId: cdk.stringToCloudFormation(properties.snapshotId),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
            VolumeType: cdk.stringToCloudFormation(properties.volumeType),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-ebs-volume.html
     */
    class VolumeResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::Volume``.
         *
         * @param parent   the ``cdk.Construct`` this ``VolumeResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``VolumeResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: VolumeResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'availabilityZone', this);
            this.volumeId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return volumeResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    VolumeResource.resourceTypeName = "AWS::EC2::Volume";
    cloudformation.VolumeResource = VolumeResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``VolumeAttachmentResourceProps``
     *
     * @param properties the TypeScript properties of a ``VolumeAttachmentResourceProps``
     *
     * @returns the result of the validation.
     */
    function VolumeAttachmentResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('device', cdk.requiredValidator)(properties.device));
        errors.collect(cdk.propertyValidator('device', cdk.validateString)(properties.device));
        errors.collect(cdk.propertyValidator('instanceId', cdk.requiredValidator)(properties.instanceId));
        errors.collect(cdk.propertyValidator('instanceId', cdk.validateString)(properties.instanceId));
        errors.collect(cdk.propertyValidator('volumeId', cdk.requiredValidator)(properties.volumeId));
        errors.collect(cdk.propertyValidator('volumeId', cdk.validateString)(properties.volumeId));
        return errors.wrap('supplied properties not correct for "VolumeAttachmentResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::EC2::VolumeAttachment`` resource
     *
     * @param properties the TypeScript properties of a ``VolumeAttachmentResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::EC2::VolumeAttachment`` resource.
     */
    function volumeAttachmentResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        VolumeAttachmentResourcePropsValidator(properties).assertSuccess();
        return {
            Device: cdk.stringToCloudFormation(properties.device),
            InstanceId: cdk.stringToCloudFormation(properties.instanceId),
            VolumeId: cdk.stringToCloudFormation(properties.volumeId),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-ebs-volumeattachment.html
     */
    class VolumeAttachmentResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::EC2::VolumeAttachment``.
         *
         * @param parent   the ``cdk.Construct`` this ``VolumeAttachmentResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``VolumeAttachmentResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: VolumeAttachmentResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'device', this);
            cdk.requireProperty(properties, 'instanceId', this);
            cdk.requireProperty(properties, 'volumeId', this);
            this.volumeAttachmentId = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return volumeAttachmentResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    VolumeAttachmentResource.resourceTypeName = "AWS::EC2::VolumeAttachment";
    cloudformation.VolumeAttachmentResource = VolumeAttachmentResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
//# sourceMappingURL=data:application/json;base64,
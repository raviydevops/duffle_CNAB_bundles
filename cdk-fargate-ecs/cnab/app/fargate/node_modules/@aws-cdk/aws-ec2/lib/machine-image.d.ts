import { Construct } from '@aws-cdk/cdk';
/**
 * Interface for classes that can select an appropriate machine image to use
 */
export interface IMachineImageSource {
    /**
     * Return the image to use in the given context
     */
    getImage(parent: Construct): MachineImage;
}
/**
 * Select the latest version of the indicated Windows version
 *
 * The AMI ID is selected using the values published to the SSM parameter store.
 *
 * https://aws.amazon.com/blogs/mt/query-for-the-latest-windows-ami-using-systems-manager-parameter-store/
 */
export declare class WindowsImage implements IMachineImageSource {
    private readonly version;
    constructor(version: WindowsVersion);
    /**
     * Return the image to use in the given context
     */
    getImage(parent: Construct): MachineImage;
    /**
     * Construct the SSM parameter name for the given Windows image
     */
    private imageParameterName;
}
/**
 * Amazon Linux image properties
 */
export interface AmazonLinuxImageProps {
    /**
     * What generation of Amazon Linux to use
     *
     * @default AmazonLinux
     */
    generation?: AmazonLinuxGeneration;
    /**
     * What edition of Amazon Linux to use
     *
     * @default Standard
     */
    edition?: AmazonLinuxEdition;
    /**
     * Virtualization type
     *
     * @default HVM
     */
    virtualization?: AmazonLinuxVirt;
    /**
     * What storage backed image to use
     *
     * @default GeneralPurpose
     */
    storage?: AmazonLinuxStorage;
}
/**
 * Selects the latest version of Amazon Linux
 *
 * The AMI ID is selected using the values published to the SSM parameter store.
 */
export declare class AmazonLinuxImage implements IMachineImageSource {
    private readonly generation;
    private readonly edition;
    private readonly virtualization;
    private readonly storage;
    constructor(props?: AmazonLinuxImageProps);
    /**
     * Return the image to use in the given context
     */
    getImage(parent: Construct): MachineImage;
}
/**
 * What generation of Amazon Linux to use
 */
export declare enum AmazonLinuxGeneration {
    /**
     * Amazon Linux
     */
    AmazonLinux = "amzn",
    /**
     * Amazon Linux 2
     */
    AmazonLinux2 = "amzn2"
}
/**
 * Amazon Linux edition
 */
export declare enum AmazonLinuxEdition {
    /**
     * Standard edition
     */
    Standard = "standard",
    /**
     * Minimal edition
     */
    Minimal = "minimal"
}
/**
 * Virtualization type for Amazon Linux
 */
export declare enum AmazonLinuxVirt {
    /**
     * HVM virtualization (recommended)
     */
    HVM = "hvm",
    /**
     * PV virtualization
     */
    PV = "pv"
}
export declare enum AmazonLinuxStorage {
    /**
     * EBS-backed storage
     */
    EBS = "ebs",
    /**
     * S3-backed storage
     */
    S3 = "ebs",
    /**
     * General Purpose-based storage (recommended)
     */
    GeneralPurpose = "gp2"
}
/**
 * Construct a Linux machine image from an AMI map
 *
 * Linux images IDs are not published to SSM parameter store yet, so you'll have to
 * manually specify an AMI map.
 */
export declare class GenericLinuxImage implements IMachineImageSource {
    private readonly amiMap;
    constructor(amiMap: {
        [region: string]: string;
    });
    getImage(parent: Construct): MachineImage;
}
/**
 * The Windows version to use for the WindowsImage
 */
export declare enum WindowsVersion {
    WindowsServer2016TurksihFullBase = "Windows_Server-2016-Turkish-Full-Base",
    WindowsServer2016SwedishFullBase = "Windows_Server-2016-Swedish-Full-Base",
    WindowsServer2016SpanishFullBase = "Windows_Server-2016-Spanish-Full-Base",
    WindowsServer2016RussianFullBase = "Windows_Server-2016-Russian-Full-Base",
    WindowsServer2016PortuguesePortugalFullBase = "Windows_Server-2016-Portuguese_Portugal-Full-Base",
    WindowsServer2016PortugueseBrazilFullBase = "Windows_Server-2016-Portuguese_Brazil-Full-Base",
    WindowsServer2016PolishFullBase = "Windows_Server-2016-Polish-Full-Base",
    WindowsServer2016KoreanFullSQL2016Base = "Windows_Server-2016-Korean-Full-SQL_2016_SP1_Standard",
    WindowsServer2016KoreanFullBase = "Windows_Server-2016-Korean-Full-Base",
    WindowsServer2016JapaneseFullSQL2016Web = "Windows_Server-2016-Japanese-Full-SQL_2016_SP1_Web",
    WindowsServer2016JapaneseFullSQL2016Standard = "Windows_Server-2016-Japanese-Full-SQL_2016_SP1_Standard",
    WindowsServer2016JapaneseFullSQL2016Express = "Windows_Server-2016-Japanese-Full-SQL_2016_SP1_Express",
    WindowsServer2016JapaneseFullSQL2016Enterprise = "Windows_Server-2016-Japanese-Full-SQL_2016_SP1_Enterprise",
    WindowsServer2016JapaneseFullBase = "Windows_Server-2016-Japanese-Full-Base",
    WindowsServer2016ItalianFullBase = "Windows_Server-2016-Italian-Full-Base",
    WindowsServer2016HungarianFullBase = "Windows_Server-2016-Hungarian-Full-Base",
    WindowsServer2016GermanFullBase = "Windows_Server-2016-German-Full-Base",
    WindowsServer2016FrenchFullBase = "Windows_Server-2016-French-Full-Base",
    WindowsServer2016EnglishNanoBase = "Windows_Server-2016-English-Nano-Base",
    WindowsServer2016EnglishFullSQL2017Web = "Windows_Server-2016-English-Full-SQL_2017_Web",
    WindowsServer2016EnglishFullSQL2017Standard = "Windows_Server-2016-English-Full-SQL_2017_Standard",
    WindowsServer2016EnglishFullSQL2017Express = "Windows_Server-2016-English-Full-SQL_2017_Express",
    WindowsServer2016EnglishFullSQL2017Enterprise = "Windows_Server-2016-English-Full-SQL_2017_Enterprise"
}
/**
 * Representation of a machine to be launched
 *
 * Combines an AMI ID with an OS.
 */
export declare class MachineImage {
    readonly imageId: string;
    readonly os: OperatingSystem;
    constructor(imageId: string, os: OperatingSystem);
}
/**
 * The OS type of a particular image
 */
export declare enum OperatingSystemType {
    Linux = 0,
    Windows = 1
}
/**
 * Abstraction of OS features we need to be aware of
 */
export declare abstract class OperatingSystem {
    abstract createUserData(scripts: string[]): string;
    abstract readonly type: OperatingSystemType;
}
/**
 * OS features specialized for Windows
 */
export declare class WindowsOS extends OperatingSystem {
    createUserData(scripts: string[]): string;
    readonly type: OperatingSystemType;
}
/**
 * OS features specialized for Linux
 */
export declare class LinuxOS extends OperatingSystem {
    createUserData(scripts: string[]): string;
    readonly type: OperatingSystemType;
}

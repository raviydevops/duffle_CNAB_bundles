"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const ec2_generated_1 = require("./ec2.generated");
const network_util_1 = require("./network-util");
const util_1 = require("./util");
const vpc_ref_1 = require("./vpc-ref");
/**
 * Name tag constant
 */
const NAME_TAG = 'Name';
/**
 * The default tenancy of instances launched into the VPC.
 */
var DefaultInstanceTenancy;
(function (DefaultInstanceTenancy) {
    /**
     * Instances can be launched with any tenancy.
     */
    DefaultInstanceTenancy["Default"] = "default";
    /**
     * Any instance launched into the VPC automatically has dedicated tenancy, unless you launch it with the default tenancy.
     */
    DefaultInstanceTenancy["Dedicated"] = "dedicated";
})(DefaultInstanceTenancy = exports.DefaultInstanceTenancy || (exports.DefaultInstanceTenancy = {}));
/**
 * VpcNetwork deploys an AWS VPC, with public and private subnets per Availability Zone.
 * For example:
 *
 * import { VpcNetwork } from '@aws-cdk/aws-ec2'
 *
 * const vpc = new VpcNetwork(this, {
 *   cidr: "10.0.0.0/16"
 * })
 *
 * // Iterate the public subnets
 * for (let subnet of vpc.publicSubnets) {
 *
 * }
 *
 * // Iterate the private subnets
 * for (let subnet of vpc.privateSubnets) {
 *
 * }
 */
class VpcNetwork extends vpc_ref_1.VpcNetworkRef {
    /**
     * VpcNetwork creates a VPC that spans a whole region.
     * It will automatically divide the provided VPC CIDR range, and create public and private subnets per Availability Zone.
     * Network routing for the public subnets will be configured to allow outbound access directly via an Internet Gateway.
     * Network routing for the private subnets will be configured to allow outbound access via a set of resilient NAT Gateways (one per AZ).
     */
    constructor(parent, name, props = {}) {
        super(parent, name);
        /**
         * List of public subnets in this VPC
         */
        this.publicSubnets = [];
        /**
         * List of private subnets in this VPC
         */
        this.privateSubnets = [];
        /**
         * List of isolated subnets in this VPC
         */
        this.isolatedSubnets = [];
        /**
         * Mapping of NatGateway by AZ
         */
        this.natGatewayByAZ = {};
        /**
         * Subnet configurations for this VPC
         */
        this.subnetConfiguration = [];
        // Can't have enabledDnsHostnames without enableDnsSupport
        if (props.enableDnsHostnames && !props.enableDnsSupport) {
            throw new Error('To use DNS Hostnames, DNS Support must be enabled, however, it was explicitly disabled.');
        }
        this.tags = new cdk.TagManager(this, { initialTags: props.tags });
        this.tags.setTag(NAME_TAG, this.path, { overwrite: false });
        const cidrBlock = ifUndefined(props.cidr, VpcNetwork.DEFAULT_CIDR_RANGE);
        this.networkBuilder = new network_util_1.NetworkBuilder(cidrBlock);
        const enableDnsHostnames = props.enableDnsHostnames == null ? true : props.enableDnsHostnames;
        const enableDnsSupport = props.enableDnsSupport == null ? true : props.enableDnsSupport;
        const instanceTenancy = props.defaultInstanceTenancy || 'default';
        // Define a VPC using the provided CIDR range
        this.resource = new ec2_generated_1.cloudformation.VPCResource(this, 'Resource', {
            cidrBlock,
            enableDnsHostnames,
            enableDnsSupport,
            instanceTenancy,
            tags: this.tags,
        });
        this.availabilityZones = new cdk.AvailabilityZoneProvider(this).availabilityZones;
        this.availabilityZones.sort();
        if (props.maxAZs != null) {
            this.availabilityZones = this.availabilityZones.slice(0, props.maxAZs);
        }
        this.vpcId = this.resource.vpcId;
        this.dependencyElements.push(this.resource);
        this.subnetConfiguration = ifUndefined(props.subnetConfiguration, VpcNetwork.DEFAULT_SUBNETS);
        // subnetConfiguration and natGateways must be set before calling createSubnets
        this.createSubnets();
        const allowOutbound = this.subnetConfiguration.filter(subnet => (subnet.subnetType !== vpc_ref_1.SubnetType.Isolated)).length > 0;
        // Create an Internet Gateway and attach it if necessary
        if (allowOutbound) {
            const igw = new ec2_generated_1.cloudformation.InternetGatewayResource(this, 'IGW', {
                tags: new cdk.TagManager(this),
            });
            this.internetDependencies.push(igw);
            const att = new ec2_generated_1.cloudformation.VPCGatewayAttachmentResource(this, 'VPCGW', {
                internetGatewayId: igw.ref,
                vpcId: this.resource.ref
            });
            this.dependencyElements.push(igw, att);
            this.publicSubnets.forEach(publicSubnet => {
                publicSubnet.addDefaultIGWRouteEntry(igw, att);
            });
            // if gateways are needed create them
            this.createNatGateways(props.natGateways, props.natGatewayPlacement);
            this.privateSubnets.forEach((privateSubnet, i) => {
                let ngwId = this.natGatewayByAZ[privateSubnet.availabilityZone];
                if (ngwId === undefined) {
                    const ngwArray = Array.from(Object.values(this.natGatewayByAZ));
                    // round robin the available NatGW since one is not in your AZ
                    ngwId = ngwArray[i % ngwArray.length];
                }
                privateSubnet.addDefaultNatRouteEntry(ngwId);
            });
        }
    }
    /**
     * @returns The IPv4 CidrBlock as returned by the VPC
     */
    get cidr() {
        return this.resource.getAtt("CidrBlock").toString();
    }
    createNatGateways(gateways, placement) {
        const useNatGateway = this.subnetConfiguration.filter(subnet => (subnet.subnetType === vpc_ref_1.SubnetType.Private)).length > 0;
        const natCount = ifUndefined(gateways, useNatGateway ? this.availabilityZones.length : 0);
        let natSubnets;
        if (placement) {
            const subnets = this.subnets(placement);
            for (const sub of subnets) {
                if (!this.isPublicSubnet(sub)) {
                    throw new Error(`natGatewayPlacement ${placement} contains non public subnet ${sub}`);
                }
            }
            natSubnets = subnets;
        }
        else {
            natSubnets = this.publicSubnets;
        }
        natSubnets = natSubnets.slice(0, natCount);
        for (const sub of natSubnets) {
            this.natGatewayByAZ[sub.availabilityZone] = sub.addNatGateway();
        }
    }
    /**
     * createSubnets creates the subnets specified by the subnet configuration
     * array or creates the `DEFAULT_SUBNETS` configuration
     */
    createSubnets() {
        const remainingSpaceSubnets = [];
        // Calculate number of public/private subnets based on number of AZs
        const zones = new cdk.AvailabilityZoneProvider(this).availabilityZones;
        zones.sort();
        for (const subnet of this.subnetConfiguration) {
            if (subnet.cidrMask === undefined) {
                remainingSpaceSubnets.push(subnet);
                continue;
            }
            this.createSubnetResources(subnet, subnet.cidrMask);
        }
        const totalRemaining = remainingSpaceSubnets.length * this.availabilityZones.length;
        const cidrMaskForRemaing = this.networkBuilder.maskForRemainingSubnets(totalRemaining);
        for (const subnet of remainingSpaceSubnets) {
            this.createSubnetResources(subnet, cidrMaskForRemaing);
        }
    }
    createSubnetResources(subnetConfig, cidrMask) {
        this.availabilityZones.forEach((zone, index) => {
            const name = util_1.subnetId(subnetConfig.name, index);
            const subnetProps = {
                availabilityZone: zone,
                vpcId: this.vpcId,
                cidrBlock: this.networkBuilder.addSubnet(cidrMask),
                mapPublicIpOnLaunch: (subnetConfig.subnetType === vpc_ref_1.SubnetType.Public),
                tags: subnetConfig.tags,
            };
            let subnet;
            switch (subnetConfig.subnetType) {
                case vpc_ref_1.SubnetType.Public:
                    const publicSubnet = new VpcPublicSubnet(this, name, subnetProps);
                    this.publicSubnets.push(publicSubnet);
                    subnet = publicSubnet;
                    break;
                case vpc_ref_1.SubnetType.Private:
                    const privateSubnet = new VpcPrivateSubnet(this, name, subnetProps);
                    this.privateSubnets.push(privateSubnet);
                    subnet = privateSubnet;
                    break;
                case vpc_ref_1.SubnetType.Isolated:
                    const isolatedSubnet = new VpcPrivateSubnet(this, name, subnetProps);
                    isolatedSubnet.tags.setTag(SUBNETTYPE_TAG, subnetTypeTagValue(subnetConfig.subnetType));
                    this.isolatedSubnets.push(isolatedSubnet);
                    subnet = isolatedSubnet;
                    break;
                default:
                    throw new Error(`Unrecognized subnet type: ${subnetConfig.subnetType}`);
            }
            // These values will be used to recover the config upon provider import
            subnet.tags.setTag(SUBNETNAME_TAG, subnetConfig.name, { propagate: false });
            subnet.tags.setTag(SUBNETTYPE_TAG, subnetTypeTagValue(subnetConfig.subnetType), { propagate: false });
        });
    }
}
/**
 * The default CIDR range used when creating VPCs.
 * This can be overridden using VpcNetworkProps when creating a VPCNetwork resource.
 * e.g. new VpcResource(this, { cidr: '192.168.0.0./16' })
 */
VpcNetwork.DEFAULT_CIDR_RANGE = '10.0.0.0/16';
/**
 * The default subnet configuration
 *
 * 1 Public and 1 Private subnet per AZ evenly split
 */
VpcNetwork.DEFAULT_SUBNETS = [
    {
        subnetType: vpc_ref_1.SubnetType.Public,
        name: util_1.DEFAULT_SUBNET_NAME[vpc_ref_1.SubnetType.Public],
    },
    {
        subnetType: vpc_ref_1.SubnetType.Private,
        name: util_1.DEFAULT_SUBNET_NAME[vpc_ref_1.SubnetType.Private],
    }
];
exports.VpcNetwork = VpcNetwork;
const SUBNETTYPE_TAG = 'aws-cdk:subnet-type';
const SUBNETNAME_TAG = 'aws-cdk:subnet-name';
function subnetTypeTagValue(type) {
    switch (type) {
        case vpc_ref_1.SubnetType.Public: return 'Public';
        case vpc_ref_1.SubnetType.Private: return 'Private';
        case vpc_ref_1.SubnetType.Isolated: return 'Isolated';
    }
}
/**
 * Represents a new VPC subnet resource
 */
class VpcSubnet extends vpc_ref_1.VpcSubnetRef {
    constructor(parent, name, props) {
        super(parent, name);
        this.tags = new cdk.TagManager(this, { initialTags: props.tags });
        this.tags.setTag(NAME_TAG, this.path, { overwrite: false });
        this.availabilityZone = props.availabilityZone;
        const subnet = new ec2_generated_1.cloudformation.SubnetResource(this, 'Subnet', {
            vpcId: props.vpcId,
            cidrBlock: props.cidrBlock,
            availabilityZone: props.availabilityZone,
            mapPublicIpOnLaunch: props.mapPublicIpOnLaunch,
            tags: this.tags,
        });
        this.subnetId = subnet.subnetId;
        const table = new ec2_generated_1.cloudformation.RouteTableResource(this, 'RouteTable', {
            vpcId: props.vpcId,
            tags: new cdk.TagManager(this),
        });
        this.routeTableId = table.ref;
        // Associate the public route table for this subnet, to this subnet
        const routeAssoc = new ec2_generated_1.cloudformation.SubnetRouteTableAssociationResource(this, 'RouteTableAssociation', {
            subnetId: this.subnetId,
            routeTableId: table.ref
        });
        this.dependencyElements.push(subnet, table, routeAssoc);
    }
    addDefaultRouteToNAT(natGatewayId) {
        new ec2_generated_1.cloudformation.RouteResource(this, `DefaultRoute`, {
            routeTableId: this.routeTableId,
            destinationCidrBlock: '0.0.0.0/0',
            natGatewayId
        });
    }
    /**
     * Create a default route that points to a passed IGW, with a dependency
     * on the IGW's attachment to the VPC.
     */
    addDefaultRouteToIGW(gateway, gatewayAttachment) {
        const route = new ec2_generated_1.cloudformation.RouteResource(this, `DefaultRoute`, {
            routeTableId: this.routeTableId,
            destinationCidrBlock: '0.0.0.0/0',
            gatewayId: gateway.ref
        });
        route.addDependency(gatewayAttachment);
    }
}
exports.VpcSubnet = VpcSubnet;
/**
 * Represents a public VPC subnet resource
 */
class VpcPublicSubnet extends VpcSubnet {
    constructor(parent, name, props) {
        super(parent, name, props);
    }
    /**
     * Create a default route that points to a passed IGW, with a dependency
     * on the IGW's attachment to the VPC.
     */
    addDefaultIGWRouteEntry(gateway, gatewayAttachment) {
        this.addDefaultRouteToIGW(gateway, gatewayAttachment);
    }
    /**
     * Creates a new managed NAT gateway attached to this public subnet.
     * Also adds the EIP for the managed NAT.
     * @returns A ref to the the NAT Gateway ID
     */
    addNatGateway() {
        // Create a NAT Gateway in this public subnet
        const ngw = new ec2_generated_1.cloudformation.NatGatewayResource(this, `NATGateway`, {
            subnetId: this.subnetId,
            allocationId: new ec2_generated_1.cloudformation.EIPResource(this, `EIP`, {
                domain: 'vpc'
            }).eipAllocationId,
            tags: new cdk.TagManager(this),
        });
        return ngw.natGatewayId;
    }
}
exports.VpcPublicSubnet = VpcPublicSubnet;
/**
 * Represents a private VPC subnet resource
 */
class VpcPrivateSubnet extends VpcSubnet {
    constructor(parent, name, props) {
        super(parent, name, props);
    }
    /**
     * Adds an entry to this subnets route table that points to the passed NATGatwayId
     */
    addDefaultNatRouteEntry(natGatewayId) {
        this.addDefaultRouteToNAT(natGatewayId);
    }
}
exports.VpcPrivateSubnet = VpcPrivateSubnet;
function ifUndefined(value, defaultValue) {
    return value !== undefined ? value : defaultValue;
}
//# sourceMappingURL=data:application/json;base64,
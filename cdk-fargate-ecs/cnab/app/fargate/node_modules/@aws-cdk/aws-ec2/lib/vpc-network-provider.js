"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const cxapi = require("@aws-cdk/cx-api");
/**
 * Context provider to discover and import existing VPCs
 */
class VpcNetworkProvider {
    constructor(context, props) {
        const filter = props.tags || {};
        // We give special treatment to some tags
        if (props.vpcId) {
            filter['vpc-id'] = props.vpcId;
        }
        if (props.vpcName) {
            filter['tag:Name'] = props.vpcName;
        }
        if (props.isDefault !== undefined) {
            filter.isDefault = props.isDefault ? 'true' : 'false';
        }
        this.provider = new cdk.ContextProvider(context, cxapi.VPC_PROVIDER, { filter });
    }
    /**
     * Return the VPC import props matching the filter
     */
    get vpcProps() {
        const ret = this.provider.getValue(DUMMY_VPC_PROPS);
        return ret;
    }
}
exports.VpcNetworkProvider = VpcNetworkProvider;
/**
 * There are returned when the provider has not supplied props yet
 *
 * It's only used for testing and on the first run-through.
 */
const DUMMY_VPC_PROPS = {
    availabilityZones: ['dummy-1a', 'dummy-1b'],
    vpcId: 'vpc-12345',
    publicSubnetIds: ['s-12345', 's-67890'],
    privateSubnetIds: ['p-12345', 'p-67890'],
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjLW5ldHdvcmstcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2cGMtbmV0d29yay1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9DQUFxQztBQUNyQyx5Q0FBMEM7QUE2QzFDOztHQUVHO0FBQ0gsTUFBYSxrQkFBa0I7SUFHN0IsWUFBWSxPQUFzQixFQUFFLEtBQThCO1FBQ2hFLE1BQU0sTUFBTSxHQUE0QixLQUFLLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUV6RCx5Q0FBeUM7UUFDekMsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7U0FBRTtRQUNwRCxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7WUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztTQUFFO1FBQzFELElBQUksS0FBSyxDQUFDLFNBQVMsS0FBSyxTQUFTLEVBQUU7WUFDakMsTUFBTSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztTQUN2RDtRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsWUFBWSxFQUFFLEVBQUUsTUFBTSxFQUEyQixDQUFDLENBQUM7SUFDNUcsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxRQUFRO1FBQ2pCLE1BQU0sR0FBRyxHQUE2QixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUM5RSxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7Q0FDRjtBQXZCRCxnREF1QkM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxlQUFlLEdBQTZCO0lBQ2hELGlCQUFpQixFQUFFLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQztJQUMzQyxLQUFLLEVBQUUsV0FBVztJQUNsQixlQUFlLEVBQUUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDO0lBQ3ZDLGdCQUFnQixFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQztDQUN6QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NkaycpO1xuaW1wb3J0IGN4YXBpID0gcmVxdWlyZSgnQGF3cy1jZGsvY3gtYXBpJyk7XG5pbXBvcnQgeyBWcGNOZXR3b3JrUmVmUHJvcHMgfSBmcm9tICcuL3ZwYy1yZWYnO1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGxvb2tpbmcgdXAgYW4gZXhpc3RpbmcgVlBDLlxuICpcbiAqIFRoZSBjb21iaW5hdGlvbiBvZiBwcm9wZXJ0aWVzIG11c3Qgc3BlY2lmeSBmaWx0ZXIgZG93biB0byBleGFjdGx5IG9uZVxuICogbm9uLWRlZmF1bHQgVlBDLCBvdGhlcndpc2UgYW4gZXJyb3IgaXMgcmFpc2VkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFZwY05ldHdvcmtQcm92aWRlclByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgVlBDXG4gICAqXG4gICAqIElmIGdpdmVuLCB3aWxsIGltcG9ydCBleGFjdGx5IHRoaXMgVlBDLlxuICAgKlxuICAgKiBAZGVmYXVsdCBEb24ndCBmaWx0ZXIgb24gdnBjSWRcbiAgICovXG4gIHZwY0lkPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgVlBDXG4gICAqXG4gICAqIElmIGdpdmVuLCB3aWxsIGltcG9ydCB0aGUgVlBDIHdpdGggdGhpcyBuYW1lLlxuICAgKlxuICAgKiBAZGVmYXVsdCBEb24ndCBmaWx0ZXIgb24gdnBjTmFtZVxuICAgKi9cbiAgdnBjTmFtZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGFncyBvbiB0aGUgVlBDXG4gICAqXG4gICAqIFRoZSBWUEMgbXVzdCBoYXZlIGFsbCBvZiB0aGVzZSB0YWdzXG4gICAqXG4gICAqIEBkZWZhdWx0IERvbid0IGZpbHRlciBvbiB0YWdzXG4gICAqL1xuICB0YWdzPzoge1trZXk6IHN0cmluZ106IHN0cmluZ307XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gbWF0Y2ggdGhlIGRlZmF1bHQgVlBDXG4gICAqXG4gICAqIEBkZWZhdWx0IERvbid0IGNhcmUgd2hldGhlciB3ZSByZXR1cm4gdGhlIGRlZmF1bHQgVlBDXG4gICAqL1xuICBpc0RlZmF1bHQ/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIENvbnRleHQgcHJvdmlkZXIgdG8gZGlzY292ZXIgYW5kIGltcG9ydCBleGlzdGluZyBWUENzXG4gKi9cbmV4cG9ydCBjbGFzcyBWcGNOZXR3b3JrUHJvdmlkZXIge1xuICBwcml2YXRlIHByb3ZpZGVyOiBjZGsuQ29udGV4dFByb3ZpZGVyO1xuXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQ6IGNkay5Db25zdHJ1Y3QsIHByb3BzOiBWcGNOZXR3b3JrUHJvdmlkZXJQcm9wcykge1xuICAgIGNvbnN0IGZpbHRlcjoge1trZXk6IHN0cmluZ106IHN0cmluZ30gPSBwcm9wcy50YWdzIHx8IHt9O1xuXG4gICAgLy8gV2UgZ2l2ZSBzcGVjaWFsIHRyZWF0bWVudCB0byBzb21lIHRhZ3NcbiAgICBpZiAocHJvcHMudnBjSWQpIHsgZmlsdGVyWyd2cGMtaWQnXSA9IHByb3BzLnZwY0lkOyB9XG4gICAgaWYgKHByb3BzLnZwY05hbWUpIHsgZmlsdGVyWyd0YWc6TmFtZSddID0gcHJvcHMudnBjTmFtZTsgfVxuICAgIGlmIChwcm9wcy5pc0RlZmF1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZmlsdGVyLmlzRGVmYXVsdCA9IHByb3BzLmlzRGVmYXVsdCA/ICd0cnVlJyA6ICdmYWxzZSc7XG4gICAgfVxuXG4gICAgdGhpcy5wcm92aWRlciA9IG5ldyBjZGsuQ29udGV4dFByb3ZpZGVyKGNvbnRleHQsIGN4YXBpLlZQQ19QUk9WSURFUiwgeyBmaWx0ZXIgfSBhcyBjeGFwaS5WcGNDb250ZXh0UXVlcnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgVlBDIGltcG9ydCBwcm9wcyBtYXRjaGluZyB0aGUgZmlsdGVyXG4gICAqL1xuICBwdWJsaWMgZ2V0IHZwY1Byb3BzKCk6IFZwY05ldHdvcmtSZWZQcm9wcyB7XG4gICAgY29uc3QgcmV0OiBjeGFwaS5WcGNDb250ZXh0UmVzcG9uc2UgPSB0aGlzLnByb3ZpZGVyLmdldFZhbHVlKERVTU1ZX1ZQQ19QUk9QUyk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxufVxuXG4vKipcbiAqIFRoZXJlIGFyZSByZXR1cm5lZCB3aGVuIHRoZSBwcm92aWRlciBoYXMgbm90IHN1cHBsaWVkIHByb3BzIHlldFxuICpcbiAqIEl0J3Mgb25seSB1c2VkIGZvciB0ZXN0aW5nIGFuZCBvbiB0aGUgZmlyc3QgcnVuLXRocm91Z2guXG4gKi9cbmNvbnN0IERVTU1ZX1ZQQ19QUk9QUzogY3hhcGkuVnBjQ29udGV4dFJlc3BvbnNlID0ge1xuICBhdmFpbGFiaWxpdHlab25lczogWydkdW1teS0xYScsICdkdW1teS0xYiddLFxuICB2cGNJZDogJ3ZwYy0xMjM0NScsXG4gIHB1YmxpY1N1Ym5ldElkczogWydzLTEyMzQ1JywgJ3MtNjc4OTAnXSxcbiAgcHJpdmF0ZVN1Ym5ldElkczogWydwLTEyMzQ1JywgJ3AtNjc4OTAnXSxcbn07XG4iXX0=
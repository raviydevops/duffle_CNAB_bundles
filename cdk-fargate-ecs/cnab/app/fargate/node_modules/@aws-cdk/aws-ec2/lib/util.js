"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const vpc_ref_1 = require("./vpc-ref");
/**
 * Turn an arbitrary string into one that can be used as a CloudFormation identifier by stripping special characters
 *
 * (At the moment, no efforts are taken to prevent collissions, but we can add that later when it becomes necessary).
 */
function slugify(x) {
    return x.replace(/[^a-zA-Z0-9]/g, '');
}
exports.slugify = slugify;
/**
 * The default names for every subnet type
 */
exports.DEFAULT_SUBNET_NAME = {
    [vpc_ref_1.SubnetType.Public]: 'Public',
    [vpc_ref_1.SubnetType.Private]: 'Private',
    [vpc_ref_1.SubnetType.Isolated]: 'Isolated',
};
/**
 * Return a subnet name from its construct ID
 *
 * All subnet names look like NAME <> "Subnet" <> INDEX
 */
function subnetName(subnet) {
    return subnet.id.replace(/Subnet\d+$/, '');
}
exports.subnetName = subnetName;
/**
 * Make the subnet construct ID from a name and number
 */
function subnetId(name, i) {
    return `${name}Subnet${i + 1}`;
}
exports.subnetId = subnetId;
/**
 * Helper class to export/import groups of subnets
 */
class ExportSubnetGroup {
    constructor(parent, exportName, subnets, type, azs) {
        this.subnets = subnets;
        this.type = type;
        this.azs = azs;
        this.groups = subnets.length / azs;
        // ASSERTION
        if (Math.floor(this.groups) !== this.groups) {
            throw new Error(`Number of subnets (${subnets.length}) must be a multiple of number of availability zones (${azs})`);
        }
        this.ids = this.exportIds(parent, exportName);
        this.names = this.exportNames();
    }
    exportIds(parent, name) {
        if (this.subnets.length === 0) {
            return undefined;
        }
        return new cdk.StringListOutput(parent, name, { values: this.subnets.map(s => s.subnetId) }).makeImportValues().map(x => x.toString());
    }
    /**
     * Return the list of subnet names if they're not equal to the default
     */
    exportNames() {
        if (this.subnets.length === 0) {
            return undefined;
        }
        const netNames = this.subnets.map(subnetName);
        // Do some assertion that the 'netNames' array is laid out like this:
        //
        // [ INGRESS, INGRESS, INGRESS, EGRESS, EGRESS, EGRESS, ... ]
        for (let i = 0; i < netNames.length; i++) {
            const k = Math.floor(i / this.azs);
            if (netNames[i] !== netNames[k * this.azs]) {
                throw new Error(`Subnets must be grouped by name, got: ${JSON.stringify(netNames)}`);
            }
        }
        // Splat down to [ INGRESS, EGRESS, ... ]
        const groupNames = range(this.groups).map(i => netNames[i * this.azs]);
        if (groupNames.length === 1 && groupNames[0] === exports.DEFAULT_SUBNET_NAME[this.type]) {
            return undefined;
        }
        return groupNames;
    }
}
exports.ExportSubnetGroup = ExportSubnetGroup;
class ImportSubnetGroup {
    constructor(subnetIds, names, type, availabilityZones, idField, nameField) {
        this.availabilityZones = availabilityZones;
        this.subnetIds = subnetIds || [];
        this.groups = this.subnetIds.length / this.availabilityZones.length;
        if (Math.floor(this.groups) !== this.groups) {
            // tslint:disable-next-line:max-line-length
            throw new Error(`Amount of ${idField} (${this.subnetIds.length}) must be a multiple of availability zones (${this.availabilityZones.length}).`);
        }
        this.names = this.normalizeNames(names, exports.DEFAULT_SUBNET_NAME[type], nameField);
    }
    import(parent) {
        return range(this.subnetIds.length).map(i => {
            const k = Math.floor(i / this.availabilityZones.length);
            return vpc_ref_1.VpcSubnetRef.import(parent, subnetId(this.names[k], i), {
                availabilityZone: this.pickAZ(i),
                subnetId: this.subnetIds[i]
            });
        });
    }
    /**
     * Return a list with a name for every subnet
     */
    normalizeNames(names, defaultName, fieldName) {
        // If not given, return default
        if (names === undefined || names.length === 0) {
            return [defaultName];
        }
        // If given, must match given subnets
        if (names.length !== this.groups) {
            throw new Error(`${fieldName} must have an entry for every corresponding subnet group, got: ${JSON.stringify(names)}`);
        }
        return names;
    }
    /**
     * Return the i'th AZ
     */
    pickAZ(i) {
        return this.availabilityZones[i % this.availabilityZones.length];
    }
}
exports.ImportSubnetGroup = ImportSubnetGroup;
/**
 * Generate the list of numbers of [0..n)
 */
function range(n) {
    const ret = [];
    for (let i = 0; i < n; i++) {
        ret.push(i);
    }
    return ret;
}
exports.range = range;
//# sourceMappingURL=data:application/json;base64,
"use strict";
const assert_1 = require("@aws-cdk/assert");
const cdk_1 = require("@aws-cdk/cdk");
const lib_1 = require("../lib");
function getTestStack() {
    return new cdk_1.Stack(undefined, 'TestStack', { env: { account: '123456789012', region: 'us-east-1' } });
}
/**
 * Do a complete import/export test, return the imported VPC
 */
function doImportExportTest(constructFn) {
    // GIVEN
    const stack1 = getTestStack();
    const stack2 = getTestStack();
    const vpc1 = constructFn(stack1);
    // WHEN
    return lib_1.VpcNetwork.import(stack2, 'VPC2', vpc1.export());
}
function toCfnTags(tags) {
    return Object.keys(tags).map(key => {
        return { Key: key, Value: tags[key] };
    });
}
function hasTags(expectedTags) {
    return (props) => {
        try {
            const tags = props.Tags;
            const actualTags = tags.filter((tag) => {
                for (const expectedTag of expectedTags) {
                    if (assert_1.isSuperObject(expectedTag, tag)) {
                        return true;
                    }
                    else {
                        continue;
                    }
                }
                // no values in array so expecting empty
                return false;
            });
            return actualTags.length === expectedTags.length;
        }
        catch (e) {
            // tslint:disable-next-line:no-console
            console.error('Invalid Tags array in ', props);
            throw e;
        }
    };
}
module.exports = {
    "When creating a VPC": {
        "with the default CIDR range": {
            "vpc.vpcId returns a token to the VPC ID"(test) {
                const stack = getTestStack();
                const vpc = new lib_1.VpcNetwork(stack, 'TheVPC');
                test.deepEqual(cdk_1.resolve(vpc.vpcId), { Ref: 'TheVPC92636AB0' });
                test.done();
            },
            "it uses the correct network range"(test) {
                const stack = getTestStack();
                new lib_1.VpcNetwork(stack, 'TheVPC');
                assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::VPC', {
                    CidrBlock: lib_1.VpcNetwork.DEFAULT_CIDR_RANGE,
                    EnableDnsHostnames: true,
                    EnableDnsSupport: true,
                    InstanceTenancy: lib_1.DefaultInstanceTenancy.Default,
                }));
                test.done();
            },
            'the Name tag is defaulted to path'(test) {
                const stack = getTestStack();
                new lib_1.VpcNetwork(stack, 'TheVPC');
                assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::VPC', hasTags([{ Key: 'Name', Value: 'TheVPC' }])));
                test.done();
            },
        },
        "with all of the properties set, it successfully sets the correct VPC properties"(test) {
            const stack = getTestStack();
            const tags = {
                first: 'foo',
                second: 'bar',
                third: 'barz',
            };
            new lib_1.VpcNetwork(stack, 'TheVPC', {
                cidr: "192.168.0.0/16",
                enableDnsHostnames: false,
                enableDnsSupport: false,
                defaultInstanceTenancy: lib_1.DefaultInstanceTenancy.Dedicated,
                tags,
            });
            const cfnTags = toCfnTags(tags);
            assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::VPC', {
                CidrBlock: '192.168.0.0/16',
                EnableDnsHostnames: false,
                EnableDnsSupport: false,
                InstanceTenancy: lib_1.DefaultInstanceTenancy.Dedicated,
            }));
            assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::VPC', hasTags(cfnTags)));
            test.done();
        },
        "contains the correct number of subnets"(test) {
            const stack = getTestStack();
            const vpc = new lib_1.VpcNetwork(stack, 'TheVPC');
            const zones = new cdk_1.AvailabilityZoneProvider(stack).availabilityZones.length;
            test.equal(vpc.publicSubnets.length, zones);
            test.equal(vpc.privateSubnets.length, zones);
            test.deepEqual(cdk_1.resolve(vpc.vpcId), { Ref: 'TheVPC92636AB0' });
            test.done();
        },
        "with only isolated subnets, the VPC should not contain an IGW or NAT Gateways"(test) {
            const stack = getTestStack();
            new lib_1.VpcNetwork(stack, 'TheVPC', {
                subnetConfiguration: [
                    {
                        subnetType: lib_1.SubnetType.Isolated,
                        name: 'Isolated',
                    }
                ]
            });
            assert_1.expect(stack).notTo(assert_1.haveResource("AWS::EC2::InternetGateway"));
            assert_1.expect(stack).notTo(assert_1.haveResource("AWS::EC2::NatGateway"));
            assert_1.expect(stack).to(assert_1.haveResource("AWS::EC2::Subnet", {
                MapPublicIpOnLaunch: false
            }));
            test.done();
        },
        "with no private subnets, the VPC should have an IGW but no NAT Gateways"(test) {
            const stack = getTestStack();
            new lib_1.VpcNetwork(stack, 'TheVPC', {
                subnetConfiguration: [
                    {
                        subnetType: lib_1.SubnetType.Public,
                        name: 'Public',
                    },
                    {
                        subnetType: lib_1.SubnetType.Isolated,
                        name: 'Isolated',
                    }
                ]
            });
            assert_1.expect(stack).to(assert_1.countResources('AWS::EC2::InternetGateway', 1));
            assert_1.expect(stack).notTo(assert_1.haveResource("AWS::EC2::NatGateway"));
            test.done();
        },
        "with no subnets defined, the VPC should have an IGW, and a NAT Gateway per AZ"(test) {
            const stack = getTestStack();
            const zones = new cdk_1.AvailabilityZoneProvider(stack).availabilityZones.length;
            new lib_1.VpcNetwork(stack, 'TheVPC', {});
            assert_1.expect(stack).to(assert_1.countResources("AWS::EC2::InternetGateway", 1));
            assert_1.expect(stack).to(assert_1.countResources("AWS::EC2::NatGateway", zones));
            test.done();
        },
        "with custom subents, the VPC should have the right number of subnets, an IGW, and a NAT Gateway per AZ"(test) {
            const stack = getTestStack();
            const zones = new cdk_1.AvailabilityZoneProvider(stack).availabilityZones.length;
            new lib_1.VpcNetwork(stack, 'TheVPC', {
                cidr: '10.0.0.0/21',
                subnetConfiguration: [
                    {
                        cidrMask: 24,
                        name: 'ingress',
                        subnetType: lib_1.SubnetType.Public,
                        tags: {
                            type: 'Public',
                            init: 'No',
                        },
                    },
                    {
                        cidrMask: 24,
                        name: 'application',
                        subnetType: lib_1.SubnetType.Private,
                    },
                    {
                        cidrMask: 28,
                        name: 'rds',
                        subnetType: lib_1.SubnetType.Isolated,
                    }
                ],
                maxAZs: 3
            });
            assert_1.expect(stack).to(assert_1.countResources("AWS::EC2::InternetGateway", 1));
            assert_1.expect(stack).to(assert_1.countResources("AWS::EC2::NatGateway", zones));
            assert_1.expect(stack).to(assert_1.countResources("AWS::EC2::Subnet", 9));
            for (let i = 0; i < 6; i++) {
                assert_1.expect(stack).to(assert_1.haveResource("AWS::EC2::Subnet", {
                    CidrBlock: `10.0.${i}.0/24`
                }));
            }
            for (let i = 0; i < 3; i++) {
                assert_1.expect(stack).to(assert_1.haveResource("AWS::EC2::Subnet", {
                    CidrBlock: `10.0.6.${i * 16}/28`
                }));
            }
            assert_1.expect(stack).to(assert_1.haveResource("AWS::EC2::Subnet", hasTags([
                { Key: 'type', Value: 'Public' },
                { Key: 'init', Value: 'No' },
            ])));
            test.done();
        },
        "with custom subents and natGateways = 2 there should be only two NATGW"(test) {
            const stack = getTestStack();
            new lib_1.VpcNetwork(stack, 'TheVPC', {
                cidr: '10.0.0.0/21',
                natGateways: 2,
                subnetConfiguration: [
                    {
                        cidrMask: 24,
                        name: 'ingress',
                        subnetType: lib_1.SubnetType.Public,
                    },
                    {
                        cidrMask: 24,
                        name: 'application',
                        subnetType: lib_1.SubnetType.Private,
                    },
                    {
                        cidrMask: 28,
                        name: 'rds',
                        subnetType: lib_1.SubnetType.Isolated,
                    }
                ],
                maxAZs: 3
            });
            assert_1.expect(stack).to(assert_1.countResources("AWS::EC2::InternetGateway", 1));
            assert_1.expect(stack).to(assert_1.countResources("AWS::EC2::NatGateway", 2));
            assert_1.expect(stack).to(assert_1.countResources("AWS::EC2::Subnet", 9));
            for (let i = 0; i < 6; i++) {
                assert_1.expect(stack).to(assert_1.haveResource("AWS::EC2::Subnet", {
                    CidrBlock: `10.0.${i}.0/24`
                }));
            }
            for (let i = 0; i < 3; i++) {
                assert_1.expect(stack).to(assert_1.haveResource("AWS::EC2::Subnet", {
                    CidrBlock: `10.0.6.${i * 16}/28`
                }));
            }
            test.done();
        },
        "with enableDnsHostnames enabled but enableDnsSupport disabled, should throw an Error"(test) {
            const stack = getTestStack();
            test.throws(() => new lib_1.VpcNetwork(stack, 'TheVPC', {
                enableDnsHostnames: true,
                enableDnsSupport: false
            }));
            test.done();
        },
        "with public subnets MapPublicIpOnLaunch is true"(test) {
            const stack = getTestStack();
            new lib_1.VpcNetwork(stack, 'VPC', {
                maxAZs: 1,
                subnetConfiguration: [
                    {
                        cidrMask: 24,
                        name: 'ingress',
                        subnetType: lib_1.SubnetType.Public,
                    }
                ],
            });
            assert_1.expect(stack).to(assert_1.countResources("AWS::EC2::Subnet", 1));
            assert_1.expect(stack).notTo(assert_1.haveResource("AWS::EC2::NatGateway"));
            assert_1.expect(stack).to(assert_1.haveResource("AWS::EC2::Subnet", {
                MapPublicIpOnLaunch: true
            }));
            test.done();
        },
        "with maxAZs set to 2"(test) {
            const stack = getTestStack();
            new lib_1.VpcNetwork(stack, 'VPC', { maxAZs: 2 });
            assert_1.expect(stack).to(assert_1.countResources("AWS::EC2::Subnet", 4));
            assert_1.expect(stack).to(assert_1.countResources("AWS::EC2::Route", 4));
            for (let i = 0; i < 4; i++) {
                assert_1.expect(stack).to(assert_1.haveResource("AWS::EC2::Subnet", {
                    CidrBlock: `10.0.${i * 64}.0/18`
                }));
            }
            assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::EC2::Route", {
                DestinationCidrBlock: '0.0.0.0/0',
                NatGatewayId: {},
            }));
            test.done();
        },
        "with natGateway set to 1"(test) {
            const stack = getTestStack();
            new lib_1.VpcNetwork(stack, 'VPC', {
                natGateways: 1,
            });
            assert_1.expect(stack).to(assert_1.countResources("AWS::EC2::Subnet", 6));
            assert_1.expect(stack).to(assert_1.countResources("AWS::EC2::Route", 6));
            assert_1.expect(stack).to(assert_1.countResources("AWS::EC2::NatGateway", 1));
            assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::EC2::Route", {
                DestinationCidrBlock: '0.0.0.0/0',
                NatGatewayId: {},
            }));
            test.done();
        },
        'with natGateway subnets defined'(test) {
            const stack = getTestStack();
            new lib_1.VpcNetwork(stack, 'VPC', {
                subnetConfiguration: [
                    {
                        cidrMask: 24,
                        name: 'ingress',
                        subnetType: lib_1.SubnetType.Public,
                    },
                    {
                        cidrMask: 24,
                        name: 'egress',
                        subnetType: lib_1.SubnetType.Public,
                    },
                    {
                        cidrMask: 24,
                        name: 'private',
                        subnetType: lib_1.SubnetType.Private,
                    },
                ],
                natGatewayPlacement: {
                    subnetName: 'egress'
                },
            });
            assert_1.expect(stack).to(assert_1.countResources("AWS::EC2::NatGateway", 3));
            for (let i = 1; i < 4; i++) {
                assert_1.expect(stack).to(assert_1.haveResource("AWS::EC2::NatGateway", {
                    Tags: [
                        {
                            Key: 'Name',
                            Value: `VPC/egressSubnet${i}`,
                        }
                    ]
                }));
            }
            test.done();
        },
        'with mis-matched nat and subnet configs it throws'(test) {
            const stack = getTestStack();
            test.throws(() => new lib_1.VpcNetwork(stack, 'VPC', {
                subnetConfiguration: [
                    {
                        cidrMask: 24,
                        name: 'ingress',
                        subnetType: lib_1.SubnetType.Public,
                    },
                    {
                        cidrMask: 24,
                        name: 'private',
                        subnetType: lib_1.SubnetType.Private,
                    },
                ],
                natGatewayPlacement: {
                    subnetName: 'notthere',
                },
            }));
            test.done();
        },
    },
    "When creating a VPC with a custom CIDR range": {
        "vpc.vpcCidrBlock is the correct network range"(test) {
            const stack = getTestStack();
            new lib_1.VpcNetwork(stack, 'TheVPC', { cidr: '192.168.0.0/16' });
            assert_1.expect(stack).to(assert_1.haveResource("AWS::EC2::VPC", {
                CidrBlock: '192.168.0.0/16'
            }));
            test.done();
        }
    },
    'When tagging': {
        'VPC propagated tags will be on subnet, IGW, routetables, NATGW'(test) {
            const stack = getTestStack();
            const tags = {
                VpcType: 'Good',
            };
            const noPropTags = {
                BusinessUnit: 'Marketing',
            };
            const allTags = Object.assign({}, tags, noPropTags);
            const vpc = new lib_1.VpcNetwork(stack, 'TheVPC', { tags: allTags });
            // overwrite to set propagate
            vpc.tags.setTag('BusinessUnit', 'Marketing', { propagate: false });
            assert_1.expect(stack).to(assert_1.haveResource("AWS::EC2::VPC", hasTags(toCfnTags(allTags))));
            const taggables = ['Subnet', 'InternetGateway', 'NatGateway', 'RouteTable'];
            const propTags = toCfnTags(tags);
            const noProp = toCfnTags(noPropTags);
            for (const resource of taggables) {
                assert_1.expect(stack).to(assert_1.haveResource(`AWS::EC2::${resource}`, hasTags(propTags)));
                assert_1.expect(stack).notTo(assert_1.haveResource(`AWS::EC2::${resource}`, hasTags(noProp)));
            }
            test.done();
        },
        'Subnet Name will propagate to route tables and NATGW'(test) {
            const stack = getTestStack();
            const vpc = new lib_1.VpcNetwork(stack, 'TheVPC');
            for (const subnet of vpc.publicSubnets) {
                const tag = { Key: 'Name', Value: subnet.path };
                assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::NatGateway', hasTags([tag])));
                assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::RouteTable', hasTags([tag])));
            }
            for (const subnet of vpc.privateSubnets) {
                const tag = { Key: 'Name', Value: subnet.path };
                assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::RouteTable', hasTags([tag])));
            }
            test.done();
        },
        'Tags can be added after the Vpc is created with `vpc.tags.setTag(...)`'(test) {
            const stack = getTestStack();
            const vpc = new lib_1.VpcNetwork(stack, 'TheVPC');
            const tag = { Key: 'Late', Value: 'Adder' };
            assert_1.expect(stack).notTo(assert_1.haveResource('AWS::EC2::VPC', hasTags([tag])));
            vpc.tags.setTag(tag.Key, tag.Value);
            assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::VPC', hasTags([tag])));
            test.done();
        },
    },
    'can select public subnets'(test) {
        // GIVEN
        const stack = getTestStack();
        const vpc = new lib_1.VpcNetwork(stack, 'VPC');
        // WHEN
        const nets = vpc.subnets({ subnetsToUse: lib_1.SubnetType.Public });
        // THEN
        test.deepEqual(nets, vpc.publicSubnets);
        test.done();
    },
    'can select isolated subnets'(test) {
        // GIVEN
        const stack = getTestStack();
        const vpc = new lib_1.VpcNetwork(stack, 'VPC', {
            subnetConfiguration: [
                { subnetType: lib_1.SubnetType.Private, name: 'Private' },
                { subnetType: lib_1.SubnetType.Isolated, name: 'Isolated' },
            ]
        });
        // WHEN
        const nets = vpc.subnets({ subnetsToUse: lib_1.SubnetType.Isolated });
        // THEN
        test.deepEqual(nets, vpc.isolatedSubnets);
        test.done();
    },
    'can select subnets by name'(test) {
        // GIVEN
        const stack = getTestStack();
        const vpc = new lib_1.VpcNetwork(stack, 'VPC', {
            subnetConfiguration: [
                { subnetType: lib_1.SubnetType.Private, name: 'DontTalkToMe' },
                { subnetType: lib_1.SubnetType.Isolated, name: 'DontTalkAtAll' },
            ]
        });
        // WHEN
        const nets = vpc.subnets({ subnetName: 'DontTalkToMe' });
        // THEN
        test.deepEqual(nets, vpc.privateSubnets);
        test.done();
    },
    'export/import': {
        'simple VPC'(test) {
            // WHEN
            const vpc2 = doImportExportTest(stack => {
                return new lib_1.VpcNetwork(stack, 'TheVPC');
            });
            // THEN
            test.deepEqual(cdk_1.resolve(vpc2.vpcId), {
                'Fn::ImportValue': 'TestStack:TheVPCVpcIdD346CDBA'
            });
            test.done();
        },
        'multiple subnets of the same type'(test) {
            // WHEN
            const imported = doImportExportTest(stack => {
                return new lib_1.VpcNetwork(stack, 'TheVPC', {
                    subnetConfiguration: [
                        { name: 'Ingress', subnetType: lib_1.SubnetType.Public },
                        { name: 'Egress', subnetType: lib_1.SubnetType.Public },
                    ]
                });
            });
            // THEN
            test.deepEqual(cdk_1.resolve(imported.vpcId), {
                'Fn::ImportValue': 'TestStack:TheVPCVpcIdD346CDBA'
            });
            test.equal(6, imported.publicSubnets.length);
            for (let i = 0; i < 3; i++) {
                test.equal(true, imported.publicSubnets[i].id.startsWith('Ingress'), `${imported.publicSubnets[i].id} does not start with "Ingress"`);
            }
            for (let i = 3; i < 6; i++) {
                test.equal(true, imported.publicSubnets[i].id.startsWith('Egress'), `${imported.publicSubnets[i].id} does not start with "Egress"`);
            }
            test.done();
        },
        'can select isolated subnets by type'(test) {
            // GIVEN
            const importedVpc = doImportExportTest(stack => {
                return new lib_1.VpcNetwork(stack, 'TheVPC', {
                    subnetConfiguration: [
                        { subnetType: lib_1.SubnetType.Private, name: 'Private' },
                        { subnetType: lib_1.SubnetType.Isolated, name: 'Isolated' },
                    ]
                });
            });
            // WHEN
            const nets = importedVpc.subnets({ subnetsToUse: lib_1.SubnetType.Isolated });
            // THEN
            test.equal(3, importedVpc.isolatedSubnets.length);
            test.deepEqual(nets, importedVpc.isolatedSubnets);
            test.done();
        },
        'can select isolated subnets by name'(test) {
            // Do the test with both default name and custom name
            for (const isolatedName of ['Isolated', 'LeaveMeAlone']) {
                // GIVEN
                const importedVpc = doImportExportTest(stack => {
                    return new lib_1.VpcNetwork(stack, 'TheVPC', {
                        subnetConfiguration: [
                            { subnetType: lib_1.SubnetType.Private, name: 'Private' },
                            { subnetType: lib_1.SubnetType.Isolated, name: isolatedName },
                        ]
                    });
                });
                // WHEN
                const nets = importedVpc.subnets({ subnetName: isolatedName });
                // THEN
                test.equal(3, importedVpc.isolatedSubnets.length);
                test.deepEqual(nets, importedVpc.isolatedSubnets);
            }
            test.done();
        },
    },
};
//# sourceMappingURL=data:application/json;base64,
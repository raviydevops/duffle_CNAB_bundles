"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const s3 = require("@aws-cdk/aws-s3");
const cdk = require("@aws-cdk/cdk");
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs");
const path = require("path");
/**
 * Defines the way an asset is packaged before it is uploaded to S3.
 */
var AssetPackaging;
(function (AssetPackaging) {
    /**
     * Path refers to a directory on disk, the contents of the directory is
     * archived into a .zip.
     */
    AssetPackaging["ZipDirectory"] = "zip";
    /**
     * Path refers to a single file on disk. The file is uploaded as-is.
     */
    AssetPackaging["File"] = "file";
})(AssetPackaging = exports.AssetPackaging || (exports.AssetPackaging = {}));
/**
 * An asset represents a local file or directory, which is automatically uploaded to S3
 * and then can be referenced within a CDK application.
 */
class Asset extends cdk.Construct {
    constructor(parent, id, props) {
        super(parent, id);
        // resolve full path
        this.assetPath = path.resolve(props.path);
        // sets isZipArchive based on the type of packaging and file extension
        const allowedExtensions = ['.jar', '.zip'];
        this.isZipArchive = props.packaging === AssetPackaging.ZipDirectory
            ? true
            : allowedExtensions.some(ext => this.assetPath.toLowerCase().endsWith(ext));
        validateAssetOnDisk(this.assetPath, props.packaging);
        // add parameters for s3 bucket and s3 key. those will be set by
        // the toolkit or by CI/CD when the stack is deployed and will include
        // the name of the bucket and the S3 key where the code lives.
        const bucketParam = new cdk.Parameter(this, 'S3Bucket', {
            type: 'String',
            description: `S3 bucket for asset "${this.path}"`,
        });
        const keyParam = new cdk.Parameter(this, 'S3VersionKey', {
            type: 'String',
            description: `S3 key for asset version "${this.path}"`
        });
        this.s3BucketName = bucketParam.value.toString();
        this.s3Prefix = new cdk.FnSelect(0, new cdk.FnSplit(cxapi.ASSET_PREFIX_SEPARATOR, keyParam.value)).toString();
        const s3Filename = new cdk.FnSelect(1, new cdk.FnSplit(cxapi.ASSET_PREFIX_SEPARATOR, keyParam.value)).toString();
        this.s3ObjectKey = `${this.s3Prefix}${s3Filename}`;
        this.bucket = s3.BucketRef.import(this, 'AssetBucket', {
            bucketName: this.s3BucketName
        });
        // form the s3 URL of the object key
        this.s3Url = this.bucket.urlForObject(this.s3ObjectKey);
        // attach metadata to the lambda function which includes information
        // for tooling to be able to package and upload a directory to the
        // s3 bucket and plug in the bucket name and key in the correct
        // parameters.
        const asset = {
            path: this.assetPath,
            id: this.uniqueId,
            packaging: props.packaging,
            s3BucketParameter: bucketParam.logicalId,
            s3KeyParameter: keyParam.logicalId,
        };
        this.addMetadata(cxapi.ASSET_METADATA, asset);
        for (const reader of (props.readers || [])) {
            this.grantRead(reader);
        }
    }
    /**
     * Grants read permissions to the principal on the asset's S3 object.
     */
    grantRead(principal) {
        // We give permissions on all files with the same prefix. Presumably
        // different versions of the same file will have the same prefix
        // and we don't want to accidentally revoke permission on old versions
        // when deploying a new version.
        this.bucket.grantRead(principal, `${this.s3Prefix}*`);
    }
}
exports.Asset = Asset;
/**
 * An asset that represents a file on disk.
 */
class FileAsset extends Asset {
    constructor(parent, id, props) {
        super(parent, id, Object.assign({ packaging: AssetPackaging.File }, props));
    }
}
exports.FileAsset = FileAsset;
/**
 * An asset that represents a ZIP archive of a directory on disk.
 */
class ZipDirectoryAsset extends Asset {
    constructor(parent, id, props) {
        super(parent, id, Object.assign({ packaging: AssetPackaging.ZipDirectory }, props));
    }
}
exports.ZipDirectoryAsset = ZipDirectoryAsset;
function validateAssetOnDisk(assetPath, packaging) {
    if (!fs.existsSync(assetPath)) {
        throw new Error(`Cannot find asset at ${assetPath}`);
    }
    switch (packaging) {
        case AssetPackaging.ZipDirectory:
            if (!fs.statSync(assetPath).isDirectory()) {
                throw new Error(`${assetPath} is expected to be a directory when asset packaging is 'zip'`);
            }
            break;
        case AssetPackaging.File:
            if (!fs.statSync(assetPath).isFile()) {
                throw new Error(`${assetPath} is expected to be a regular file when asset packaging is 'file'`);
            }
            break;
        default:
            throw new Error(`Unsupported asset packaging format: ${packaging}`);
    }
}
//# sourceMappingURL=data:application/json;base64,
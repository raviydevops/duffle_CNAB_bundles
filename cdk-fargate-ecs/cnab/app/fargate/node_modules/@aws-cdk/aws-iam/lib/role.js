"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_1 = require("@aws-cdk/cdk");
const iam_generated_1 = require("./iam.generated");
const policy_1 = require("./policy");
const policy_document_1 = require("./policy-document");
const util_1 = require("./util");
/**
 * IAM Role
 *
 * Defines an IAM role. The role is created with an assume policy document associated with
 * the specified AWS service principal defined in `serviceAssumeRole`.
 */
class Role extends cdk_1.Construct {
    constructor(parent, name, props) {
        super(parent, name);
        this.attachedPolicies = new util_1.AttachedPolicies();
        this.assumeRolePolicy = createAssumeRolePolicy(props.assumedBy);
        this.managedPolicyArns = props.managedPolicyArns || [];
        validateMaxSessionDuration(props.maxSessionDurationSec);
        const role = new iam_generated_1.cloudformation.RoleResource(this, 'Resource', {
            assumeRolePolicyDocument: this.assumeRolePolicy,
            managedPolicyArns: util_1.undefinedIfEmpty(() => this.managedPolicyArns),
            policies: _flatten(props.inlinePolicies),
            path: props.path,
            roleName: props.roleName,
            maxSessionDuration: props.maxSessionDurationSec,
        });
        this.roleArn = role.roleArn;
        this.principal = new policy_document_1.ArnPrincipal(this.roleArn);
        this.roleName = role.roleName;
        this.dependencyElements = [role];
        function _flatten(policies) {
            if (policies == null || Object.keys(policies).length === 0) {
                return undefined;
            }
            const result = new Array();
            for (const policyName of Object.keys(policies)) {
                const policyDocument = policies[policyName];
                result.push({ policyName, policyDocument });
            }
            return result;
        }
    }
    /**
     * Import a role that already exists
     */
    static import(parent, id, props) {
        return new ImportedRole(parent, id, props);
    }
    /**
     * Adds a permission to the role's default policy document.
     * If there is no default policy attached to this role, it will be created.
     * @param permission The permission statement to add to the policy document
     */
    addToPolicy(statement) {
        if (!this.defaultPolicy) {
            this.defaultPolicy = new policy_1.Policy(this, 'DefaultPolicy');
            this.attachInlinePolicy(this.defaultPolicy);
            this.dependencyElements.push(this.defaultPolicy);
        }
        this.defaultPolicy.addStatement(statement);
    }
    /**
     * Attaches a managed policy to this role.
     * @param arn The ARN of the managed policy to attach.
     */
    attachManagedPolicy(arn) {
        this.managedPolicyArns.push(arn);
    }
    /**
     * Attaches a policy to this role.
     * @param policy The policy to attach
     */
    attachInlinePolicy(policy) {
        this.attachedPolicies.attach(policy);
        policy.attachToRole(this);
    }
}
exports.Role = Role;
function createAssumeRolePolicy(principal) {
    return new policy_document_1.PolicyDocument()
        .addStatement(new policy_document_1.PolicyStatement()
        .addPrincipal(principal)
        .addAction(principal.assumeRoleAction));
}
function validateMaxSessionDuration(duration) {
    if (duration === undefined) {
        return;
    }
    if (duration < 3600 || duration > 43200) {
        throw new Error(`maxSessionDuration is set to ${duration}, but must be >= 3600sec (1hr) and <= 43200sec (12hrs)`);
    }
}
/**
 * A role that already exists
 */
class ImportedRole extends cdk_1.Construct {
    constructor(parent, id, props) {
        super(parent, id);
        this.dependencyElements = [];
        this.roleArn = props.roleArn;
        this.principal = new policy_document_1.ArnPrincipal(this.roleArn);
    }
    addToPolicy(_statement) {
        // FIXME: Add warning that we're ignoring this
    }
    attachInlinePolicy(_policy) {
        // FIXME: Add warning that we're ignoring this
    }
    attachManagedPolicy(_arn) {
        // FIXME: Add warning that we're ignoring this
    }
}
//# sourceMappingURL=data:application/json;base64,
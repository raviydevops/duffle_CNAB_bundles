"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_1 = require("@aws-cdk/cdk");
const iam_generated_1 = require("./iam.generated");
const policy_1 = require("./policy");
const policy_document_1 = require("./policy-document");
const util_1 = require("./util");
class User extends cdk_1.Construct {
    constructor(parent, name, props = {}) {
        super(parent, name);
        this.groups = new Array();
        this.managedPolicyArns = new Array();
        this.attachedPolicies = new util_1.AttachedPolicies();
        const user = new iam_generated_1.cloudformation.UserResource(this, 'Resource', {
            userName: props.userName,
            groups: util_1.undefinedIfEmpty(() => this.groups),
            managedPolicyArns: util_1.undefinedIfEmpty(() => this.managedPolicyArns),
            path: props.path,
            loginProfile: this.parseLoginProfile(props)
        });
        this.userName = user.userName;
        this.userArn = user.userArn;
        this.principal = new policy_document_1.ArnPrincipal(this.userArn);
        if (props.groups) {
            props.groups.forEach(g => this.addToGroup(g));
        }
    }
    /**
     * Adds this user to a group.
     */
    addToGroup(group) {
        this.groups.push(group.groupName);
    }
    /**
     * Attaches a managed policy to the user.
     * @param arn The ARN of the managed policy to attach.
     */
    attachManagedPolicy(arn) {
        this.managedPolicyArns.push(arn);
    }
    /**
     * Attaches a policy to this user.
     */
    attachInlinePolicy(policy) {
        this.attachedPolicies.attach(policy);
        policy.attachToUser(this);
    }
    /**
     * Adds an IAM statement to the default policy.
     */
    addToPolicy(statement) {
        if (!this.defaultPolicy) {
            this.defaultPolicy = new policy_1.Policy(this, 'DefaultPolicy');
            this.defaultPolicy.attachToUser(this);
        }
        this.defaultPolicy.addStatement(statement);
    }
    parseLoginProfile(props) {
        if (props.password) {
            return {
                password: props.password,
                passwordResetRequired: props.passwordResetRequired
            };
        }
        if (props.passwordResetRequired) {
            throw new Error('Cannot set "passwordResetRequired" without specifying "initialPassword"');
        }
        return undefined; // no console access
    }
}
exports.User = User;
//# sourceMappingURL=data:application/json;base64,
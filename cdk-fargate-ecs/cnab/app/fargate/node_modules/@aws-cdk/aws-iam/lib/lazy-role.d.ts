import cdk = require('@aws-cdk/cdk');
import { Policy } from './policy';
import { PolicyPrincipal, PolicyStatement } from './policy-document';
import { IRole, RoleProps } from './role';
/**
 * An IAM role that only gets attached to the construct tree once it gets used, not before
 *
 * This construct can be used to simplify logic in other constructs
 * which need to create a role but only if certain configurations occur
 * (such as when AutoScaling is configured). The role can be configured in one
 * place, but if it never gets used it doesn't get instantiated and will
 * not be synthesized or deployed.
 */
export declare class LazyRole extends cdk.Construct implements IRole {
    private readonly props;
    private role?;
    private readonly statements;
    private readonly policies;
    private readonly managedPolicies;
    constructor(parent: cdk.Construct, id: string, props: RoleProps);
    /**
     * Adds a permission to the role's default policy document.
     * If there is no default policy attached to this role, it will be created.
     * @param permission The permission statement to add to the policy document
     */
    addToPolicy(statement: PolicyStatement): void;
    /**
     * Attaches a policy to this role.
     * @param policy The policy to attach
     */
    attachInlinePolicy(policy: Policy): void;
    /**
     * Attaches a managed policy to this role.
     * @param arn The ARN of the managed policy to attach.
     */
    attachManagedPolicy(arn: string): void;
    /**
     * Returns the role.
     */
    readonly dependencyElements: cdk.IDependable[];
    /**
     * Returns the ARN of this role.
     */
    readonly roleArn: string;
    /**
     * Returns a Principal object representing the ARN of this role.
     */
    readonly principal: PolicyPrincipal;
    private instantiate;
}

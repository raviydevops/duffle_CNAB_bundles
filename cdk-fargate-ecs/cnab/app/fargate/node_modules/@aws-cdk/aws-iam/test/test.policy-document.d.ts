import { Test } from 'nodeunit';
declare const _default: {
    'the Permission class is a programming model for iam'(test: Test): void;
    'the PolicyDocument class is a dom for iam policy documents'(test: Test): void;
    'A PolicyDocument can be initialized with an existing policy, which is merged upon serialization'(test: Test): void;
    'Permission allows specifying multiple actions upon construction'(test: Test): void;
    'PolicyDoc resolves to undefined if there are no permissions'(test: Test): void;
    'canonicalUserPrincipal adds a principal to a policy with the passed canonical user id'(test: Test): void;
    'addAccountRootPrincipal adds a principal with the current account root'(test: Test): void;
    'addFederatedPrincipal adds a Federated principal with the passed value'(test: Test): void;
    'addAwsAccountPrincipal can be used multiple times'(test: Test): void;
    'hasResource': {
        'false if there are no resources'(test: Test): void;
        'true if there is one resource'(test: Test): void;
        'true for multiple resources'(test: Test): void;
    };
    'hasPrincipal': {
        'false if there is no principal'(test: Test): void;
        'true if there is a principal'(test: Test): void;
    };
    'statementCount returns the number of statement in the policy document'(test: Test): void;
    'the {Â AWS: "*" } principal is represented as "*"'(test: Test): void;
    'addPrincipal prohibits mixing principal types'(test: Test): void;
    'addPrincipal correctly merges array in'(test: Test): void;
};
export = _default;

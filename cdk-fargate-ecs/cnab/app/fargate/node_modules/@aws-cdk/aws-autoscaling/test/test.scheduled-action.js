"use strict";
const assert_1 = require("@aws-cdk/assert");
const ec2 = require("@aws-cdk/aws-ec2");
const cdk = require("@aws-cdk/cdk");
const autoscaling = require("../lib");
function makeAutoScalingGroup(parent) {
    const vpc = new ec2.VpcNetwork(parent, 'VPC');
    return new autoscaling.AutoScalingGroup(parent, 'ASG', {
        vpc,
        instanceType: new ec2.InstanceType('t2.micro'),
        machineImage: new ec2.AmazonLinuxImage(),
        updateType: autoscaling.UpdateType.RollingUpdate,
    });
}
module.exports = {
    'can schedule an action'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const asg = makeAutoScalingGroup(stack);
        // WHEN
        asg.scaleOnSchedule('ScaleOutInTheMorning', {
            schedule: autoscaling.Cron.dailyUtc(8),
            minCapacity: 10,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::AutoScaling::ScheduledAction', {
            Recurrence: '0 8 * * *',
            MinSize: 10
        }));
        test.done();
    },
    'correctly formats date objects'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const asg = makeAutoScalingGroup(stack);
        // WHEN
        asg.scaleOnSchedule('ScaleOutInTheMorning', {
            schedule: autoscaling.Cron.dailyUtc(8),
            startTime: new Date(Date.UTC(2033, 8, 10, 12, 0, 0)),
            minCapacity: 11,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::AutoScaling::ScheduledAction', {
            StartTime: '2033-09-10T12:00:00Z'
        }));
        test.done();
    },
    'autoscaling group has recommended updatepolicy for scheduled actions'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const asg = makeAutoScalingGroup(stack);
        // WHEN
        asg.scaleOnSchedule('ScaleOutInTheMorning', {
            schedule: autoscaling.Cron.dailyUtc(8),
            minCapacity: 10,
        });
        // THEN
        assert_1.expect(stack).toMatch({
            Resources: {
                ASG46ED3070: {
                    Type: "AWS::AutoScaling::AutoScalingGroup",
                    Properties: {
                        MaxSize: "1",
                        MinSize: "1",
                        DesiredCapacity: "1",
                        LaunchConfigurationName: { Ref: "ASGLaunchConfigC00AF12B" },
                        Tags: [
                            {
                                Key: "Name",
                                PropagateAtLaunch: true,
                                Value: "ASG"
                            }
                        ],
                        VPCZoneIdentifier: [
                            { Ref: "VPCPrivateSubnet1Subnet8BCA10E0" },
                            { Ref: "VPCPrivateSubnet2SubnetCFCDAA7A" },
                            { Ref: "VPCPrivateSubnet3Subnet3EDCD457" }
                        ]
                    },
                    UpdatePolicy: {
                        AutoScalingRollingUpdate: {
                            WaitOnResourceSignals: false,
                            PauseTime: "PT0S",
                            SuspendProcesses: [
                                "HealthCheck",
                                "ReplaceUnhealthy",
                                "AZRebalance",
                                "AlarmNotification",
                                "ScheduledActions"
                            ]
                        },
                        AutoScalingScheduledAction: {
                            IgnoreUnmodifiedGroupSizeProperties: true
                        }
                    },
                }
            },
        }, assert_1.MatchStyle.SUPERSET);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5zY2hlZHVsZWQtYWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5zY2hlZHVsZWQtYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0Q0FBbUU7QUFDbkUsd0NBQXlDO0FBQ3pDLG9DQUFxQztBQUVyQyxzQ0FBdUM7QUFxR3ZDLFNBQVMsb0JBQW9CLENBQUMsTUFBcUI7SUFDakQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM5QyxPQUFPLElBQUksV0FBVyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUU7UUFDckQsR0FBRztRQUNILFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO1FBQzlDLFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRTtRQUN4QyxVQUFVLEVBQUUsV0FBVyxDQUFDLFVBQVUsQ0FBQyxhQUFhO0tBQ2pELENBQUMsQ0FBQztBQUNMLENBQUM7QUEzR0QsaUJBQVM7SUFDUCx3QkFBd0IsQ0FBQyxJQUFVO1FBQ2pDLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixNQUFNLEdBQUcsR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV4QyxPQUFPO1FBQ1AsR0FBRyxDQUFDLGVBQWUsQ0FBQyxzQkFBc0IsRUFBRTtZQUMxQyxRQUFRLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLFdBQVcsRUFBRSxFQUFFO1NBQ2hCLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLHFCQUFZLENBQUMsbUNBQW1DLEVBQUU7WUFDakUsVUFBVSxFQUFFLFdBQVc7WUFDdkIsT0FBTyxFQUFFLEVBQUU7U0FDWixDQUFDLENBQUMsQ0FBQztRQUVKLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxnQ0FBZ0MsQ0FBQyxJQUFVO1FBQ3pDLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixNQUFNLEdBQUcsR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV4QyxPQUFPO1FBQ1AsR0FBRyxDQUFDLGVBQWUsQ0FBQyxzQkFBc0IsRUFBRTtZQUMxQyxRQUFRLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLFNBQVMsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDcEQsV0FBVyxFQUFFLEVBQUU7U0FDaEIsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQyxtQ0FBbUMsRUFBRTtZQUNqRSxTQUFTLEVBQUUsc0JBQXNCO1NBQ2xDLENBQUMsQ0FBQyxDQUFDO1FBRUosSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELHNFQUFzRSxDQUFDLElBQVU7UUFDL0UsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzlCLE1BQU0sR0FBRyxHQUFHLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXhDLE9BQU87UUFDUCxHQUFHLENBQUMsZUFBZSxDQUFDLHNCQUFzQixFQUFFO1lBQzFDLFFBQVEsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDdEMsV0FBVyxFQUFFLEVBQUU7U0FDaEIsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDcEIsU0FBUyxFQUFFO2dCQUNULFdBQVcsRUFBRTtvQkFDWCxJQUFJLEVBQUUsb0NBQW9DO29CQUMxQyxVQUFVLEVBQUU7d0JBQ1YsT0FBTyxFQUFFLEdBQUc7d0JBQ1osT0FBTyxFQUFFLEdBQUc7d0JBQ1osZUFBZSxFQUFFLEdBQUc7d0JBQ3BCLHVCQUF1QixFQUFFLEVBQUUsR0FBRyxFQUFFLHlCQUF5QixFQUFFO3dCQUMzRCxJQUFJLEVBQUU7NEJBQ0o7Z0NBQ0UsR0FBRyxFQUFFLE1BQU07Z0NBQ1gsaUJBQWlCLEVBQUUsSUFBSTtnQ0FDdkIsS0FBSyxFQUFFLEtBQUs7NkJBQ2I7eUJBQ0Y7d0JBQ0QsaUJBQWlCLEVBQUU7NEJBQ2pCLEVBQUUsR0FBRyxFQUFFLGlDQUFpQyxFQUFFOzRCQUMxQyxFQUFFLEdBQUcsRUFBRSxpQ0FBaUMsRUFBRTs0QkFDMUMsRUFBRSxHQUFHLEVBQUUsaUNBQWlDLEVBQUU7eUJBQzNDO3FCQUNGO29CQUNELFlBQVksRUFBRTt3QkFDWix3QkFBd0IsRUFBRTs0QkFDeEIscUJBQXFCLEVBQUUsS0FBSzs0QkFDNUIsU0FBUyxFQUFFLE1BQU07NEJBQ2pCLGdCQUFnQixFQUFFO2dDQUNoQixhQUFhO2dDQUNiLGtCQUFrQjtnQ0FDbEIsYUFBYTtnQ0FDYixtQkFBbUI7Z0NBQ25CLGtCQUFrQjs2QkFDbkI7eUJBQ0Y7d0JBQ0QsMEJBQTBCLEVBQUU7NEJBQzFCLG1DQUFtQyxFQUFFLElBQUk7eUJBQzFDO3FCQUNGO2lCQUNGO2FBQ0Y7U0FDRixFQUFFLG1CQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFeEIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleHBlY3QsIGhhdmVSZXNvdXJjZSwgTWF0Y2hTdHlsZSB9IGZyb20gJ0Bhd3MtY2RrL2Fzc2VydCc7XG5pbXBvcnQgZWMyID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWVjMicpO1xuaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NkaycpO1xuaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCBhdXRvc2NhbGluZyA9IHJlcXVpcmUoJy4uL2xpYicpO1xuXG5leHBvcnQgPSB7XG4gICdjYW4gc2NoZWR1bGUgYW4gYWN0aW9uJyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCBhc2cgPSBtYWtlQXV0b1NjYWxpbmdHcm91cChzdGFjayk7XG5cbiAgICAvLyBXSEVOXG4gICAgYXNnLnNjYWxlT25TY2hlZHVsZSgnU2NhbGVPdXRJblRoZU1vcm5pbmcnLCB7XG4gICAgICBzY2hlZHVsZTogYXV0b3NjYWxpbmcuQ3Jvbi5kYWlseVV0Yyg4KSxcbiAgICAgIG1pbkNhcGFjaXR5OiAxMCxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3Qoc3RhY2spLnRvKGhhdmVSZXNvdXJjZSgnQVdTOjpBdXRvU2NhbGluZzo6U2NoZWR1bGVkQWN0aW9uJywge1xuICAgICAgUmVjdXJyZW5jZTogJzAgOCAqICogKicsXG4gICAgICBNaW5TaXplOiAxMFxuICAgIH0pKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdjb3JyZWN0bHkgZm9ybWF0cyBkYXRlIG9iamVjdHMnKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIGNvbnN0IGFzZyA9IG1ha2VBdXRvU2NhbGluZ0dyb3VwKHN0YWNrKTtcblxuICAgIC8vIFdIRU5cbiAgICBhc2cuc2NhbGVPblNjaGVkdWxlKCdTY2FsZU91dEluVGhlTW9ybmluZycsIHtcbiAgICAgIHNjaGVkdWxlOiBhdXRvc2NhbGluZy5Dcm9uLmRhaWx5VXRjKDgpLFxuICAgICAgc3RhcnRUaW1lOiBuZXcgRGF0ZShEYXRlLlVUQygyMDMzLCA4LCAxMCwgMTIsIDAsIDApKSwgICAgICAvLyBKYXZhU2NyaXB0J3MgRGF0ZSBpcyBhIGxpdHRsZSBzaWxseS5cbiAgICAgIG1pbkNhcGFjaXR5OiAxMSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3Qoc3RhY2spLnRvKGhhdmVSZXNvdXJjZSgnQVdTOjpBdXRvU2NhbGluZzo6U2NoZWR1bGVkQWN0aW9uJywge1xuICAgICAgU3RhcnRUaW1lOiAnMjAzMy0wOS0xMFQxMjowMDowMFonXG4gICAgfSkpO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ2F1dG9zY2FsaW5nIGdyb3VwIGhhcyByZWNvbW1lbmRlZCB1cGRhdGVwb2xpY3kgZm9yIHNjaGVkdWxlZCBhY3Rpb25zJyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCBhc2cgPSBtYWtlQXV0b1NjYWxpbmdHcm91cChzdGFjayk7XG5cbiAgICAvLyBXSEVOXG4gICAgYXNnLnNjYWxlT25TY2hlZHVsZSgnU2NhbGVPdXRJblRoZU1vcm5pbmcnLCB7XG4gICAgICBzY2hlZHVsZTogYXV0b3NjYWxpbmcuQ3Jvbi5kYWlseVV0Yyg4KSxcbiAgICAgIG1pbkNhcGFjaXR5OiAxMCxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3Qoc3RhY2spLnRvTWF0Y2goe1xuICAgICAgUmVzb3VyY2VzOiB7XG4gICAgICAgIEFTRzQ2RUQzMDcwOiB7XG4gICAgICAgICAgVHlwZTogXCJBV1M6OkF1dG9TY2FsaW5nOjpBdXRvU2NhbGluZ0dyb3VwXCIsXG4gICAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgICAgTWF4U2l6ZTogXCIxXCIsXG4gICAgICAgICAgICBNaW5TaXplOiBcIjFcIixcbiAgICAgICAgICAgIERlc2lyZWRDYXBhY2l0eTogXCIxXCIsXG4gICAgICAgICAgICBMYXVuY2hDb25maWd1cmF0aW9uTmFtZTogeyBSZWY6IFwiQVNHTGF1bmNoQ29uZmlnQzAwQUYxMkJcIiB9LFxuICAgICAgICAgICAgVGFnczogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgS2V5OiBcIk5hbWVcIixcbiAgICAgICAgICAgICAgICBQcm9wYWdhdGVBdExhdW5jaDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBWYWx1ZTogXCJBU0dcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgVlBDWm9uZUlkZW50aWZpZXI6IFtcbiAgICAgICAgICAgICAgeyBSZWY6IFwiVlBDUHJpdmF0ZVN1Ym5ldDFTdWJuZXQ4QkNBMTBFMFwiIH0sXG4gICAgICAgICAgICAgIHsgUmVmOiBcIlZQQ1ByaXZhdGVTdWJuZXQyU3VibmV0Q0ZDREFBN0FcIiB9LFxuICAgICAgICAgICAgICB7IFJlZjogXCJWUENQcml2YXRlU3VibmV0M1N1Ym5ldDNFRENENDU3XCIgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgVXBkYXRlUG9saWN5OiB7XG4gICAgICAgICAgICBBdXRvU2NhbGluZ1JvbGxpbmdVcGRhdGU6IHtcbiAgICAgICAgICAgICAgV2FpdE9uUmVzb3VyY2VTaWduYWxzOiBmYWxzZSxcbiAgICAgICAgICAgICAgUGF1c2VUaW1lOiBcIlBUMFNcIixcbiAgICAgICAgICAgICAgU3VzcGVuZFByb2Nlc3NlczogW1xuICAgICAgICAgICAgICAgIFwiSGVhbHRoQ2hlY2tcIixcbiAgICAgICAgICAgICAgICBcIlJlcGxhY2VVbmhlYWx0aHlcIixcbiAgICAgICAgICAgICAgICBcIkFaUmViYWxhbmNlXCIsXG4gICAgICAgICAgICAgICAgXCJBbGFybU5vdGlmaWNhdGlvblwiLFxuICAgICAgICAgICAgICAgIFwiU2NoZWR1bGVkQWN0aW9uc1wiXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBBdXRvU2NhbGluZ1NjaGVkdWxlZEFjdGlvbjoge1xuICAgICAgICAgICAgICBJZ25vcmVVbm1vZGlmaWVkR3JvdXBTaXplUHJvcGVydGllczogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSwgTWF0Y2hTdHlsZS5TVVBFUlNFVCk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIG1ha2VBdXRvU2NhbGluZ0dyb3VwKHBhcmVudDogY2RrLkNvbnN0cnVjdCkge1xuICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwY05ldHdvcmsocGFyZW50LCAnVlBDJyk7XG4gIHJldHVybiBuZXcgYXV0b3NjYWxpbmcuQXV0b1NjYWxpbmdHcm91cChwYXJlbnQsICdBU0cnLCB7XG4gICAgdnBjLFxuICAgIGluc3RhbmNlVHlwZTogbmV3IGVjMi5JbnN0YW5jZVR5cGUoJ3QyLm1pY3JvJyksXG4gICAgbWFjaGluZUltYWdlOiBuZXcgZWMyLkFtYXpvbkxpbnV4SW1hZ2UoKSxcbiAgICB1cGRhdGVUeXBlOiBhdXRvc2NhbGluZy5VcGRhdGVUeXBlLlJvbGxpbmdVcGRhdGUsXG4gIH0pO1xufSJdfQ==
"use strict";
const assert_1 = require("@aws-cdk/assert");
const ec2 = require("@aws-cdk/aws-ec2");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const autoscaling = require("../lib");
class FakeNotificationTarget {
    asLifecycleHookTarget(lifecycleHook) {
        lifecycleHook.role.addToPolicy(new iam.PolicyStatement()
            .addAction('action:Work')
            .addAllResources());
        return { notificationTargetArn: 'target:arn', };
    }
}
module.exports = {
    'we can add a lifecycle hook to an ASG'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.VpcNetwork(stack, 'VPC');
        const asg = new autoscaling.AutoScalingGroup(stack, 'ASG', {
            vpc,
            instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.M4, ec2.InstanceSize.Micro),
            machineImage: new ec2.AmazonLinuxImage(),
        });
        // WHEN
        asg.onLifecycleTransition('Transition', {
            notificationTarget: new FakeNotificationTarget(),
            lifecycleTransition: autoscaling.LifecycleTransition.InstanceLaunching,
            defaultResult: autoscaling.DefaultResult.Abandon,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::AutoScaling::LifecycleHook', {
            LifecycleTransition: "autoscaling:EC2_INSTANCE_LAUNCHING",
            DefaultResult: "ABANDON",
            NotificationTargetARN: "target:arn",
        }));
        // Lifecycle Hook has a dependency on the policy object
        assert_1.expect(stack).to(assert_1.haveResource('AWS::AutoScaling::LifecycleHook', {
            DependsOn: [
                "ASGLifecycleHookTransitionRole3AAA6BB7",
                "ASGLifecycleHookTransitionRoleDefaultPolicy2E50C7DB"
            ]
        }, assert_1.ResourcePart.CompleteDefinition));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Role', {
            AssumeRolePolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                    {
                        Action: "sts:AssumeRole",
                        Effect: "Allow",
                        Principal: { Service: "autoscaling.amazonaws.com" }
                    }
                ],
            }
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            PolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                    {
                        Action: "action:Work",
                        Effect: "Allow",
                        Resource: "*"
                    }
                ],
            }
        }));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5saWZlY3ljbGVob29rcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3QubGlmZWN5Y2xlaG9va3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRDQUFxRTtBQUVyRSx3Q0FBeUM7QUFDekMsd0NBQXlDO0FBQ3pDLG9DQUFxQztBQUVyQyxzQ0FBdUM7QUFpRXZDLE1BQU0sc0JBQXNCO0lBQ25CLHFCQUFxQixDQUFDLGFBQTZDO1FBQ3hFLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRTthQUNyRCxTQUFTLENBQUMsYUFBYSxDQUFDO2FBQ3hCLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDdEIsT0FBTyxFQUFFLHFCQUFxQixFQUFFLFlBQVksR0FBRyxDQUFDO0lBQ2xELENBQUM7Q0FDRjtBQXRFRCxpQkFBUztJQUNQLHVDQUF1QyxDQUFDLElBQVU7UUFDaEQsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzlCLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDN0MsTUFBTSxHQUFHLEdBQUcsSUFBSSxXQUFXLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtZQUN6RCxHQUFHO1lBQ0gsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO1lBQ3BGLFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRTtTQUN6QyxDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsR0FBRyxDQUFDLHFCQUFxQixDQUFDLFlBQVksRUFBRTtZQUN0QyxrQkFBa0IsRUFBRSxJQUFJLHNCQUFzQixFQUFFO1lBQ2hELG1CQUFtQixFQUFFLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxpQkFBaUI7WUFDdEUsYUFBYSxFQUFFLFdBQVcsQ0FBQyxhQUFhLENBQUMsT0FBTztTQUNqRCxDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxxQkFBWSxDQUFDLGlDQUFpQyxFQUFFO1lBQy9ELG1CQUFtQixFQUFFLG9DQUFvQztZQUN6RCxhQUFhLEVBQUUsU0FBUztZQUN4QixxQkFBcUIsRUFBRSxZQUFZO1NBQ3BDLENBQUMsQ0FBQyxDQUFDO1FBRUosdURBQXVEO1FBQ3ZELGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQyxpQ0FBaUMsRUFBRTtZQUMvRCxTQUFTLEVBQUU7Z0JBQ1Qsd0NBQXdDO2dCQUN4QyxxREFBcUQ7YUFDdEQ7U0FDRixFQUFFLHFCQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1FBRXJDLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQyxnQkFBZ0IsRUFBRTtZQUM5Qyx3QkFBd0IsRUFBRTtnQkFDeEIsT0FBTyxFQUFFLFlBQVk7Z0JBQ3JCLFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxNQUFNLEVBQUUsZ0JBQWdCO3dCQUN4QixNQUFNLEVBQUUsT0FBTzt3QkFDZixTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUU7cUJBQ3BEO2lCQUNGO2FBQ0Y7U0FDRixDQUFDLENBQUMsQ0FBQztRQUVKLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQyxrQkFBa0IsRUFBRTtZQUNoRCxjQUFjLEVBQUU7Z0JBQ2QsT0FBTyxFQUFFLFlBQVk7Z0JBQ3JCLFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxNQUFNLEVBQUUsYUFBYTt3QkFDckIsTUFBTSxFQUFFLE9BQU87d0JBQ2YsUUFBUSxFQUFFLEdBQUc7cUJBQ2Q7aUJBQ0Y7YUFDRjtTQUNGLENBQUMsQ0FBQyxDQUFDO1FBRUosSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleHBlY3QsIGhhdmVSZXNvdXJjZSwgUmVzb3VyY2VQYXJ0IH0gZnJvbSAnQGF3cy1jZGsvYXNzZXJ0JztcbmltcG9ydCBhdXRvc2NhbGluZ19hcGkgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtYXV0b3NjYWxpbmctYXBpJyk7XG5pbXBvcnQgZWMyID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWVjMicpO1xuaW1wb3J0IGlhbSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1pYW0nKTtcbmltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcbmltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgYXV0b3NjYWxpbmcgPSByZXF1aXJlKCcuLi9saWInKTtcblxuZXhwb3J0ID0ge1xuICAnd2UgY2FuIGFkZCBhIGxpZmVjeWNsZSBob29rIHRvIGFuIEFTRycodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGNOZXR3b3JrKHN0YWNrLCAnVlBDJyk7XG4gICAgY29uc3QgYXNnID0gbmV3IGF1dG9zY2FsaW5nLkF1dG9TY2FsaW5nR3JvdXAoc3RhY2ssICdBU0cnLCB7XG4gICAgICB2cGMsXG4gICAgICBpbnN0YW5jZVR5cGU6IG5ldyBlYzIuSW5zdGFuY2VUeXBlUGFpcihlYzIuSW5zdGFuY2VDbGFzcy5NNCwgZWMyLkluc3RhbmNlU2l6ZS5NaWNybyksXG4gICAgICBtYWNoaW5lSW1hZ2U6IG5ldyBlYzIuQW1hem9uTGludXhJbWFnZSgpLFxuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGFzZy5vbkxpZmVjeWNsZVRyYW5zaXRpb24oJ1RyYW5zaXRpb24nLCB7XG4gICAgICBub3RpZmljYXRpb25UYXJnZXQ6IG5ldyBGYWtlTm90aWZpY2F0aW9uVGFyZ2V0KCksXG4gICAgICBsaWZlY3ljbGVUcmFuc2l0aW9uOiBhdXRvc2NhbGluZy5MaWZlY3ljbGVUcmFuc2l0aW9uLkluc3RhbmNlTGF1bmNoaW5nLFxuICAgICAgZGVmYXVsdFJlc3VsdDogYXV0b3NjYWxpbmcuRGVmYXVsdFJlc3VsdC5BYmFuZG9uLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OkF1dG9TY2FsaW5nOjpMaWZlY3ljbGVIb29rJywge1xuICAgICAgTGlmZWN5Y2xlVHJhbnNpdGlvbjogXCJhdXRvc2NhbGluZzpFQzJfSU5TVEFOQ0VfTEFVTkNISU5HXCIsXG4gICAgICBEZWZhdWx0UmVzdWx0OiBcIkFCQU5ET05cIixcbiAgICAgIE5vdGlmaWNhdGlvblRhcmdldEFSTjogXCJ0YXJnZXQ6YXJuXCIsXG4gICAgfSkpO1xuXG4gICAgLy8gTGlmZWN5Y2xlIEhvb2sgaGFzIGEgZGVwZW5kZW5jeSBvbiB0aGUgcG9saWN5IG9iamVjdFxuICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OkF1dG9TY2FsaW5nOjpMaWZlY3ljbGVIb29rJywge1xuICAgICAgRGVwZW5kc09uOiBbXG4gICAgICAgIFwiQVNHTGlmZWN5Y2xlSG9va1RyYW5zaXRpb25Sb2xlM0FBQTZCQjdcIixcbiAgICAgICAgXCJBU0dMaWZlY3ljbGVIb29rVHJhbnNpdGlvblJvbGVEZWZhdWx0UG9saWN5MkU1MEM3REJcIlxuICAgICAgXVxuICAgIH0sIFJlc291cmNlUGFydC5Db21wbGV0ZURlZmluaXRpb24pKTtcblxuICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OklBTTo6Um9sZScsIHtcbiAgICAgIEFzc3VtZVJvbGVQb2xpY3lEb2N1bWVudDoge1xuICAgICAgICBWZXJzaW9uOiAnMjAxMi0xMC0xNycsXG4gICAgICAgIFN0YXRlbWVudDogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIEFjdGlvbjogXCJzdHM6QXNzdW1lUm9sZVwiLFxuICAgICAgICAgICAgRWZmZWN0OiBcIkFsbG93XCIsXG4gICAgICAgICAgICBQcmluY2lwYWw6IHsgU2VydmljZTogXCJhdXRvc2NhbGluZy5hbWF6b25hd3MuY29tXCIgfVxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgIH1cbiAgICB9KSk7XG5cbiAgICBleHBlY3Qoc3RhY2spLnRvKGhhdmVSZXNvdXJjZSgnQVdTOjpJQU06OlBvbGljeScsIHtcbiAgICAgIFBvbGljeURvY3VtZW50OiB7XG4gICAgICAgIFZlcnNpb246ICcyMDEyLTEwLTE3JyxcbiAgICAgICAgU3RhdGVtZW50OiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgQWN0aW9uOiBcImFjdGlvbjpXb3JrXCIsXG4gICAgICAgICAgICBFZmZlY3Q6IFwiQWxsb3dcIixcbiAgICAgICAgICAgIFJlc291cmNlOiBcIipcIlxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgIH1cbiAgICB9KSk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfVxufTtcblxuY2xhc3MgRmFrZU5vdGlmaWNhdGlvblRhcmdldCBpbXBsZW1lbnRzIGF1dG9zY2FsaW5nX2FwaS5JTGlmZWN5Y2xlSG9va1RhcmdldCB7XG4gIHB1YmxpYyBhc0xpZmVjeWNsZUhvb2tUYXJnZXQobGlmZWN5Y2xlSG9vazogYXV0b3NjYWxpbmdfYXBpLklMaWZlY3ljbGVIb29rKTogYXV0b3NjYWxpbmdfYXBpLkxpZmVjeWNsZUhvb2tUYXJnZXRQcm9wcyB7XG4gICAgbGlmZWN5Y2xlSG9vay5yb2xlLmFkZFRvUG9saWN5KG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KClcbiAgICAgIC5hZGRBY3Rpb24oJ2FjdGlvbjpXb3JrJylcbiAgICAgIC5hZGRBbGxSZXNvdXJjZXMoKSk7XG4gICAgcmV0dXJuIHsgbm90aWZpY2F0aW9uVGFyZ2V0QXJuOiAndGFyZ2V0OmFybicsIH07XG4gIH1cbn1cbiJdfQ==
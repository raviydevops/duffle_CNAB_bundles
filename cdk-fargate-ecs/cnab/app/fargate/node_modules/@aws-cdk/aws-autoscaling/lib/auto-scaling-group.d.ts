import cloudwatch = require('@aws-cdk/aws-cloudwatch');
import ec2 = require('@aws-cdk/aws-ec2');
import elb = require('@aws-cdk/aws-elasticloadbalancing');
import elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');
import iam = require('@aws-cdk/aws-iam');
import sns = require('@aws-cdk/aws-sns');
import cdk = require('@aws-cdk/cdk');
import { BasicLifecycleHookProps, LifecycleHook } from './lifecycle-hook';
import { BasicScheduledActionProps, ScheduledAction } from './scheduled-action';
import { BasicStepScalingPolicyProps, StepScalingPolicy } from './step-scaling-policy';
import { BaseTargetTrackingProps, TargetTrackingScalingPolicy } from './target-tracking-scaling-policy';
/**
 * Properties of a Fleet
 */
export interface AutoScalingGroupProps {
    /**
     * Type of instance to launch
     */
    instanceType: ec2.InstanceType;
    /**
     * Minimum number of instances in the fleet
     *
     * @default 1
     */
    minSize?: number;
    /**
     * Maximum number of instances in the fleet
     *
     * @default desiredCapacity
     */
    maxSize?: number;
    /**
     * Initial amount of instances in the fleet
     * @default 1
     */
    desiredCapacity?: number;
    /**
     * Name of SSH keypair to grant access to instances
     * @default No SSH access will be possible
     */
    keyName?: string;
    /**
     * AMI to launch
     */
    machineImage: ec2.IMachineImageSource;
    /**
     * VPC to launch these instances in.
     */
    vpc: ec2.VpcNetworkRef;
    /**
     * Where to place instances within the VPC
     */
    vpcPlacement?: ec2.VpcPlacementStrategy;
    /**
     * SNS topic to send notifications about fleet changes
     * @default No fleet change notifications will be sent.
     */
    notificationsTopic?: sns.TopicRef;
    /**
     * Whether the instances can initiate connections to anywhere by default
     *
     * @default true
     */
    allowAllOutbound?: boolean;
    /**
     * What to do when an AutoScalingGroup's instance configuration is changed
     *
     * This is applied when any of the settings on the ASG are changed that
     * affect how the instances should be created (VPC, instance type, startup
     * scripts, etc.). It indicates how the existing instances should be
     * replaced with new instances matching the new config. By default, nothing
     * is done and only new instances are launched with the new config.
     *
     * @default UpdateType.None
     */
    updateType?: UpdateType;
    /**
     * Configuration for rolling updates
     *
     * Only used if updateType == UpdateType.RollingUpdate.
     */
    rollingUpdateConfiguration?: RollingUpdateConfiguration;
    /**
     * Configuration for replacing updates.
     *
     * Only used if updateType == UpdateType.ReplacingUpdate. Specifies how
     * many instances must signal success for the update to succeed.
     */
    replacingUpdateMinSuccessfulInstancesPercent?: number;
    /**
     * If the ASG has scheduled actions, don't reset unchanged group sizes
     *
     * Only used if the ASG has scheduled actions (which may scale your ASG up
     * or down regardless of cdk deployments). If true, the size of the group
     * will only be reset if it has been changed in the CDK app. If false, the
     * sizes will always be changed back to what they were in the CDK app
     * on deployment.
     *
     * @default true
     */
    ignoreUnmodifiedSizeProperties?: boolean;
    /**
     * How many ResourceSignal calls CloudFormation expects before the resource is considered created
     *
     * @default 1
     */
    resourceSignalCount?: number;
    /**
     * The length of time to wait for the resourceSignalCount
     *
     * The maximum value is 43200 (12 hours).
     *
     * @default 300 (5 minutes)
     */
    resourceSignalTimeoutSec?: number;
    /**
     * The AWS resource tags to associate with the ASG.
     */
    tags?: cdk.Tags;
    /**
     * Default scaling cooldown for this AutoScalingGroup
     *
     * @default 300 (5 minutes)
     */
    cooldownSeconds?: number;
}
/**
 * A Fleet represents a managed set of EC2 instances
 *
 * The Fleet models a number of AutoScalingGroups, a launch configuration, a
 * security group and an instance role.
 *
 * It allows adding arbitrary commands to the startup scripts of the instances
 * in the fleet.
 *
 * The ASG spans all availability zones.
 */
export declare class AutoScalingGroup extends cdk.Construct implements IAutoScalingGroup, cdk.ITaggable, elb.ILoadBalancerTarget, ec2.IConnectable, elbv2.IApplicationLoadBalancerTarget, elbv2.INetworkLoadBalancerTarget {
    /**
     * The type of OS instances of this fleet are running.
     */
    readonly osType: ec2.OperatingSystemType;
    /**
     * Allows specify security group connections for instances of this fleet.
     */
    readonly connections: ec2.Connections;
    /**
     * The IAM role assumed by instances of this fleet.
     */
    readonly role: iam.Role;
    /**
     * Manage tags for this construct and children
     */
    readonly tags: cdk.TagManager;
    /**
     * Name of the AutoScalingGroup
     */
    readonly autoScalingGroupName: string;
    private readonly userDataLines;
    private readonly autoScalingGroup;
    private readonly securityGroup;
    private readonly securityGroups;
    private readonly loadBalancerNames;
    private readonly targetGroupArns;
    private albTargetGroup?;
    constructor(parent: cdk.Construct, name: string, props: AutoScalingGroupProps);
    /**
     * Add the security group to all instances via the launch configuration
     * security groups array.
     *
     * @param securityGroup: The SecurityGroupRef to add
     */
    addSecurityGroup(securityGroup: ec2.SecurityGroupRef): void;
    /**
     * Attach to a classic load balancer
     */
    attachToClassicLB(loadBalancer: elb.LoadBalancer): void;
    /**
     * Attach to ELBv2 Application Target Group
     */
    attachToApplicationTargetGroup(targetGroup: elbv2.ApplicationTargetGroup): elbv2.LoadBalancerTargetProps;
    /**
     * Attach to ELBv2 Application Target Group
     */
    attachToNetworkTargetGroup(targetGroup: elbv2.NetworkTargetGroup): elbv2.LoadBalancerTargetProps;
    /**
     * Add command to the startup script of fleet instances.
     * The command must be in the scripting language supported by the fleet's OS (i.e. Linux/Windows).
     */
    addUserData(...scriptLines: string[]): void;
    /**
     * Scale out or in based on time
     */
    scaleOnSchedule(id: string, props: BasicScheduledActionProps): ScheduledAction;
    /**
     * Scale out or in to achieve a target CPU utilization
     */
    scaleOnCpuUtilization(id: string, props: CpuUtilizationScalingProps): TargetTrackingScalingPolicy;
    /**
     * Scale out or in to achieve a target network ingress rate
     */
    scaleOnIncomingBytes(id: string, props: NetworkUtilizationScalingProps): TargetTrackingScalingPolicy;
    /**
     * Scale out or in to achieve a target network egress rate
     */
    scaleOnOutgoingBytes(id: string, props: NetworkUtilizationScalingProps): TargetTrackingScalingPolicy;
    /**
     * Scale out or in to achieve a target request handling rate
     *
     * The AutoScalingGroup must have been attached to an Application Load Balancer
     * in order to be able to call this.
     */
    scaleOnRequestCount(id: string, props: RequestCountScalingProps): TargetTrackingScalingPolicy;
    /**
     * Scale out or in in order to keep a metric around a target value
     */
    scaleToTrackMetric(id: string, props: MetricTargetTrackingProps): TargetTrackingScalingPolicy;
    /**
     * Scale out or in, in response to a metric
     */
    scaleOnMetric(id: string, props: BasicStepScalingPolicyProps): StepScalingPolicy;
    /**
     * Adds a statement to the IAM role assumed by instances of this fleet.
     */
    addToRolePolicy(statement: iam.PolicyStatement): void;
    /**
     * Send a message to either an SQS queue or SNS topic when instances launch or terminate
     */
    onLifecycleTransition(id: string, props: BasicLifecycleHookProps): LifecycleHook;
    /**
     * Apply CloudFormation update policies for the AutoScalingGroup
     */
    private applyUpdatePolicies;
    /**
     * Create and return the ASG update policy
     */
    private readonly asgUpdatePolicy;
    /**
     * Create and return the ASG creation policy
     */
    private readonly asgCreationPolicy;
}
/**
 * The type of update to perform on instances in this AutoScalingGroup
 */
export declare enum UpdateType {
    /**
     * Don't do anything
     */
    None = "None",
    /**
     * Replace the entire AutoScalingGroup
     *
     * Builds a new AutoScalingGroup first, then delete the old one.
     */
    ReplacingUpdate = "Replace",
    /**
     * Replace the instances in the AutoScalingGroup.
     */
    RollingUpdate = "RollingUpdate"
}
/**
 * Additional settings when a rolling update is selected
 */
export interface RollingUpdateConfiguration {
    /**
     * The maximum number of instances that AWS CloudFormation updates at once.
     *
     * @default 1
     */
    maxBatchSize?: number;
    /**
     * The minimum number of instances that must be in service before more instances are replaced.
     *
     * This number affects the speed of the replacement.
     *
     * @default 0
     */
    minInstancesInService?: number;
    /**
     * The percentage of instances that must signal success for an update to succeed.
     *
     * If an instance doesn't send a signal within the time specified in the
     * pauseTime property, AWS CloudFormation assumes that the instance wasn't
     * updated.
     *
     * This number affects the success of the replacement.
     *
     * If you specify this property, you must also enable the
     * waitOnResourceSignals and pauseTime properties.
     *
     * @default 100
     */
    minSuccessfulInstancesPercent?: number;
    /**
     * The pause time after making a change to a batch of instances.
     *
     * This is intended to give those instances time to start software applications.
     *
     * Specify PauseTime in the ISO8601 duration format (in the format
     * PT#H#M#S, where each # is the number of hours, minutes, and seconds,
     * respectively). The maximum PauseTime is one hour (PT1H).
     *
     * @default 300 if the waitOnResourceSignals property is true, otherwise 0
     */
    pauseTimeSec?: number;
    /**
     * Specifies whether the Auto Scaling group waits on signals from new instances during an update.
     *
     * AWS CloudFormation must receive a signal from each new instance within
     * the specified PauseTime before continuing the update.
     *
     * To have instances wait for an Elastic Load Balancing health check before
     * they signal success, add a health-check verification by using the
     * cfn-init helper script. For an example, see the verify_instance_health
     * command in the Auto Scaling rolling updates sample template.
     *
     * @default true if you specified the minSuccessfulInstancesPercent property, false otherwise
     */
    waitOnResourceSignals?: boolean;
    /**
     * Specifies the Auto Scaling processes to suspend during a stack update.
     *
     * Suspending processes prevents Auto Scaling from interfering with a stack
     * update.
     *
     * @default HealthCheck, ReplaceUnhealthy, AZRebalance, AlarmNotification, ScheduledActions.
     */
    suspendProcesses?: ScalingProcess[];
}
export declare enum ScalingProcess {
    Launch = "Launch",
    Terminate = "Terminate",
    HealthCheck = "HealthCheck",
    ReplaceUnhealthy = "ReplaceUnhealthy",
    AZRebalance = "AZRebalance",
    AlarmNotification = "AlarmNotification",
    ScheduledActions = "ScheduledActions",
    AddToLoadBalancer = "AddToLoadBalancer"
}
/**
 * An AutoScalingGroup
 */
export interface IAutoScalingGroup {
    /**
     * The name of the AutoScalingGroup
     */
    readonly autoScalingGroupName: string;
    /**
     * Send a message to either an SQS queue or SNS topic when instances launch or terminate
     */
    onLifecycleTransition(id: string, props: BasicLifecycleHookProps): LifecycleHook;
    /**
     * Scale out or in based on time
     */
    scaleOnSchedule(id: string, props: BasicScheduledActionProps): ScheduledAction;
    /**
     * Scale out or in to achieve a target CPU utilization
     */
    scaleOnCpuUtilization(id: string, props: CpuUtilizationScalingProps): TargetTrackingScalingPolicy;
    /**
     * Scale out or in to achieve a target network ingress rate
     */
    scaleOnIncomingBytes(id: string, props: NetworkUtilizationScalingProps): TargetTrackingScalingPolicy;
    /**
     * Scale out or in to achieve a target network egress rate
     */
    scaleOnOutgoingBytes(id: string, props: NetworkUtilizationScalingProps): TargetTrackingScalingPolicy;
    /**
     * Scale out or in in order to keep a metric around a target value
     */
    scaleToTrackMetric(id: string, props: MetricTargetTrackingProps): TargetTrackingScalingPolicy;
    /**
     * Scale out or in, in response to a metric
     */
    scaleOnMetric(id: string, props: BasicStepScalingPolicyProps): StepScalingPolicy;
}
/**
 * Properties for enabling scaling based on CPU utilization
 */
export interface CpuUtilizationScalingProps extends BaseTargetTrackingProps {
    /**
     * Target average CPU utilization across the task
     */
    targetUtilizationPercent: number;
}
/**
 * Properties for enabling scaling based on network utilization
 */
export interface NetworkUtilizationScalingProps extends BaseTargetTrackingProps {
    /**
     * Target average bytes/seconds on each instance
     */
    targetBytesPerSecond: number;
}
/**
 * Properties for enabling scaling based on request/second
 */
export interface RequestCountScalingProps extends BaseTargetTrackingProps {
    /**
     * Target average requests/seconds on each instance
     */
    targetRequestsPerSecond: number;
}
/**
 * Properties for enabling tracking of an arbitrary metric
 */
export interface MetricTargetTrackingProps extends BaseTargetTrackingProps {
    /**
     * Metric to track
     *
     * The metric must represent a utilization, so that if it's higher than the
     * target value, your ASG should scale out, and if it's lower it should
     * scale in.
     */
    metric: cloudwatch.Metric;
    /**
     * Value to keep the metric around
     */
    targetValue: number;
}

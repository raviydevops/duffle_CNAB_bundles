"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const autoscaling_generated_1 = require("./autoscaling.generated");
const util_1 = require("./util");
class LifecycleHook extends cdk.Construct {
    constructor(parent, id, props) {
        super(parent, id);
        this.role = props.role || new iam.Role(this, 'Role', {
            assumedBy: new iam.ServicePrincipal('autoscaling.amazonaws.com')
        });
        const targetProps = props.notificationTarget.asLifecycleHookTarget(this);
        const resource = new autoscaling_generated_1.cloudformation.LifecycleHookResource(this, 'Resource', {
            autoScalingGroupName: props.autoScalingGroup.autoScalingGroupName,
            defaultResult: props.defaultResult,
            heartbeatTimeout: props.heartbeatTimeoutSec,
            lifecycleHookName: props.lifecycleHookName,
            lifecycleTransition: props.lifecycleTransition,
            notificationMetadata: props.notificationMetadata,
            notificationTargetArn: targetProps.notificationTargetArn,
            roleArn: this.role.roleArn,
        });
        // A LifecycleHook resource is going to do a permissions test upon creation,
        // so we have to make sure the role has full permissions before creating the
        // lifecycle hook.
        // The LazyDependable makes sure we take a dependency on anything that gets
        // added to the dependencyElements array, even if it happens after this
        // point.
        resource.addDependency(new util_1.LazyDependable(this.role));
        this.lifecycleHookName = resource.lifecycleHookName;
    }
}
exports.LifecycleHook = LifecycleHook;
var DefaultResult;
(function (DefaultResult) {
    DefaultResult["Continue"] = "CONTINUE";
    DefaultResult["Abandon"] = "ABANDON";
})(DefaultResult = exports.DefaultResult || (exports.DefaultResult = {}));
/**
 * What instance transition to attach the hook to
 */
var LifecycleTransition;
(function (LifecycleTransition) {
    /**
     * Execute the hook when an instance is about to be added
     */
    LifecycleTransition["InstanceLaunching"] = "autoscaling:EC2_INSTANCE_LAUNCHING";
    /**
     * Execute the hook when an instance is about to be terminated
     */
    LifecycleTransition["InstanceTerminating"] = "autoscaling:EC2_INSTANCE_TERMINATING";
})(LifecycleTransition = exports.LifecycleTransition || (exports.LifecycleTransition = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlmZWN5Y2xlLWhvb2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsaWZlY3ljbGUtaG9vay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHdDQUF5QztBQUN6QyxvQ0FBcUM7QUFFckMsbUVBQXlEO0FBQ3pELGlDQUF3QztBQThEeEMsTUFBYSxhQUFjLFNBQVEsR0FBRyxDQUFDLFNBQVM7SUFXOUMsWUFBWSxNQUFxQixFQUFFLEVBQVUsRUFBRSxLQUF5QjtRQUN0RSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWxCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRTtZQUNuRCxTQUFTLEVBQUUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsMkJBQTJCLENBQUM7U0FDakUsQ0FBQyxDQUFDO1FBRUgsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXpFLE1BQU0sUUFBUSxHQUFHLElBQUksc0NBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQzFFLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0I7WUFDakUsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxtQkFBbUI7WUFDM0MsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtZQUMxQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsbUJBQW1CO1lBQzlDLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxvQkFBb0I7WUFDaEQscUJBQXFCLEVBQUUsV0FBVyxDQUFDLHFCQUFxQjtZQUN4RCxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO1NBQzNCLENBQUMsQ0FBQztRQUVILDRFQUE0RTtRQUM1RSw0RUFBNEU7UUFDNUUsa0JBQWtCO1FBQ2xCLDJFQUEyRTtRQUMzRSx1RUFBdUU7UUFDdkUsU0FBUztRQUNULFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxxQkFBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRXRELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxRQUFRLENBQUMsaUJBQWlCLENBQUM7SUFDdEQsQ0FBQztDQUNGO0FBekNELHNDQXlDQztBQUVELElBQVksYUFHWDtBQUhELFdBQVksYUFBYTtJQUN2QixzQ0FBcUIsQ0FBQTtJQUNyQixvQ0FBbUIsQ0FBQTtBQUNyQixDQUFDLEVBSFcsYUFBYSxHQUFiLHFCQUFhLEtBQWIscUJBQWEsUUFHeEI7QUFFRDs7R0FFRztBQUNILElBQVksbUJBVVg7QUFWRCxXQUFZLG1CQUFtQjtJQUM3Qjs7T0FFRztJQUNILCtFQUF3RCxDQUFBO0lBRXhEOztPQUVHO0lBQ0gsbUZBQTRELENBQUE7QUFDOUQsQ0FBQyxFQVZXLG1CQUFtQixHQUFuQiwyQkFBbUIsS0FBbkIsMkJBQW1CLFFBVTlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFwaSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1hdXRvc2NhbGluZy1hcGknKTtcbmltcG9ydCBpYW0gPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtaWFtJyk7XG5pbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY2RrJyk7XG5pbXBvcnQgeyBJQXV0b1NjYWxpbmdHcm91cCB9IGZyb20gJy4vYXV0by1zY2FsaW5nLWdyb3VwJztcbmltcG9ydCB7IGNsb3VkZm9ybWF0aW9uIH0gZnJvbSAnLi9hdXRvc2NhbGluZy5nZW5lcmF0ZWQnO1xuaW1wb3J0IHsgTGF6eURlcGVuZGFibGUgfSBmcm9tICcuL3V0aWwnO1xuXG4vKipcbiAqIEJhc2ljIHByb3BlcnRpZXMgZm9yIGEgbGlmZWN5Y2xlIGhvb2tcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYXNpY0xpZmVjeWNsZUhvb2tQcm9wcyB7XG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBsaWZlY3ljbGUgaG9va1xuICAgKlxuICAgKiBAZGVmYXVsdCBBdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBuYW1lXG4gICAqL1xuICBsaWZlY3ljbGVIb29rTmFtZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGFjdGlvbiB0aGUgQXV0byBTY2FsaW5nIGdyb3VwIHRha2VzIHdoZW4gdGhlIGxpZmVjeWNsZSBob29rIHRpbWVvdXQgZWxhcHNlcyBvciBpZiBhbiB1bmV4cGVjdGVkIGZhaWx1cmUgb2NjdXJzLlxuICAgKlxuICAgKiBAZGVmYXVsdCBDb250aW51ZVxuICAgKi9cbiAgZGVmYXVsdFJlc3VsdD86IERlZmF1bHRSZXN1bHQ7XG5cbiAgLyoqXG4gICAqIE1heGltdW0gdGltZSBiZXR3ZWVuIGNhbGxzIHRvIFJlY29yZExpZmVjeWNsZUFjdGlvbkhlYXJ0YmVhdCBmb3IgdGhlIGhvb2tcbiAgICpcbiAgICogSWYgdGhlIGxpZmVjeWNsZSBob29rIHRpbWVzIG91dCwgcGVyZm9ybSB0aGUgYWN0aW9uIGluIERlZmF1bHRSZXN1bHQuXG4gICAqL1xuICBoZWFydGJlYXRUaW1lb3V0U2VjPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgc3RhdGUgb2YgdGhlIEFtYXpvbiBFQzIgaW5zdGFuY2UgdG8gd2hpY2ggeW91IHdhbnQgdG8gYXR0YWNoIHRoZSBsaWZlY3ljbGUgaG9vay5cbiAgICovXG4gIGxpZmVjeWNsZVRyYW5zaXRpb246IExpZmVjeWNsZVRyYW5zaXRpb247XG5cbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgZGF0YSB0byBwYXNzIHRvIHRoZSBsaWZlY3ljbGUgaG9vayB0YXJnZXRcbiAgICpcbiAgICogQGRlZmF1bHQgTm8gbWV0YWRhdGFcbiAgICovXG4gIG5vdGlmaWNhdGlvbk1ldGFkYXRhPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdGFyZ2V0IG9mIHRoZSBsaWZlY3ljbGUgaG9va1xuICAgKi9cbiAgbm90aWZpY2F0aW9uVGFyZ2V0OiBhcGkuSUxpZmVjeWNsZUhvb2tUYXJnZXQ7XG5cbiAgLyoqXG4gICAqIFRoZSByb2xlIHRoYXQgYWxsb3dzIHB1Ymxpc2hpbmcgdG8gdGhlIG5vdGlmaWNhdGlvbiB0YXJnZXRcbiAgICpcbiAgICogQGRlZmF1bHQgQSByb2xlIGlzIGF1dG9tYXRpY2FsbHkgY3JlYXRlZFxuICAgKi9cbiAgcm9sZT86IGlhbS5JUm9sZTtcbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBhIExpZmVjeWNsZSBob29rXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTGlmZWN5Y2xlSG9va1Byb3BzIGV4dGVuZHMgQmFzaWNMaWZlY3ljbGVIb29rUHJvcHMge1xuICAvKipcbiAgICogVGhlIEF1dG9TY2FsaW5nR3JvdXAgdG8gYWRkIHRoZSBsaWZlY3ljbGUgaG9vayB0b1xuICAgKi9cbiAgYXV0b1NjYWxpbmdHcm91cDogSUF1dG9TY2FsaW5nR3JvdXA7XG59XG5cbmV4cG9ydCBjbGFzcyBMaWZlY3ljbGVIb29rIGV4dGVuZHMgY2RrLkNvbnN0cnVjdCBpbXBsZW1lbnRzIGFwaS5JTGlmZWN5Y2xlSG9vayB7XG4gIC8qKlxuICAgKiBUaGUgcm9sZSB0aGF0IGFsbG93cyB0aGUgQVNHIHRvIHB1Ymxpc2ggdG8gdGhlIG5vdGlmaWNhdGlvbiB0YXJnZXRcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSByb2xlOiBpYW0uSVJvbGU7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoaXMgbGlmZWN5Y2xlIGhvb2tcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBsaWZlY3ljbGVIb29rTmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHBhcmVudDogY2RrLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IExpZmVjeWNsZUhvb2tQcm9wcykge1xuICAgIHN1cGVyKHBhcmVudCwgaWQpO1xuXG4gICAgdGhpcy5yb2xlID0gcHJvcHMucm9sZSB8fCBuZXcgaWFtLlJvbGUodGhpcywgJ1JvbGUnLCB7XG4gICAgICBhc3N1bWVkQnk6IG5ldyBpYW0uU2VydmljZVByaW5jaXBhbCgnYXV0b3NjYWxpbmcuYW1hem9uYXdzLmNvbScpXG4gICAgfSk7XG5cbiAgICBjb25zdCB0YXJnZXRQcm9wcyA9IHByb3BzLm5vdGlmaWNhdGlvblRhcmdldC5hc0xpZmVjeWNsZUhvb2tUYXJnZXQodGhpcyk7XG5cbiAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBjbG91ZGZvcm1hdGlvbi5MaWZlY3ljbGVIb29rUmVzb3VyY2UodGhpcywgJ1Jlc291cmNlJywge1xuICAgICAgYXV0b1NjYWxpbmdHcm91cE5hbWU6IHByb3BzLmF1dG9TY2FsaW5nR3JvdXAuYXV0b1NjYWxpbmdHcm91cE5hbWUsXG4gICAgICBkZWZhdWx0UmVzdWx0OiBwcm9wcy5kZWZhdWx0UmVzdWx0LFxuICAgICAgaGVhcnRiZWF0VGltZW91dDogcHJvcHMuaGVhcnRiZWF0VGltZW91dFNlYyxcbiAgICAgIGxpZmVjeWNsZUhvb2tOYW1lOiBwcm9wcy5saWZlY3ljbGVIb29rTmFtZSxcbiAgICAgIGxpZmVjeWNsZVRyYW5zaXRpb246IHByb3BzLmxpZmVjeWNsZVRyYW5zaXRpb24sXG4gICAgICBub3RpZmljYXRpb25NZXRhZGF0YTogcHJvcHMubm90aWZpY2F0aW9uTWV0YWRhdGEsXG4gICAgICBub3RpZmljYXRpb25UYXJnZXRBcm46IHRhcmdldFByb3BzLm5vdGlmaWNhdGlvblRhcmdldEFybixcbiAgICAgIHJvbGVBcm46IHRoaXMucm9sZS5yb2xlQXJuLFxuICAgIH0pO1xuXG4gICAgLy8gQSBMaWZlY3ljbGVIb29rIHJlc291cmNlIGlzIGdvaW5nIHRvIGRvIGEgcGVybWlzc2lvbnMgdGVzdCB1cG9uIGNyZWF0aW9uLFxuICAgIC8vIHNvIHdlIGhhdmUgdG8gbWFrZSBzdXJlIHRoZSByb2xlIGhhcyBmdWxsIHBlcm1pc3Npb25zIGJlZm9yZSBjcmVhdGluZyB0aGVcbiAgICAvLyBsaWZlY3ljbGUgaG9vay5cbiAgICAvLyBUaGUgTGF6eURlcGVuZGFibGUgbWFrZXMgc3VyZSB3ZSB0YWtlIGEgZGVwZW5kZW5jeSBvbiBhbnl0aGluZyB0aGF0IGdldHNcbiAgICAvLyBhZGRlZCB0byB0aGUgZGVwZW5kZW5jeUVsZW1lbnRzIGFycmF5LCBldmVuIGlmIGl0IGhhcHBlbnMgYWZ0ZXIgdGhpc1xuICAgIC8vIHBvaW50LlxuICAgIHJlc291cmNlLmFkZERlcGVuZGVuY3kobmV3IExhenlEZXBlbmRhYmxlKHRoaXMucm9sZSkpO1xuXG4gICAgdGhpcy5saWZlY3ljbGVIb29rTmFtZSA9IHJlc291cmNlLmxpZmVjeWNsZUhvb2tOYW1lO1xuICB9XG59XG5cbmV4cG9ydCBlbnVtIERlZmF1bHRSZXN1bHQge1xuICBDb250aW51ZSA9ICdDT05USU5VRScsXG4gIEFiYW5kb24gPSAnQUJBTkRPTicsXG59XG5cbi8qKlxuICogV2hhdCBpbnN0YW5jZSB0cmFuc2l0aW9uIHRvIGF0dGFjaCB0aGUgaG9vayB0b1xuICovXG5leHBvcnQgZW51bSBMaWZlY3ljbGVUcmFuc2l0aW9uIHtcbiAgLyoqXG4gICAqIEV4ZWN1dGUgdGhlIGhvb2sgd2hlbiBhbiBpbnN0YW5jZSBpcyBhYm91dCB0byBiZSBhZGRlZFxuICAgKi9cbiAgSW5zdGFuY2VMYXVuY2hpbmcgPSAnYXV0b3NjYWxpbmc6RUMyX0lOU1RBTkNFX0xBVU5DSElORycsXG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgdGhlIGhvb2sgd2hlbiBhbiBpbnN0YW5jZSBpcyBhYm91dCB0byBiZSB0ZXJtaW5hdGVkXG4gICAqL1xuICBJbnN0YW5jZVRlcm1pbmF0aW5nID0gJ2F1dG9zY2FsaW5nOkVDMl9JTlNUQU5DRV9URVJNSU5BVElORycsXG59Il19
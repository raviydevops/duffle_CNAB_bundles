"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const codepipeline = require("@aws-cdk/aws-codepipeline-api");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
/**
 * Base class for Actions that execute CloudFormation
 */
class PipelineCloudFormationAction extends codepipeline.Action {
    constructor(parent, id, props, configuration) {
        super(parent, id, {
            stage: props.stage,
            runOrder: props.runOrder,
            region: props.region,
            artifactBounds: {
                minInputs: 0,
                maxInputs: 10,
                minOutputs: 0,
                maxOutputs: 1,
            },
            provider: 'CloudFormation',
            category: codepipeline.ActionCategory.Deploy,
            configuration: Object.assign({ StackName: props.stackName, OutputFileName: props.outputFileName }, configuration)
        });
        if (props.outputFileName) {
            this.outputArtifact = this.addOutputArtifact(props.outputArtifactName ||
                (props.stage.name + this.id + 'Artifact'));
        }
    }
}
exports.PipelineCloudFormationAction = PipelineCloudFormationAction;
/**
 * CodePipeline action to execute a prepared change set.
 */
class PipelineExecuteChangeSetAction extends PipelineCloudFormationAction {
    constructor(parent, id, props) {
        super(parent, id, props, {
            ActionMode: 'CHANGE_SET_EXECUTE',
            ChangeSetName: props.changeSetName,
        });
        SingletonPolicy.forRole(props.stage.pipeline.role)
            .grantExecuteChangeSet(props);
    }
}
exports.PipelineExecuteChangeSetAction = PipelineExecuteChangeSetAction;
// tslint:enable:max-line-length
/**
 * Base class for all CloudFormation actions that execute or stage deployments.
 */
class PipelineCloudFormationDeployAction extends PipelineCloudFormationAction {
    constructor(parent, id, props, configuration) {
        const capabilities = props.adminPermissions && props.capabilities === undefined ? CloudFormationCapabilities.NamedIAM : props.capabilities;
        super(parent, id, props, Object.assign({}, configuration, { 
            // None evaluates to empty string which is falsey and results in undefined
            Capabilities: (capabilities && capabilities.toString()) || undefined, RoleArn: new cdk.Token(() => this.role.roleArn), ParameterOverrides: cdk.CloudFormationJSON.stringify(props.parameterOverrides), TemplateConfiguration: props.templateConfiguration ? props.templateConfiguration.location : undefined, StackName: props.stackName }));
        if (props.role) {
            this.role = props.role;
        }
        else {
            this.role = new iam.Role(this, 'Role', {
                assumedBy: new iam.ServicePrincipal('cloudformation.amazonaws.com')
            });
            if (props.adminPermissions) {
                this.role.addToPolicy(new iam.PolicyStatement().addAction('*').addAllResources());
            }
        }
        SingletonPolicy.forRole(props.stage.pipeline.role).grantPassRole(this.role);
    }
    /**
     * Add statement to the service role assumed by CloudFormation while executing this action.
     */
    addToRolePolicy(statement) {
        return this.role.addToPolicy(statement);
    }
}
exports.PipelineCloudFormationDeployAction = PipelineCloudFormationDeployAction;
/**
 * CodePipeline action to prepare a change set.
 *
 * Creates the change set if it doesn't exist based on the stack name and template that you submit.
 * If the change set exists, AWS CloudFormation deletes it, and then creates a new one.
 */
class PipelineCreateReplaceChangeSetAction extends PipelineCloudFormationDeployAction {
    constructor(parent, id, props) {
        super(parent, id, props, {
            ActionMode: 'CHANGE_SET_REPLACE',
            ChangeSetName: props.changeSetName,
            TemplatePath: props.templatePath.location,
        });
        this.addInputArtifact(props.templatePath.artifact);
        if (props.templateConfiguration && props.templateConfiguration.artifact.name !== props.templatePath.artifact.name) {
            this.addInputArtifact(props.templateConfiguration.artifact);
        }
        SingletonPolicy.forRole(props.stage.pipeline.role).grantCreateReplaceChangeSet(props);
    }
}
exports.PipelineCreateReplaceChangeSetAction = PipelineCreateReplaceChangeSetAction;
/**
 * CodePipeline action to deploy a stack.
 *
 * Creates the stack if the specified stack doesn't exist. If the stack exists,
 * AWS CloudFormation updates the stack. Use this action to update existing
 * stacks.
 *
 * AWS CodePipeline won't replace the stack, and will fail deployment if the
 * stack is in a failed state. Use `ReplaceOnFailure` for an action that
 * will delete and recreate the stack to try and recover from failed states.
 *
 * Use this action to automatically replace failed stacks without recovering or
 * troubleshooting them. You would typically choose this mode for testing.
 */
class PipelineCreateUpdateStackAction extends PipelineCloudFormationDeployAction {
    constructor(parent, id, props) {
        super(parent, id, props, {
            ActionMode: props.replaceOnFailure ? 'REPLACE_ON_FAILURE' : 'CREATE_UPDATE',
            TemplatePath: props.templatePath.location
        });
        this.addInputArtifact(props.templatePath.artifact);
        if (props.templateConfiguration && props.templateConfiguration.artifact.name !== props.templatePath.artifact.name) {
            this.addInputArtifact(props.templateConfiguration.artifact);
        }
        SingletonPolicy.forRole(props.stage.pipeline.role).grantCreateUpdateStack(props);
    }
}
exports.PipelineCreateUpdateStackAction = PipelineCreateUpdateStackAction;
/**
 * CodePipeline action to delete a stack.
 *
 * Deletes a stack. If you specify a stack that doesn't exist, the action completes successfully
 * without deleting a stack.
 */
class PipelineDeleteStackAction extends PipelineCloudFormationDeployAction {
    constructor(parent, id, props) {
        super(parent, id, props, {
            ActionMode: 'DELETE_ONLY',
        });
        SingletonPolicy.forRole(props.stage.pipeline.role).grantDeleteStack(props);
    }
}
exports.PipelineDeleteStackAction = PipelineDeleteStackAction;
/**
 * Capabilities that affect whether CloudFormation is allowed to change IAM resources
 */
var CloudFormationCapabilities;
(function (CloudFormationCapabilities) {
    /**
     * No IAM Capabilities
     *
     * Pass this capability if you wish to block the creation IAM resources.
     * @link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities
     */
    CloudFormationCapabilities["None"] = "";
    /**
     * Capability to create anonymous IAM resources
     *
     * Pass this capability if you're only creating anonymous resources.
     * @link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities
     */
    CloudFormationCapabilities["AnonymousIAM"] = "CAPABILITY_IAM";
    /**
     * Capability to create named IAM resources.
     *
     * Pass this capability if you're creating IAM resources that have physical
     * names.
     *
     * `CloudFormationCapabilities.NamedIAM` implies `CloudFormationCapabilities.IAM`; you don't have to pass both.
     * @link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities
     */
    CloudFormationCapabilities["NamedIAM"] = "CAPABILITY_NAMED_IAM";
})(CloudFormationCapabilities = exports.CloudFormationCapabilities || (exports.CloudFormationCapabilities = {}));
/**
 * Manages a bunch of singleton-y statements on the policy of an IAM Role.
 * Dedicated methods can be used to add specific permissions to the role policy
 * using as few statements as possible (adding resources to existing compatible
 * statements instead of adding new statements whenever possible).
 *
 * Statements created outside of this class are not considered when adding new
 * permissions.
 */
class SingletonPolicy extends cdk.Construct {
    constructor(role) {
        super(role, SingletonPolicy.UUID);
        this.role = role;
        this.statements = {};
    }
    /**
     * Obtain a SingletonPolicy for a given role.
     * @param role the Role this policy is bound to.
     * @returns the SingletonPolicy for this role.
     */
    static forRole(role) {
        const found = role.tryFindChild(SingletonPolicy.UUID);
        return found || new SingletonPolicy(role);
    }
    grantExecuteChangeSet(props) {
        this.statementFor({
            actions: ['cloudformation:ExecuteChangeSet'],
            conditions: { StringEquals: { 'cloudformation:ChangeSetName': props.changeSetName } },
        }).addResource(stackArnFromProps(props));
    }
    grantCreateReplaceChangeSet(props) {
        this.statementFor({
            actions: [
                'cloudformation:CreateChangeSet',
                'cloudformation:DeleteChangeSet',
                'cloudformation:DescribeChangeSet',
                'cloudformation:DescribeStacks',
            ],
            conditions: { StringEqualsIfExists: { 'cloudformation:ChangeSetName': props.changeSetName } },
        }).addResource(stackArnFromProps(props));
    }
    grantCreateUpdateStack(props) {
        const actions = [
            'cloudformation:DescribeStack*',
            'cloudformation:CreateStack',
            'cloudformation:UpdateStack',
            'cloudformation:GetTemplate*',
            'cloudformation:ValidateTemplate',
            'cloudformation:GetStackPolicy',
            'cloudformation:SetStackPolicy',
        ];
        if (props.replaceOnFailure) {
            actions.push('cloudformation:DeleteStack');
        }
        this.statementFor({ actions }).addResource(stackArnFromProps(props));
    }
    grantDeleteStack(props) {
        this.statementFor({
            actions: [
                'cloudformation:DescribeStack*',
                'cloudformation:DeleteStack',
            ]
        }).addResource(stackArnFromProps(props));
    }
    grantPassRole(role) {
        this.statementFor({ actions: ['iam:PassRole'] }).addResource(role.roleArn);
    }
    statementFor(template) {
        const key = keyFor(template);
        if (!(key in this.statements)) {
            this.statements[key] = new iam.PolicyStatement().addActions(...template.actions);
            if (template.conditions) {
                this.statements[key].addConditions(template.conditions);
            }
            this.role.addToPolicy(this.statements[key]);
        }
        return this.statements[key];
        function keyFor(props) {
            const actions = `${props.actions.sort().join('\x1F')}`;
            const conditions = formatConditions(props.conditions);
            return `${actions}\x1D${conditions}`;
            function formatConditions(cond) {
                if (cond == null) {
                    return '';
                }
                let result = '';
                for (const op of Object.keys(cond).sort()) {
                    result += `${op}\x1E`;
                    const condition = cond[op];
                    for (const attribute of Object.keys(condition).sort()) {
                        const value = condition[attribute];
                        result += `${value}\x1F`;
                    }
                }
                return result;
            }
        }
    }
}
SingletonPolicy.UUID = '8389e75f-0810-4838-bf64-d6f85a95cf83';
function stackArnFromProps(props) {
    return cdk.ArnUtils.fromComponents({
        region: props.region,
        service: 'cloudformation',
        resource: 'stack',
        resourceName: `${props.stackName}/*`
    });
}
//# sourceMappingURL=data:application/json;base64,
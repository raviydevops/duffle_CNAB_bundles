"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cloudformation_generated_1 = require("./cloudformation.generated");
/**
 * Custom resource that is implemented using a Lambda
 *
 * As a custom resource author, you should be publishing a subclass of this class
 * that hides the choice of provider, and accepts a strongly-typed properties
 * object with the properties your provider accepts.
 */
class CustomResource extends cloudformation_generated_1.cloudformation.CustomResource {
    constructor(parent, name, props) {
        if (!!props.lambdaProvider === !!props.topicProvider) {
            throw new Error('Exactly one of "lambdaProvider" or "topicProvider" must be set.');
        }
        super(parent, name, {
            serviceToken: props.lambdaProvider ? props.lambdaProvider.functionArn : props.topicProvider.topicArn
        });
        this.userProperties = props.properties;
        if (props.resourceType) {
            this.useCustomResourceType(props.resourceType);
        }
    }
    /**
     * Override renderProperties to mix in the user-defined properties
     */
    renderProperties(properties) {
        const props = super.renderProperties(properties);
        return Object.assign(props, uppercaseProperties(this.userProperties || {}));
    }
    useCustomResourceType(resourceType) {
        if (!resourceType.startsWith('Custom::')) {
            throw new Error(`Custom resource type must begin with "Custom::" (${resourceType})`);
        }
        const typeName = resourceType.substr(resourceType.indexOf('::') + 2);
        if (typeName.length > 60) {
            throw new Error(`Custom resource type length > 60 (${resourceType})`);
        }
        if (!/^[a-z0-9_@-]+$/i.test(typeName)) {
            throw new Error(`Custom resource type name can only include alphanumeric characters and _@- (${typeName})`);
        }
        this.addOverride('Type', resourceType);
    }
}
exports.CustomResource = CustomResource;
/**
 * Uppercase the first letter of every property name
 *
 * It's customary for CloudFormation properties to start with capitals, and our
 * properties to start with lowercase, so this function translates from one
 * to the other
 */
function uppercaseProperties(props) {
    const ret = {};
    Object.keys(props).forEach(key => {
        const upper = key.substr(0, 1).toUpperCase() + key.substr(1);
        ret[upper] = props[key];
    });
    return ret;
}
//# sourceMappingURL=data:application/json;base64,
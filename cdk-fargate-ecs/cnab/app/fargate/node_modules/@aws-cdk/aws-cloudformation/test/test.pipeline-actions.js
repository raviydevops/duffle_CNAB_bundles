"use strict";
const cpapi = require("@aws-cdk/aws-codepipeline-api");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const _ = require("lodash");
const nodeunit = require("nodeunit");
const cloudformation = require("../lib");
function _assertActionMatches(test, actions, owner, provider, category, configuration) {
    const configurationStr = configuration
        ? `configuration including ${JSON.stringify(cdk.resolve(configuration), null, 2)}`
        : '';
    const actionsStr = JSON.stringify(actions.map(a => ({ owner: a.owner, provider: a.provider, category: a.category, configuration: cdk.resolve(a.configuration) })), null, 2);
    test.ok(_hasAction(actions, owner, provider, category, configuration), `Expected to find an action with owner ${owner}, provider ${provider}, category ${category}${configurationStr}, but found ${actionsStr}`);
}
function _hasAction(actions, owner, provider, category, configuration) {
    for (const action of actions) {
        if (action.owner !== owner) {
            continue;
        }
        if (action.provider !== provider) {
            continue;
        }
        if (action.category !== category) {
            continue;
        }
        if (configuration && !action.configuration) {
            continue;
        }
        if (configuration) {
            for (const key of Object.keys(configuration)) {
                if (!_.isEqual(cdk.resolve(action.configuration[key]), cdk.resolve(configuration[key]))) {
                    continue;
                }
            }
        }
        return true;
    }
    return false;
}
function _assertPermissionGranted(test, statements, action, resource, conditions) {
    const conditionStr = conditions
        ? ` with condition(s) ${JSON.stringify(cdk.resolve(conditions))}`
        : '';
    const resolvedStatements = cdk.resolve(statements);
    const statementsStr = JSON.stringify(resolvedStatements, null, 2);
    test.ok(_grantsPermission(resolvedStatements, action, resource, conditions), `Expected to find a statement granting ${action} on ${JSON.stringify(cdk.resolve(resource))}${conditionStr}, found:\n${statementsStr}`);
}
function _grantsPermission(statements, action, resource, conditions) {
    for (const statement of statements.filter(s => s.Effect === 'Allow')) {
        if (!_isOrContains(statement.Action, action)) {
            continue;
        }
        if (!_isOrContains(statement.Resource, resource)) {
            continue;
        }
        if (conditions && !_isOrContains(statement.Condition, conditions)) {
            continue;
        }
        return true;
    }
    return false;
}
function _isOrContains(entity, value) {
    const resolvedValue = cdk.resolve(value);
    const resolvedEntity = cdk.resolve(entity);
    if (_.isEqual(resolvedEntity, resolvedValue)) {
        return true;
    }
    if (!Array.isArray(resolvedEntity)) {
        return false;
    }
    for (const tested of entity) {
        if (_.isEqual(tested, resolvedValue)) {
            return true;
        }
    }
    return false;
}
function _stackArn(stackName) {
    return cdk.ArnUtils.fromComponents({
        service: 'cloudformation',
        resource: 'stack',
        resourceName: `${stackName}/*`,
    });
}
class PipelineDouble {
    constructor({ pipelineName, role }) {
        this.pipelineName = pipelineName || 'TestPipeline';
        this.pipelineArn = cdk.ArnUtils.fromComponents({ service: 'codepipeline', resource: 'pipeline', resourceName: this.pipelineName });
        this.role = role;
    }
    get uniqueId() {
        throw new Error("Unsupported");
    }
    grantBucketRead() {
        throw new Error("Unsupported");
    }
    grantBucketReadWrite() {
        throw new Error("Unsupported");
    }
    asEventRuleTarget() {
        throw new Error("Unsupported");
    }
}
class StageDouble {
    constructor({ name, pipeline }) {
        this._internal = this;
        this.actions = new Array();
        this.name = name || 'TestStage';
        this.pipeline = pipeline;
    }
    _attachAction(action) {
        this.actions.push(action);
    }
    _generateOutputArtifactName() {
        throw new Error('Unsupported');
    }
    _findInputArtifact() {
        throw new Error('Unsupported');
    }
}
class RoleDouble extends iam.Role {
    constructor(parent, id, props = { assumedBy: new iam.ServicePrincipal('test') }) {
        super(parent, id, props);
        this.statements = new Array();
    }
    addToPolicy(statement) {
        super.addToPolicy(statement);
        this.statements.push(statement);
    }
}
module.exports = nodeunit.testCase({
    'CreateReplaceChangeSet': {
        'works'(test) {
            const stack = new cdk.Stack();
            const pipelineRole = new RoleDouble(stack, 'PipelineRole');
            const stage = new StageDouble({ pipeline: new PipelineDouble({ role: pipelineRole }) });
            const artifact = new cpapi.Artifact(stack, 'TestArtifact');
            const action = new cloudformation.PipelineCreateReplaceChangeSetAction(stack, 'Action', {
                stage,
                changeSetName: 'MyChangeSet',
                stackName: 'MyStack',
                templatePath: artifact.atPath('path/to/file'),
                adminPermissions: false,
            });
            _assertPermissionGranted(test, pipelineRole.statements, 'iam:PassRole', action.role.roleArn);
            const stackArn = _stackArn('MyStack');
            const changeSetCondition = { StringEqualsIfExists: { 'cloudformation:ChangeSetName': 'MyChangeSet' } };
            _assertPermissionGranted(test, pipelineRole.statements, 'cloudformation:DescribeStacks', stackArn, changeSetCondition);
            _assertPermissionGranted(test, pipelineRole.statements, 'cloudformation:DescribeChangeSet', stackArn, changeSetCondition);
            _assertPermissionGranted(test, pipelineRole.statements, 'cloudformation:CreateChangeSet', stackArn, changeSetCondition);
            _assertPermissionGranted(test, pipelineRole.statements, 'cloudformation:DeleteChangeSet', stackArn, changeSetCondition);
            test.deepEqual(action._inputArtifacts, [artifact], 'The inputArtifact was correctly registered');
            _assertActionMatches(test, stage.actions, 'AWS', 'CloudFormation', 'Deploy', {
                ActionMode: 'CHANGE_SET_CREATE_REPLACE',
                StackName: 'MyStack',
                ChangeSetName: 'MyChangeSet'
            });
            test.done();
        },
        'uses a single permission statement if the same ChangeSet name is used'(test) {
            const stack = new cdk.Stack();
            const pipelineRole = new RoleDouble(stack, 'PipelineRole');
            const stage = new StageDouble({ pipeline: new PipelineDouble({ role: pipelineRole }) });
            const artifact = new cpapi.Artifact(stack, 'TestArtifact');
            new cloudformation.PipelineCreateReplaceChangeSetAction(stack, 'ActionA', {
                stage,
                changeSetName: 'MyChangeSet',
                stackName: 'StackA',
                adminPermissions: false,
                templatePath: artifact.atPath('path/to/file')
            });
            new cloudformation.PipelineCreateReplaceChangeSetAction(stack, 'ActionB', {
                stage,
                changeSetName: 'MyChangeSet',
                stackName: 'StackB',
                adminPermissions: false,
                templatePath: artifact.atPath('path/to/other/file')
            });
            test.deepEqual(cdk.resolve(pipelineRole.statements), [
                {
                    Action: 'iam:PassRole',
                    Effect: 'Allow',
                    Resource: [
                        { 'Fn::GetAtt': ['ActionARole72759154', 'Arn'] },
                        { 'Fn::GetAtt': ['ActionBRole6A2F6804', 'Arn'] }
                    ],
                },
                {
                    Action: [
                        'cloudformation:CreateChangeSet',
                        'cloudformation:DeleteChangeSet',
                        'cloudformation:DescribeChangeSet',
                        'cloudformation:DescribeStacks'
                    ],
                    Condition: { StringEqualsIfExists: { 'cloudformation:ChangeSetName': 'MyChangeSet' } },
                    Effect: 'Allow',
                    Resource: [
                        // tslint:disable-next-line:max-line-length
                        { 'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':cloudformation:', { Ref: 'AWS::Region' }, ':', { Ref: 'AWS::AccountId' }, ':stack/StackA/*']] },
                        // tslint:disable-next-line:max-line-length
                        { 'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':cloudformation:', { Ref: 'AWS::Region' }, ':', { Ref: 'AWS::AccountId' }, ':stack/StackB/*']] }
                    ],
                }
            ]);
            test.done();
        }
    },
    'ExecuteChangeSet': {
        'works'(test) {
            const stack = new cdk.Stack();
            const pipelineRole = new RoleDouble(stack, 'PipelineRole');
            const stage = new StageDouble({ pipeline: new PipelineDouble({ role: pipelineRole }) });
            new cloudformation.PipelineExecuteChangeSetAction(stack, 'Action', {
                stage,
                changeSetName: 'MyChangeSet',
                stackName: 'MyStack',
            });
            const stackArn = _stackArn('MyStack');
            _assertPermissionGranted(test, pipelineRole.statements, 'cloudformation:ExecuteChangeSet', stackArn, { StringEquals: { 'cloudformation:ChangeSetName': 'MyChangeSet' } });
            _assertActionMatches(test, stage.actions, 'AWS', 'CloudFormation', 'Deploy', {
                ActionMode: 'CHANGE_SET_EXECUTE',
                StackName: 'MyStack',
                ChangeSetName: 'MyChangeSet'
            });
            test.done();
        },
        'uses a single permission statement if the same ChangeSet name is used'(test) {
            const stack = new cdk.Stack();
            const pipelineRole = new RoleDouble(stack, 'PipelineRole');
            const stage = new StageDouble({ pipeline: new PipelineDouble({ role: pipelineRole }) });
            new cloudformation.PipelineExecuteChangeSetAction(stack, 'ActionA', {
                stage,
                changeSetName: 'MyChangeSet',
                stackName: 'StackA',
            });
            new cloudformation.PipelineExecuteChangeSetAction(stack, 'ActionB', {
                stage,
                changeSetName: 'MyChangeSet',
                stackName: 'StackB',
            });
            test.deepEqual(cdk.resolve(pipelineRole.statements), [
                {
                    Action: 'cloudformation:ExecuteChangeSet',
                    Condition: { StringEquals: { 'cloudformation:ChangeSetName': 'MyChangeSet' } },
                    Effect: 'Allow',
                    Resource: [
                        // tslint:disable-next-line:max-line-length
                        { 'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':cloudformation:', { Ref: 'AWS::Region' }, ':', { Ref: 'AWS::AccountId' }, ':stack/StackA/*']] },
                        // tslint:disable-next-line:max-line-length
                        { 'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':cloudformation:', { Ref: 'AWS::Region' }, ':', { Ref: 'AWS::AccountId' }, ':stack/StackB/*']] }
                    ],
                }
            ]);
            test.done();
        }
    },
    'the CreateUpdateStack Action sets the DescribeStack*, Create/Update/DeleteStack & PassRole permissions'(test) {
        const stack = new cdk.Stack();
        const pipelineRole = new RoleDouble(stack, 'PipelineRole');
        const action = new cloudformation.PipelineCreateUpdateStackAction(stack, 'Action', {
            stage: new StageDouble({ pipeline: new PipelineDouble({ role: pipelineRole }) }),
            templatePath: new cpapi.Artifact(stack, 'TestArtifact').atPath('some/file'),
            stackName: 'MyStack',
            adminPermissions: false,
            replaceOnFailure: true,
        });
        const stackArn = _stackArn('MyStack');
        _assertPermissionGranted(test, pipelineRole.statements, 'cloudformation:DescribeStack*', stackArn);
        _assertPermissionGranted(test, pipelineRole.statements, 'cloudformation:CreateStack', stackArn);
        _assertPermissionGranted(test, pipelineRole.statements, 'cloudformation:UpdateStack', stackArn);
        _assertPermissionGranted(test, pipelineRole.statements, 'cloudformation:DeleteStack', stackArn);
        _assertPermissionGranted(test, pipelineRole.statements, 'iam:PassRole', action.role.roleArn);
        test.done();
    },
    'the DeleteStack Action sets the DescribeStack*, DeleteStack & PassRole permissions'(test) {
        const stack = new cdk.Stack();
        const pipelineRole = new RoleDouble(stack, 'PipelineRole');
        const action = new cloudformation.PipelineDeleteStackAction(stack, 'Action', {
            stage: new StageDouble({ pipeline: new PipelineDouble({ role: pipelineRole }) }),
            adminPermissions: false,
            stackName: 'MyStack',
        });
        const stackArn = _stackArn('MyStack');
        _assertPermissionGranted(test, pipelineRole.statements, 'cloudformation:DescribeStack*', stackArn);
        _assertPermissionGranted(test, pipelineRole.statements, 'cloudformation:DeleteStack', stackArn);
        _assertPermissionGranted(test, pipelineRole.statements, 'iam:PassRole', action.role.roleArn);
        test.done();
    },
});
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lambda = require("@aws-cdk/aws-lambda");
const cdk = require("@aws-cdk/cdk");
const fs = require("fs");
const cloudformation = require("../lib");
class DemoResource extends cdk.Construct {
    constructor(parent, name, props) {
        super(parent, name);
        const resource = new cloudformation.CustomResource(this, 'Resource', {
            lambdaProvider: new lambda.SingletonFunction(this, 'Singleton', {
                uuid: 'f7d4f730-4ee1-11e8-9c2d-fa7ae01bbebc',
                // This makes the demo only work as top-level TypeScript program, but that's fine for now
                code: new lambda.InlineCode(fs.readFileSync('integ.trivial-lambda-provider.py', { encoding: 'utf-8' })),
                handler: 'index.main',
                timeout: 300,
                runtime: lambda.Runtime.Python27,
            }),
            properties: props
        });
        this.response = resource.getAtt('Response').toString();
    }
}
/**
 * A stack that only sets up the CustomResource and shows how to get an attribute from it
 */
class SucceedingStack extends cdk.Stack {
    constructor(parent, name, props) {
        super(parent, name, props);
        const resource = new DemoResource(this, 'DemoResource', {
            message: 'CustomResource says hello',
        });
        // Publish the custom resource output
        new cdk.Output(this, 'ResponseMessage', {
            description: 'The message that came back from the Custom Resource',
            value: resource.response
        });
    }
}
const app = new cdk.App();
new SucceedingStack(app, 'SucceedingStack');
app.run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcudHJpdmlhbC1sYW1iZGEtcmVzb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy50cml2aWFsLWxhbWJkYS1yZXNvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhDQUErQztBQUMvQyxvQ0FBcUM7QUFDckMseUJBQTBCO0FBQzFCLHlDQUEwQztBQWMxQyxNQUFNLFlBQWEsU0FBUSxHQUFHLENBQUMsU0FBUztJQUd0QyxZQUFZLE1BQXFCLEVBQUUsSUFBWSxFQUFFLEtBQXdCO1FBQ3ZFLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFcEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxjQUFjLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDbkUsY0FBYyxFQUFFLElBQUksTUFBTSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxXQUFXLEVBQUU7Z0JBQzlELElBQUksRUFBRSxzQ0FBc0M7Z0JBQzVDLHlGQUF5RjtnQkFDekYsSUFBSSxFQUFFLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLGtDQUFrQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7Z0JBQ3ZHLE9BQU8sRUFBRSxZQUFZO2dCQUNyQixPQUFPLEVBQUUsR0FBRztnQkFDWixPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRO2FBQ2pDLENBQUM7WUFDRixVQUFVLEVBQUUsS0FBSztTQUNsQixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDekQsQ0FBQztDQUNGO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLGVBQWdCLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFDckMsWUFBWSxNQUFlLEVBQUUsSUFBWSxFQUFFLEtBQXNCO1FBQy9ELEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRTNCLE1BQU0sUUFBUSxHQUFHLElBQUksWUFBWSxDQUFDLElBQUksRUFBRSxjQUFjLEVBQUU7WUFDdEQsT0FBTyxFQUFFLDJCQUEyQjtTQUNyQyxDQUFDLENBQUM7UUFFSCxxQ0FBcUM7UUFDckMsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxpQkFBaUIsRUFBRTtZQUN0QyxXQUFXLEVBQUUscURBQXFEO1lBQ2xFLEtBQUssRUFBRSxRQUFRLENBQUMsUUFBUTtTQUN6QixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFDRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixJQUFJLGVBQWUsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUU1QyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbGFtYmRhID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWxhbWJkYScpO1xuaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NkaycpO1xuaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmltcG9ydCBjbG91ZGZvcm1hdGlvbiA9IHJlcXVpcmUoJy4uL2xpYicpO1xuXG5pbnRlcmZhY2UgRGVtb1Jlc291cmNlUHJvcHMge1xuICAvKipcbiAgICogTWVzc2FnZSB0byBlY2hvXG4gICAqL1xuICBtZXNzYWdlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNldCB0aGlzIHRvIHRydWUgdG8gZmFpbCB0aGUgQ1JFQVRFIGludm9jYXRpb25cbiAgICovXG4gIGZhaWxDcmVhdGU/OiBib29sZWFuO1xufVxuXG5jbGFzcyBEZW1vUmVzb3VyY2UgZXh0ZW5kcyBjZGsuQ29uc3RydWN0IHtcbiAgcHVibGljIHJlYWRvbmx5IHJlc3BvbnNlOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBjZGsuQ29uc3RydWN0LCBuYW1lOiBzdHJpbmcsIHByb3BzOiBEZW1vUmVzb3VyY2VQcm9wcykge1xuICAgIHN1cGVyKHBhcmVudCwgbmFtZSk7XG5cbiAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBjbG91ZGZvcm1hdGlvbi5DdXN0b21SZXNvdXJjZSh0aGlzLCAnUmVzb3VyY2UnLCB7XG4gICAgICBsYW1iZGFQcm92aWRlcjogbmV3IGxhbWJkYS5TaW5nbGV0b25GdW5jdGlvbih0aGlzLCAnU2luZ2xldG9uJywge1xuICAgICAgICB1dWlkOiAnZjdkNGY3MzAtNGVlMS0xMWU4LTljMmQtZmE3YWUwMWJiZWJjJyxcbiAgICAgICAgLy8gVGhpcyBtYWtlcyB0aGUgZGVtbyBvbmx5IHdvcmsgYXMgdG9wLWxldmVsIFR5cGVTY3JpcHQgcHJvZ3JhbSwgYnV0IHRoYXQncyBmaW5lIGZvciBub3dcbiAgICAgICAgY29kZTogbmV3IGxhbWJkYS5JbmxpbmVDb2RlKGZzLnJlYWRGaWxlU3luYygnaW50ZWcudHJpdmlhbC1sYW1iZGEtcHJvdmlkZXIucHknLCB7IGVuY29kaW5nOiAndXRmLTgnIH0pKSxcbiAgICAgICAgaGFuZGxlcjogJ2luZGV4Lm1haW4nLFxuICAgICAgICB0aW1lb3V0OiAzMDAsXG4gICAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLlB5dGhvbjI3LFxuICAgICAgfSksXG4gICAgICBwcm9wZXJ0aWVzOiBwcm9wc1xuICAgIH0pO1xuXG4gICAgdGhpcy5yZXNwb25zZSA9IHJlc291cmNlLmdldEF0dCgnUmVzcG9uc2UnKS50b1N0cmluZygpO1xuICB9XG59XG5cbi8qKlxuICogQSBzdGFjayB0aGF0IG9ubHkgc2V0cyB1cCB0aGUgQ3VzdG9tUmVzb3VyY2UgYW5kIHNob3dzIGhvdyB0byBnZXQgYW4gYXR0cmlidXRlIGZyb20gaXRcbiAqL1xuY2xhc3MgU3VjY2VlZGluZ1N0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgY29uc3RydWN0b3IocGFyZW50OiBjZGsuQXBwLCBuYW1lOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihwYXJlbnQsIG5hbWUsIHByb3BzKTtcblxuICAgIGNvbnN0IHJlc291cmNlID0gbmV3IERlbW9SZXNvdXJjZSh0aGlzLCAnRGVtb1Jlc291cmNlJywge1xuICAgICAgbWVzc2FnZTogJ0N1c3RvbVJlc291cmNlIHNheXMgaGVsbG8nLFxuICAgIH0pO1xuXG4gICAgLy8gUHVibGlzaCB0aGUgY3VzdG9tIHJlc291cmNlIG91dHB1dFxuICAgIG5ldyBjZGsuT3V0cHV0KHRoaXMsICdSZXNwb25zZU1lc3NhZ2UnLCB7XG4gICAgICBkZXNjcmlwdGlvbjogJ1RoZSBtZXNzYWdlIHRoYXQgY2FtZSBiYWNrIGZyb20gdGhlIEN1c3RvbSBSZXNvdXJjZScsXG4gICAgICB2YWx1ZTogcmVzb3VyY2UucmVzcG9uc2VcbiAgICB9KTtcbiAgfVxufVxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxubmV3IFN1Y2NlZWRpbmdTdGFjayhhcHAsICdTdWNjZWVkaW5nU3RhY2snKTtcblxuYXBwLnJ1bigpO1xuIl19
import { Test } from 'nodeunit';
declare const _default: {
    'default bucket'(test: Test): void;
    'bucket without encryption'(test: Test): void;
    'bucket with managed encryption'(test: Test): void;
    'fails if encryption key is used with managed encryption'(test: Test): void;
    'fails if encryption key is used with encryption set to unencrypted'(test: Test): void;
    'encryptionKey can specify kms key'(test: Test): void;
    'bucket with versioning turned on'(test: Test): void;
    'permissions': {
        'addPermission creates a bucket policy'(test: Test): void;
        'forBucket returns a permission statement associated with the bucket\'s ARN'(test: Test): void;
        'arnForObjects returns a permission statement associated with objects in the bucket'(test: Test): void;
        'arnForObjects accepts multiple arguments and FnConcats them'(test: Test): void;
    };
    'removal policy can be used to specify behavior upon delete'(test: Test): void;
    'import/export': {
        'export creates outputs for the bucket attributes and returns a ref object'(test: Test): void;
        'refs will include the bucket\'s encryption key if defined'(test: Test): void;
        'static import(ref) allows importing an external/existing bucket'(test: Test): void;
        'import can also be used to import arbitrary ARNs'(test: Test): void;
        'this is how export/import work together'(test: Test): void;
    };
    'grantRead'(test: Test): void;
    'grantReadWrite': {
        'can be used to grant reciprocal permissions to an identity'(test: Test): void;
        'if an encryption key is included, encrypt/decrypt permissions are also added both ways'(test: Test): void;
    };
    'more grants'(test: Test): void;
    'cross-stack permissions'(test: Test): void;
    'urlForObject returns a token with the S3 URL of the token'(test: Test): void;
    'grantPublicAccess': {
        'by default, grants s3:GetObject to all objects'(test: Test): void;
        '"keyPrefix" can be used to only grant access to certain objects'(test: Test): void;
        '"allowedActions" can be used to specify actions explicitly'(test: Test): void;
        'returns the PolicyStatement which can be then customized'(test: Test): void;
    };
    'website configuration': {
        'only index doc'(test: Test): void;
        'fails if only error doc is specified'(test: Test): void;
        'error and index docs'(test: Test): void;
    };
};
export = _default;

"use strict";
const cdk = require("@aws-cdk/cdk");
const util_1 = require("../lib/util");
module.exports = {
    parseBucketArn: {
        'explicit arn'(test) {
            const bucketArn = 'my:bucket:arn';
            test.deepEqual(util_1.parseBucketArn({ bucketArn }), bucketArn);
            test.done();
        },
        'produce arn from bucket name'(test) {
            const bucketName = 'hello';
            test.deepEqual(cdk.resolve(util_1.parseBucketArn({ bucketName })), { 'Fn::Join': ['',
                    ['arn:',
                        { Ref: 'AWS::Partition' },
                        ':s3:::hello']] });
            test.done();
        },
        'fails if neither arn nor name are provided'(test) {
            test.throws(() => util_1.parseBucketArn({}), /Cannot determine bucket ARN. At least `bucketArn` or `bucketName` is needed/);
            test.done();
        }
    },
    parseBucketName: {
        'explicit name'(test) {
            const bucketName = 'foo';
            test.deepEqual(cdk.resolve(util_1.parseBucketName({ bucketName })), 'foo');
            test.done();
        },
        'extract bucket name from string arn'(test) {
            const bucketArn = 'arn:aws:s3:::my-bucket';
            test.deepEqual(cdk.resolve(util_1.parseBucketName({ bucketArn })), 'my-bucket');
            test.done();
        },
        'undefined if cannot extract name from a non-string arn'(test) {
            const bucketArn = new cdk.FnConcat('arn:aws:s3:::', { Ref: 'my-bucket' }).toString();
            test.deepEqual(cdk.resolve(util_1.parseBucketName({ bucketArn })), undefined);
            test.done();
        },
        'fails if arn uses a non "s3" service'(test) {
            const bucketArn = 'arn:aws:xx:::my-bucket';
            test.throws(() => util_1.parseBucketName({ bucketArn }), /Invalid ARN/);
            test.done();
        },
        'fails if ARN has invalid format'(test) {
            const bucketArn = 'invalid-arn';
            test.throws(() => util_1.parseBucketName({ bucketArn }), /ARNs must have at least 6 components/);
            test.done();
        },
        'fails if ARN has path'(test) {
            const bucketArn = 'arn:aws:s3:::my-bucket/path';
            test.throws(() => util_1.parseBucketName({ bucketArn }), /Bucket ARN must not contain a path/);
            test.done();
        }
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC51dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvQ0FBcUM7QUFFckMsc0NBQThEO0FBRTlELGlCQUFTO0lBQ1AsY0FBYyxFQUFFO1FBQ2QsY0FBYyxDQUFDLElBQVU7WUFDdkIsTUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFDO1lBQ2xDLElBQUksQ0FBQyxTQUFTLENBQUMscUJBQWMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDekQsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQztRQUVELDhCQUE4QixDQUFDLElBQVU7WUFDdkMsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDO1lBQzNCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxxQkFBYyxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUN4RSxDQUFFLEVBQUU7b0JBQ0YsQ0FBRSxNQUFNO3dCQUNSLEVBQUUsR0FBRyxFQUFFLGdCQUFnQixFQUFFO3dCQUN6QixhQUFhLENBQUUsQ0FBRSxFQUFFLENBQUMsQ0FBQztZQUN2QixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxDQUFDO1FBRUQsNENBQTRDLENBQUMsSUFBVTtZQUNyRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLHFCQUFjLENBQUMsRUFBRSxDQUFDLEVBQUUsNkVBQTZFLENBQUMsQ0FBQztZQUNySCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxDQUFDO0tBQ0Y7SUFFRCxlQUFlLEVBQUU7UUFFZixlQUFlLENBQUMsSUFBVTtZQUN4QixNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUM7WUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLHNCQUFlLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDcEUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQztRQUVELHFDQUFxQyxDQUFDLElBQVU7WUFDOUMsTUFBTSxTQUFTLEdBQUcsd0JBQXdCLENBQUM7WUFDM0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLHNCQUFlLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDekUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQztRQUVELHdEQUF3RCxDQUFDLElBQVU7WUFDakUsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3JGLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxzQkFBZSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ3ZFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNkLENBQUM7UUFFRCxzQ0FBc0MsQ0FBQyxJQUFVO1lBQy9DLE1BQU0sU0FBUyxHQUFHLHdCQUF3QixDQUFDO1lBQzNDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsc0JBQWUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDakUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQztRQUVELGlDQUFpQyxDQUFDLElBQVU7WUFDMUMsTUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDO1lBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsc0JBQWUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUUsc0NBQXNDLENBQUMsQ0FBQztZQUMxRixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxDQUFDO1FBRUQsdUJBQXVCLENBQUMsSUFBVTtZQUNoQyxNQUFNLFNBQVMsR0FBRyw2QkFBNkIsQ0FBQztZQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLHNCQUFlLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLG9DQUFvQyxDQUFDLENBQUM7WUFDeEYsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQztLQUNGO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcbmltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgeyBwYXJzZUJ1Y2tldEFybiwgcGFyc2VCdWNrZXROYW1lIH0gZnJvbSAnLi4vbGliL3V0aWwnO1xuXG5leHBvcnQgPSB7XG4gIHBhcnNlQnVja2V0QXJuOiB7XG4gICAgJ2V4cGxpY2l0IGFybicodGVzdDogVGVzdCkge1xuICAgICAgY29uc3QgYnVja2V0QXJuID0gJ215OmJ1Y2tldDphcm4nO1xuICAgICAgdGVzdC5kZWVwRXF1YWwocGFyc2VCdWNrZXRBcm4oeyBidWNrZXRBcm4gfSksIGJ1Y2tldEFybik7XG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9LFxuXG4gICAgJ3Byb2R1Y2UgYXJuIGZyb20gYnVja2V0IG5hbWUnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IGJ1Y2tldE5hbWUgPSAnaGVsbG8nO1xuICAgICAgdGVzdC5kZWVwRXF1YWwoY2RrLnJlc29sdmUocGFyc2VCdWNrZXRBcm4oeyBidWNrZXROYW1lIH0pKSwgeyAnRm46OkpvaW4nOlxuICAgICAgWyAnJyxcbiAgICAgICAgWyAnYXJuOicsXG4gICAgICAgIHsgUmVmOiAnQVdTOjpQYXJ0aXRpb24nIH0sXG4gICAgICAgICc6czM6OjpoZWxsbycgXSBdIH0pO1xuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgICdmYWlscyBpZiBuZWl0aGVyIGFybiBub3IgbmFtZSBhcmUgcHJvdmlkZWQnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIHRlc3QudGhyb3dzKCgpID0+IHBhcnNlQnVja2V0QXJuKHt9KSwgL0Nhbm5vdCBkZXRlcm1pbmUgYnVja2V0IEFSTi4gQXQgbGVhc3QgYGJ1Y2tldEFybmAgb3IgYGJ1Y2tldE5hbWVgIGlzIG5lZWRlZC8pO1xuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfVxuICB9LFxuXG4gIHBhcnNlQnVja2V0TmFtZToge1xuXG4gICAgJ2V4cGxpY2l0IG5hbWUnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IGJ1Y2tldE5hbWUgPSAnZm9vJztcbiAgICAgIHRlc3QuZGVlcEVxdWFsKGNkay5yZXNvbHZlKHBhcnNlQnVja2V0TmFtZSh7IGJ1Y2tldE5hbWUgfSkpLCAnZm9vJyk7XG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9LFxuXG4gICAgJ2V4dHJhY3QgYnVja2V0IG5hbWUgZnJvbSBzdHJpbmcgYXJuJyh0ZXN0OiBUZXN0KSB7XG4gICAgICBjb25zdCBidWNrZXRBcm4gPSAnYXJuOmF3czpzMzo6Om15LWJ1Y2tldCc7XG4gICAgICB0ZXN0LmRlZXBFcXVhbChjZGsucmVzb2x2ZShwYXJzZUJ1Y2tldE5hbWUoeyBidWNrZXRBcm4gfSkpLCAnbXktYnVja2V0Jyk7XG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9LFxuXG4gICAgJ3VuZGVmaW5lZCBpZiBjYW5ub3QgZXh0cmFjdCBuYW1lIGZyb20gYSBub24tc3RyaW5nIGFybicodGVzdDogVGVzdCkge1xuICAgICAgY29uc3QgYnVja2V0QXJuID0gbmV3IGNkay5GbkNvbmNhdCgnYXJuOmF3czpzMzo6OicsIHsgUmVmOiAnbXktYnVja2V0JyB9KS50b1N0cmluZygpO1xuICAgICAgdGVzdC5kZWVwRXF1YWwoY2RrLnJlc29sdmUocGFyc2VCdWNrZXROYW1lKHsgYnVja2V0QXJuIH0pKSwgdW5kZWZpbmVkKTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAnZmFpbHMgaWYgYXJuIHVzZXMgYSBub24gXCJzM1wiIHNlcnZpY2UnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IGJ1Y2tldEFybiA9ICdhcm46YXdzOnh4Ojo6bXktYnVja2V0JztcbiAgICAgIHRlc3QudGhyb3dzKCgpID0+IHBhcnNlQnVja2V0TmFtZSh7IGJ1Y2tldEFybiB9KSwgL0ludmFsaWQgQVJOLyk7XG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9LFxuXG4gICAgJ2ZhaWxzIGlmIEFSTiBoYXMgaW52YWxpZCBmb3JtYXQnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IGJ1Y2tldEFybiA9ICdpbnZhbGlkLWFybic7XG4gICAgICB0ZXN0LnRocm93cygoKSA9PiBwYXJzZUJ1Y2tldE5hbWUoeyBidWNrZXRBcm4gfSksIC9BUk5zIG11c3QgaGF2ZSBhdCBsZWFzdCA2IGNvbXBvbmVudHMvKTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAnZmFpbHMgaWYgQVJOIGhhcyBwYXRoJyh0ZXN0OiBUZXN0KSB7XG4gICAgICBjb25zdCBidWNrZXRBcm4gPSAnYXJuOmF3czpzMzo6Om15LWJ1Y2tldC9wYXRoJztcbiAgICAgIHRlc3QudGhyb3dzKCgpID0+IHBhcnNlQnVja2V0TmFtZSh7IGJ1Y2tldEFybiB9KSwgL0J1Y2tldCBBUk4gbXVzdCBub3QgY29udGFpbiBhIHBhdGgvKTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH1cbiAgfSxcbn07XG4iXX0=
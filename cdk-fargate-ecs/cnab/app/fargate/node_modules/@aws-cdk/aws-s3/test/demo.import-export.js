"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const s3 = require("../lib");
// Define a stack with an S3 bucket and export it using `bucket.export()`.
// bucket.export returns a `BucketRef` object which can later be used in
// `Bucket.import`.
class Producer extends cdk.Stack {
    constructor(parent, name) {
        super(parent, name);
        const bucket = new s3.Bucket(this, 'MyBucket');
        this.myBucketRef = bucket.export();
    }
}
class ConsumerConstruct extends cdk.Construct {
    constructor(parent, name, props) {
        super(parent, name);
        props.bucket.addToResourcePolicy(new iam.PolicyStatement().addAction('*'));
    }
}
class Consumer extends cdk.Stack {
    constructor(parent, name, props) {
        super(parent, name);
        const user = new iam.User(this, 'MyUser');
        const userBucket = s3.Bucket.import(this, 'ImportBucket', props.userBucketRef);
        new ConsumerConstruct(this, 'SomeConstruct', { bucket: userBucket });
        userBucket.grantReadWrite(user);
    }
}
// -------------------------------------------------------
// NOTE: To deploy this, just run `cdk -a "node file.js" deploy`. The stacks
// will be deployed IN-ORDER which means that the producer will be deployed
// first. In the future the toolkit will be able to understand the relationships
// between the stacks and will deploy them in order.
const app = new cdk.App();
const producer = new Producer(app, 'produce');
new Consumer(app, 'consume', {
    userBucketRef: producer.myBucketRef
});
app.run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVtby5pbXBvcnQtZXhwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGVtby5pbXBvcnQtZXhwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQXlDO0FBQ3pDLG9DQUFxQztBQUNyQyw2QkFBOEI7QUFFOUIsMEVBQTBFO0FBQzFFLHdFQUF3RTtBQUN4RSxtQkFBbUI7QUFFbkIsTUFBTSxRQUFTLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFHOUIsWUFBWSxNQUFlLEVBQUUsSUFBWTtRQUN2QyxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXBCLE1BQU0sTUFBTSxHQUFHLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDckMsQ0FBQztDQUNGO0FBTUQsTUFBTSxpQkFBa0IsU0FBUSxHQUFHLENBQUMsU0FBUztJQUMzQyxZQUFZLE1BQXFCLEVBQUUsSUFBWSxFQUFFLEtBQTZCO1FBQzVFLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFcEIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM3RSxDQUFDO0NBQ0Y7QUFXRCxNQUFNLFFBQVMsU0FBUSxHQUFHLENBQUMsS0FBSztJQUM5QixZQUFZLE1BQWUsRUFBRSxJQUFZLEVBQUUsS0FBb0I7UUFDN0QsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVwQixNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxjQUFjLEVBQUUsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRS9FLElBQUksaUJBQWlCLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBRXJFLFVBQVUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztDQUNGO0FBRUQsMERBQTBEO0FBQzFELDRFQUE0RTtBQUM1RSwyRUFBMkU7QUFDM0UsZ0ZBQWdGO0FBQ2hGLG9EQUFvRDtBQUVwRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFFOUMsSUFBSSxRQUFRLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRTtJQUMzQixhQUFhLEVBQUUsUUFBUSxDQUFDLFdBQVc7Q0FDcEMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGlhbSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1pYW0nKTtcbmltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcbmltcG9ydCBzMyA9IHJlcXVpcmUoJy4uL2xpYicpO1xuXG4vLyBEZWZpbmUgYSBzdGFjayB3aXRoIGFuIFMzIGJ1Y2tldCBhbmQgZXhwb3J0IGl0IHVzaW5nIGBidWNrZXQuZXhwb3J0KClgLlxuLy8gYnVja2V0LmV4cG9ydCByZXR1cm5zIGEgYEJ1Y2tldFJlZmAgb2JqZWN0IHdoaWNoIGNhbiBsYXRlciBiZSB1c2VkIGluXG4vLyBgQnVja2V0LmltcG9ydGAuXG5cbmNsYXNzIFByb2R1Y2VyIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgcHVibGljIHJlYWRvbmx5IG15QnVja2V0UmVmOiBzMy5CdWNrZXRSZWZQcm9wcztcblxuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IGNkay5BcHAsIG5hbWU6IHN0cmluZykge1xuICAgIHN1cGVyKHBhcmVudCwgbmFtZSk7XG5cbiAgICBjb25zdCBidWNrZXQgPSBuZXcgczMuQnVja2V0KHRoaXMsICdNeUJ1Y2tldCcpO1xuICAgIHRoaXMubXlCdWNrZXRSZWYgPSBidWNrZXQuZXhwb3J0KCk7XG4gIH1cbn1cblxuaW50ZXJmYWNlIENvbnN1bWVyQ29uc3RydWN0UHJvcHMge1xuICBidWNrZXQ6IHMzLkJ1Y2tldFJlZjtcbn1cblxuY2xhc3MgQ29uc3VtZXJDb25zdHJ1Y3QgZXh0ZW5kcyBjZGsuQ29uc3RydWN0IHtcbiAgY29uc3RydWN0b3IocGFyZW50OiBjZGsuQ29uc3RydWN0LCBuYW1lOiBzdHJpbmcsIHByb3BzOiBDb25zdW1lckNvbnN0cnVjdFByb3BzKSB7XG4gICAgc3VwZXIocGFyZW50LCBuYW1lKTtcblxuICAgIHByb3BzLmJ1Y2tldC5hZGRUb1Jlc291cmNlUG9saWN5KG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KCkuYWRkQWN0aW9uKCcqJykpO1xuICB9XG59XG5cbi8vIERlZmluZSBhIHN0YWNrIHRoYXQgcmVxdWlyZXMgYSBCdWNrZXRSZWYgYXMgYW4gaW5wdXQgYW5kIHVzZXMgYEJ1Y2tldC5pbXBvcnRgXG4vLyB0byBjcmVhdGUgYSBgQnVja2V0YCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoaXMgZXh0ZXJuYWwgYnVja2V0LiBHcmFudCBhXG4vLyB1c2VyIHByaW5jaXBhbCBjcmVhdGVkIHdpdGhpbiB0aGlzIGNvbnN1bWluZyBzdGFjayByZWFkL3dyaXRlIHBlcm1pc3Npb25zIHRvXG4vLyB0aGlzIGJ1Y2tldCBhbmQgY29udGVudHMuXG5cbmludGVyZmFjZSBDb25zdW1lclByb3BzIHtcbiAgdXNlckJ1Y2tldFJlZjogczMuQnVja2V0UmVmUHJvcHM7XG59XG5cbmNsYXNzIENvbnN1bWVyIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgY29uc3RydWN0b3IocGFyZW50OiBjZGsuQXBwLCBuYW1lOiBzdHJpbmcsIHByb3BzOiBDb25zdW1lclByb3BzKSB7XG4gICAgc3VwZXIocGFyZW50LCBuYW1lKTtcblxuICAgIGNvbnN0IHVzZXIgPSBuZXcgaWFtLlVzZXIodGhpcywgJ015VXNlcicpO1xuICAgIGNvbnN0IHVzZXJCdWNrZXQgPSBzMy5CdWNrZXQuaW1wb3J0KHRoaXMsICdJbXBvcnRCdWNrZXQnLCBwcm9wcy51c2VyQnVja2V0UmVmKTtcblxuICAgIG5ldyBDb25zdW1lckNvbnN0cnVjdCh0aGlzLCAnU29tZUNvbnN0cnVjdCcsIHsgYnVja2V0OiB1c2VyQnVja2V0IH0pO1xuXG4gICAgdXNlckJ1Y2tldC5ncmFudFJlYWRXcml0ZSh1c2VyKTtcbiAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBOT1RFOiBUbyBkZXBsb3kgdGhpcywganVzdCBydW4gYGNkayAtYSBcIm5vZGUgZmlsZS5qc1wiIGRlcGxveWAuIFRoZSBzdGFja3Ncbi8vIHdpbGwgYmUgZGVwbG95ZWQgSU4tT1JERVIgd2hpY2ggbWVhbnMgdGhhdCB0aGUgcHJvZHVjZXIgd2lsbCBiZSBkZXBsb3llZFxuLy8gZmlyc3QuIEluIHRoZSBmdXR1cmUgdGhlIHRvb2xraXQgd2lsbCBiZSBhYmxlIHRvIHVuZGVyc3RhbmQgdGhlIHJlbGF0aW9uc2hpcHNcbi8vIGJldHdlZW4gdGhlIHN0YWNrcyBhbmQgd2lsbCBkZXBsb3kgdGhlbSBpbiBvcmRlci5cblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuY29uc3QgcHJvZHVjZXIgPSBuZXcgUHJvZHVjZXIoYXBwLCAncHJvZHVjZScpO1xuXG5uZXcgQ29uc3VtZXIoYXBwLCAnY29uc3VtZScsIHtcbiAgdXNlckJ1Y2tldFJlZjogcHJvZHVjZXIubXlCdWNrZXRSZWZcbn0pO1xuXG5hcHAucnVuKCk7XG4iXX0=
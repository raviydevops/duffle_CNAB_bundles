"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const s3notifications = require("@aws-cdk/aws-s3-notifications");
const cdk = require("@aws-cdk/cdk");
/**
 * Since we can't take a dependency on @aws-cdk/sns, this is a simple wrapper
 * for AWS::SNS::Topic which implements IBucketNotificationDestination.
 */
class Topic extends cdk.Construct {
    constructor(parent, id) {
        super(parent, id);
        this.policy = new iam.PolicyDocument();
        this.notifyingBucketPaths = new Set();
        const resource = new cdk.Resource(this, 'Resource', { type: 'AWS::SNS::Topic' });
        const topicArn = resource.ref;
        new cdk.Resource(this, 'Policy', {
            type: 'AWS::SNS::TopicPolicy',
            properties: {
                Topics: [topicArn],
                PolicyDocument: this.policy
            }
        });
        this.topicArn = topicArn;
    }
    asBucketNotificationDestination(bucketArn, bucketId) {
        // add permission to each source bucket
        if (!this.notifyingBucketPaths.has(bucketId)) {
            this.policy.addStatement(new iam.PolicyStatement()
                .describe(`sid${this.policy.statementCount}`)
                .addServicePrincipal('s3.amazonaws.com')
                .addAction('sns:Publish')
                .addResource(this.topicArn)
                .addCondition('ArnLike', { "aws:SourceArn": bucketArn }));
            this.notifyingBucketPaths.add(bucketId);
        }
        return {
            arn: this.topicArn,
            type: s3notifications.BucketNotificationDestinationType.Topic
        };
    }
}
exports.Topic = Topic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLWRlc3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibm90aWZpY2F0aW9uLWRlc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQXlDO0FBQ3pDLGlFQUFrRTtBQUNsRSxvQ0FBcUM7QUFFckM7OztHQUdHO0FBQ0gsTUFBYSxLQUFNLFNBQVEsR0FBRyxDQUFDLFNBQVM7SUFLdEMsWUFBWSxNQUFxQixFQUFFLEVBQVU7UUFDM0MsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUpILFdBQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNsQyx5QkFBb0IsR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFDO1FBS3hELE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLENBQUMsQ0FBQztRQUNqRixNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDO1FBRTlCLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFO1lBQy9CLElBQUksRUFBRSx1QkFBdUI7WUFDN0IsVUFBVSxFQUFFO2dCQUNWLE1BQU0sRUFBRSxDQUFFLFFBQVEsQ0FBRTtnQkFDcEIsY0FBYyxFQUFFLElBQUksQ0FBQyxNQUFNO2FBQzVCO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVNLCtCQUErQixDQUFDLFNBQWlCLEVBQUUsUUFBZ0I7UUFFeEUsdUNBQXVDO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzVDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRTtpQkFDL0MsUUFBUSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztpQkFDNUMsbUJBQW1CLENBQUMsa0JBQWtCLENBQUM7aUJBQ3ZDLFNBQVMsQ0FBQyxhQUFhLENBQUM7aUJBQ3hCLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO2lCQUMxQixZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM1RCxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3pDO1FBRUQsT0FBTztZQUNMLEdBQUcsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUNsQixJQUFJLEVBQUUsZUFBZSxDQUFDLGlDQUFpQyxDQUFDLEtBQUs7U0FDOUQsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXhDRCxzQkF3Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaWFtID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWlhbScpO1xuaW1wb3J0IHMzbm90aWZpY2F0aW9ucyA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1zMy1ub3RpZmljYXRpb25zJyk7XG5pbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY2RrJyk7XG5cbi8qKlxuICogU2luY2Ugd2UgY2FuJ3QgdGFrZSBhIGRlcGVuZGVuY3kgb24gQGF3cy1jZGsvc25zLCB0aGlzIGlzIGEgc2ltcGxlIHdyYXBwZXJcbiAqIGZvciBBV1M6OlNOUzo6VG9waWMgd2hpY2ggaW1wbGVtZW50cyBJQnVja2V0Tm90aWZpY2F0aW9uRGVzdGluYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBUb3BpYyBleHRlbmRzIGNkay5Db25zdHJ1Y3QgaW1wbGVtZW50cyBzM25vdGlmaWNhdGlvbnMuSUJ1Y2tldE5vdGlmaWNhdGlvbkRlc3RpbmF0aW9uIHtcbiAgcHVibGljIHJlYWRvbmx5IHRvcGljQXJuOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgcG9saWN5ID0gbmV3IGlhbS5Qb2xpY3lEb2N1bWVudCgpO1xuICBwcml2YXRlIHJlYWRvbmx5IG5vdGlmeWluZ0J1Y2tldFBhdGhzID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nKSB7XG4gICAgc3VwZXIocGFyZW50LCBpZCk7XG5cbiAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBjZGsuUmVzb3VyY2UodGhpcywgJ1Jlc291cmNlJywgeyB0eXBlOiAnQVdTOjpTTlM6OlRvcGljJyB9KTtcbiAgICBjb25zdCB0b3BpY0FybiA9IHJlc291cmNlLnJlZjtcblxuICAgIG5ldyBjZGsuUmVzb3VyY2UodGhpcywgJ1BvbGljeScsIHtcbiAgICAgIHR5cGU6ICdBV1M6OlNOUzo6VG9waWNQb2xpY3knLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBUb3BpY3M6IFsgdG9waWNBcm4gXSxcbiAgICAgICAgUG9saWN5RG9jdW1lbnQ6IHRoaXMucG9saWN5XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnRvcGljQXJuID0gdG9waWNBcm47XG4gIH1cblxuICBwdWJsaWMgYXNCdWNrZXROb3RpZmljYXRpb25EZXN0aW5hdGlvbihidWNrZXRBcm46IHN0cmluZywgYnVja2V0SWQ6IHN0cmluZyk6IHMzbm90aWZpY2F0aW9ucy5CdWNrZXROb3RpZmljYXRpb25EZXN0aW5hdGlvblByb3BzIHtcblxuICAgIC8vIGFkZCBwZXJtaXNzaW9uIHRvIGVhY2ggc291cmNlIGJ1Y2tldFxuICAgIGlmICghdGhpcy5ub3RpZnlpbmdCdWNrZXRQYXRocy5oYXMoYnVja2V0SWQpKSB7XG4gICAgICB0aGlzLnBvbGljeS5hZGRTdGF0ZW1lbnQobmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoKVxuICAgICAgICAuZGVzY3JpYmUoYHNpZCR7dGhpcy5wb2xpY3kuc3RhdGVtZW50Q291bnR9YClcbiAgICAgICAgLmFkZFNlcnZpY2VQcmluY2lwYWwoJ3MzLmFtYXpvbmF3cy5jb20nKVxuICAgICAgICAuYWRkQWN0aW9uKCdzbnM6UHVibGlzaCcpXG4gICAgICAgIC5hZGRSZXNvdXJjZSh0aGlzLnRvcGljQXJuKVxuICAgICAgICAuYWRkQ29uZGl0aW9uKCdBcm5MaWtlJywgeyBcImF3czpTb3VyY2VBcm5cIjogYnVja2V0QXJuIH0pKTtcbiAgICAgIHRoaXMubm90aWZ5aW5nQnVja2V0UGF0aHMuYWRkKGJ1Y2tldElkKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYXJuOiB0aGlzLnRvcGljQXJuLFxuICAgICAgdHlwZTogczNub3RpZmljYXRpb25zLkJ1Y2tldE5vdGlmaWNhdGlvbkRlc3RpbmF0aW9uVHlwZS5Ub3BpY1xuICAgIH07XG4gIH1cbn1cbiJdfQ==
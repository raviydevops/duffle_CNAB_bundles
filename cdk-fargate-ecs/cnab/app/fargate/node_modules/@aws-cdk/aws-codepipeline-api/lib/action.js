"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events = require("@aws-cdk/aws-events");
const cdk = require("@aws-cdk/cdk");
const artifact_1 = require("./artifact");
const validation = require("./validation");
var ActionCategory;
(function (ActionCategory) {
    ActionCategory["Source"] = "Source";
    ActionCategory["Build"] = "Build";
    ActionCategory["Test"] = "Test";
    ActionCategory["Approval"] = "Approval";
    ActionCategory["Deploy"] = "Deploy";
    ActionCategory["Invoke"] = "Invoke";
})(ActionCategory = exports.ActionCategory || (exports.ActionCategory = {}));
function defaultBounds() {
    return {
        minInputs: 0,
        maxInputs: 5,
        minOutputs: 0,
        maxOutputs: 5
    };
}
exports.defaultBounds = defaultBounds;
/**
 * Low-level class for generic CodePipeline Actions.
 * It is recommended that concrete types are used instead, such as {@link codecommit.PipelineSourceAction} or
 * {@link codebuild.PipelineBuildAction}.
 */
class Action extends cdk.Construct {
    constructor(parent, id, props) {
        super(parent, id);
        this.inputArtifacts = new Array();
        this.outputArtifacts = new Array();
        validation.validateName('Action', id);
        this.owner = props.owner || 'AWS';
        this.version = props.version || '1';
        this.category = props.category;
        this.provider = props.provider;
        this.region = props.region;
        this.configuration = props.configuration;
        this.artifactBounds = props.artifactBounds;
        this.runOrder = props.runOrder === undefined ? 1 : props.runOrder;
        this.stage = props.stage;
        this.stage._internal._attachAction(this);
    }
    validate() {
        return validation.validateArtifactBounds('input', this.inputArtifacts, this.artifactBounds.minInputs, this.artifactBounds.maxInputs, this.category, this.provider)
            .concat(validation.validateArtifactBounds('output', this.outputArtifacts, this.artifactBounds.minOutputs, this.artifactBounds.maxOutputs, this.category, this.provider));
    }
    onStateChange(name, target, options) {
        const rule = new events.EventRule(this.parent, name, options);
        rule.addTarget(target);
        rule.addEventPattern({
            detailType: ['CodePipeline Stage Execution State Change'],
            source: ['aws.codepipeline'],
            resources: [this.stage.pipeline.pipelineArn],
            detail: {
                stage: [this.stage.name],
                action: [this.id],
            },
        });
        return rule;
    }
    get _inputArtifacts() {
        return this.inputArtifacts.slice();
    }
    get _outputArtifacts() {
        return this.outputArtifacts.slice();
    }
    addOutputArtifact(name = this.stage._internal._generateOutputArtifactName(this)) {
        const artifact = new artifact_1.Artifact(this, name);
        this.outputArtifacts.push(artifact);
        return artifact;
    }
    addInputArtifact(artifact = this.stage._internal._findInputArtifact(this)) {
        this.inputArtifacts.push(artifact);
        return this;
    }
}
exports.Action = Action;
// export class ElasticBeanstalkDeploy extends DeployAction {
//   constructor(parent: Stage, name: string, applicationName: string, environmentName: string) {
//     super(parent, name, 'ElasticBeanstalk', { minInputs: 1, maxInputs: 1, minOutputs: 0, maxOutputs: 0 }, {
//       ApplicationName: applicationName,
//       EnvironmentName: environmentName
//     });
//   }
// }
// export class OpsWorksDeploy extends DeployAction {
//   constructor(parent: Stage, name: string, app: string, stack: string, layer?: string) {
//     super(parent, name, 'OpsWorks', { minInputs: 1, maxInputs: 1, minOutputs: 0, maxOutputs: 0 }, {
//       Stack: stack,
//       App: app,
//       Layer: layer,
//     });
//   }
// }
// export class ECSDeploy extends DeployAction {
//   constructor(parent: Stage, name: string, clusterName: string, serviceName: string, fileName?: string) {
//     super(parent, name, 'ECS', { minInputs: 1, maxInputs: 1, minOutputs: 0, maxOutputs: 0 }, {
//       ClusterName: clusterName,
//       ServiceName: serviceName,
//       FileName: fileName,
//     });
//   }
// }
/*
  TODO: A Jenkins build needs a corresponding custom action for each "Jenkins provider".
    This should be created automatically.

  Example custom action created to execute Jenkins:
  {
  "id": {
    "category": "Test",
    "provider": "<provider name>",
    "owner": "Custom",
    "version": "1"
  },
  "outputArtifactDetails": {
    "minimumCount": 0,
    "maximumCount": 5
  },
  "settings": {
    "executionUrlTemplate": "https://www.google.com/job/{Config:ProjectName}/{ExternalExecutionId}",
    "entityUrlTemplate": "https://www.google.com/job/{Config:ProjectName}"
  },
  "actionConfigurationProperties": [
    {
      "queryable": true,
      "key": true,
      "name": "ProjectName",
      "required": true,
      "secret": false
    }
  ],
  "inputArtifactDetails": {
    "minimumCount": 0,
    "maximumCount": 5
  }
  }
*/
// export class JenkinsBuild extends BuildAction {
//   constructor(parent: Stage, name: string, jenkinsProvider: string, project: string) {
//     super(parent, name, jenkinsProvider, DefaultBounds(), {
//       ProjectName: project
//     });
//   }
// }
// export class JenkinsTest extends TestAction {
//   constructor(parent: Stage, name: string, jenkinsProvider: string, project: string) {
//     super(parent, name, jenkinsProvider, DefaultBounds(), {
//       ProjectName: project
//     });
//   }
// }
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const action_1 = require("./action");
/**
 * Validation function that checks if the number of artifacts is within the given bounds
 */
function validateArtifactBounds(type, artifacts, min, max, category, provider) {
    const ret = [];
    if (artifacts.length < min) {
        ret.push(`${category}/${provider} must have at least ${min} ${type} artifacts`);
    }
    if (artifacts.length > max) {
        ret.push(`${category}/${provider} cannot have more than ${max} ${type} artifacts`);
    }
    return ret;
}
exports.validateArtifactBounds = validateArtifactBounds;
/**
 * Validation function that guarantees that an action is or is not a source action. This is useful because Source actions can only be
 * in the first stage of a pipeline, and the first stage can only contain source actions.
 */
function validateSourceAction(mustBeSource, category, actionName, stageName) {
    if (mustBeSource !== (category === action_1.ActionCategory.Source)) {
        return [`Action ${actionName} in stage ${stageName}: ` + (mustBeSource ? 'first stage may only contain Source actions'
                : 'Source actions may only occur in first stage')];
    }
    return [];
}
exports.validateSourceAction = validateSourceAction;
/**
 * Regex to validate Pipeline, Stage, Action names
 *
 * https://docs.aws.amazon.com/codepipeline/latest/userguide/limits.html
 */
const VALID_IDENTIFIER_REGEX = /^[a-zA-Z0-9.@_-]{1,100}$/;
/**
 * Validate the given name of a pipeline component. Pipeline component names all have the same restrictions.
 * This can be used to validate the name of all components of a pipeline.
 */
function validateName(thing, name) {
    if (name !== undefined && !VALID_IDENTIFIER_REGEX.test(name)) {
        throw new Error(`${thing} name must match regular expression: ${VALID_IDENTIFIER_REGEX.toString()}, got '${name}'`);
    }
}
exports.validateName = validateName;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInZhbGlkYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBMEM7QUFHMUM7O0dBRUc7QUFDSCxTQUFnQixzQkFBc0IsQ0FBRSxJQUFZLEVBQUUsU0FBcUIsRUFDbkMsR0FBVyxFQUFFLEdBQVcsRUFDeEIsUUFBZ0IsRUFBRSxRQUFnQjtJQUN4RSxNQUFNLEdBQUcsR0FBYSxFQUFFLENBQUM7SUFFekIsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtRQUMxQixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxJQUFJLFFBQVEsdUJBQXVCLEdBQUcsSUFBSSxJQUFJLFlBQVksQ0FBQyxDQUFDO0tBQ2pGO0lBRUQsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtRQUMxQixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxJQUFJLFFBQVEsMEJBQTBCLEdBQUcsSUFBSSxJQUFJLFlBQVksQ0FBQyxDQUFDO0tBQ3BGO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBZEQsd0RBY0M7QUFFRDs7O0dBR0c7QUFDSCxTQUFnQixvQkFBb0IsQ0FBQyxZQUFxQixFQUFFLFFBQWdCLEVBQUUsVUFBa0IsRUFBRSxTQUFpQjtJQUNqSCxJQUFJLFlBQVksS0FBSyxDQUFDLFFBQVEsS0FBSyx1QkFBYyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3pELE9BQU8sQ0FBQyxVQUFVLFVBQVUsYUFBYSxTQUFTLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsNkNBQTZDO2dCQUNwSCxDQUFDLENBQUMsOENBQThDLENBQUMsQ0FBQyxDQUFDO0tBQ3REO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDO0FBTkQsb0RBTUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxzQkFBc0IsR0FBRywwQkFBMEIsQ0FBQztBQUUxRDs7O0dBR0c7QUFDSCxTQUFnQixZQUFZLENBQUMsS0FBYSxFQUFFLElBQXdCO0lBQ2xFLElBQUksSUFBSSxLQUFLLFNBQVMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUM1RCxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyx3Q0FBd0Msc0JBQXNCLENBQUMsUUFBUSxFQUFFLFVBQVUsSUFBSSxHQUFHLENBQUMsQ0FBQztLQUNySDtBQUNILENBQUM7QUFKRCxvQ0FJQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbkNhdGVnb3J5IH0gZnJvbSBcIi4vYWN0aW9uXCI7XG5pbXBvcnQgeyBBcnRpZmFjdCB9IGZyb20gXCIuL2FydGlmYWN0XCI7XG5cbi8qKlxuICogVmFsaWRhdGlvbiBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGUgbnVtYmVyIG9mIGFydGlmYWN0cyBpcyB3aXRoaW4gdGhlIGdpdmVuIGJvdW5kc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVBcnRpZmFjdEJvdW5kcyggdHlwZTogc3RyaW5nLCBhcnRpZmFjdHM6IEFydGlmYWN0W10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluOiBudW1iZXIsIG1heDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBzdHJpbmcsIHByb3ZpZGVyOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gIGNvbnN0IHJldDogc3RyaW5nW10gPSBbXTtcblxuICBpZiAoYXJ0aWZhY3RzLmxlbmd0aCA8IG1pbikge1xuICAgIHJldC5wdXNoKGAke2NhdGVnb3J5fS8ke3Byb3ZpZGVyfSBtdXN0IGhhdmUgYXQgbGVhc3QgJHttaW59ICR7dHlwZX0gYXJ0aWZhY3RzYCk7XG4gIH1cblxuICBpZiAoYXJ0aWZhY3RzLmxlbmd0aCA+IG1heCkge1xuICAgIHJldC5wdXNoKGAke2NhdGVnb3J5fS8ke3Byb3ZpZGVyfSBjYW5ub3QgaGF2ZSBtb3JlIHRoYW4gJHttYXh9ICR7dHlwZX0gYXJ0aWZhY3RzYCk7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIFZhbGlkYXRpb24gZnVuY3Rpb24gdGhhdCBndWFyYW50ZWVzIHRoYXQgYW4gYWN0aW9uIGlzIG9yIGlzIG5vdCBhIHNvdXJjZSBhY3Rpb24uIFRoaXMgaXMgdXNlZnVsIGJlY2F1c2UgU291cmNlIGFjdGlvbnMgY2FuIG9ubHkgYmVcbiAqIGluIHRoZSBmaXJzdCBzdGFnZSBvZiBhIHBpcGVsaW5lLCBhbmQgdGhlIGZpcnN0IHN0YWdlIGNhbiBvbmx5IGNvbnRhaW4gc291cmNlIGFjdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVNvdXJjZUFjdGlvbihtdXN0QmVTb3VyY2U6IGJvb2xlYW4sIGNhdGVnb3J5OiBzdHJpbmcsIGFjdGlvbk5hbWU6IHN0cmluZywgc3RhZ2VOYW1lOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gIGlmIChtdXN0QmVTb3VyY2UgIT09IChjYXRlZ29yeSA9PT0gQWN0aW9uQ2F0ZWdvcnkuU291cmNlKSkge1xuICAgIHJldHVybiBbYEFjdGlvbiAke2FjdGlvbk5hbWV9IGluIHN0YWdlICR7c3RhZ2VOYW1lfTogYCArIChtdXN0QmVTb3VyY2UgPyAnZmlyc3Qgc3RhZ2UgbWF5IG9ubHkgY29udGFpbiBTb3VyY2UgYWN0aW9ucydcbiAgICAgIDogJ1NvdXJjZSBhY3Rpb25zIG1heSBvbmx5IG9jY3VyIGluIGZpcnN0IHN0YWdlJyldO1xuICB9XG4gIHJldHVybiBbXTtcbn1cblxuLyoqXG4gKiBSZWdleCB0byB2YWxpZGF0ZSBQaXBlbGluZSwgU3RhZ2UsIEFjdGlvbiBuYW1lc1xuICpcbiAqIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9jb2RlcGlwZWxpbmUvbGF0ZXN0L3VzZXJndWlkZS9saW1pdHMuaHRtbFxuICovXG5jb25zdCBWQUxJRF9JREVOVElGSUVSX1JFR0VYID0gL15bYS16QS1aMC05LkBfLV17MSwxMDB9JC87XG5cbi8qKlxuICogVmFsaWRhdGUgdGhlIGdpdmVuIG5hbWUgb2YgYSBwaXBlbGluZSBjb21wb25lbnQuIFBpcGVsaW5lIGNvbXBvbmVudCBuYW1lcyBhbGwgaGF2ZSB0aGUgc2FtZSByZXN0cmljdGlvbnMuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIHZhbGlkYXRlIHRoZSBuYW1lIG9mIGFsbCBjb21wb25lbnRzIG9mIGEgcGlwZWxpbmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZU5hbWUodGhpbmc6IHN0cmluZywgbmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gIGlmIChuYW1lICE9PSB1bmRlZmluZWQgJiYgIVZBTElEX0lERU5USUZJRVJfUkVHRVgudGVzdChuYW1lKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgJHt0aGluZ30gbmFtZSBtdXN0IG1hdGNoIHJlZ3VsYXIgZXhwcmVzc2lvbjogJHtWQUxJRF9JREVOVElGSUVSX1JFR0VYLnRvU3RyaW5nKCl9LCBnb3QgJyR7bmFtZX0nYCk7XG4gIH1cbn1cbiJdfQ==
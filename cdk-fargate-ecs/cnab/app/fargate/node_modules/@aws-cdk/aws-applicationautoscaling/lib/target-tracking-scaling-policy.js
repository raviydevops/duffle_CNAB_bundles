"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const applicationautoscaling_generated_1 = require("./applicationautoscaling.generated");
class TargetTrackingScalingPolicy extends cdk.Construct {
    constructor(parent, id, props) {
        if ((props.customMetric === undefined) === (props.predefinedMetric === undefined)) {
            throw new Error(`Exactly one of 'customMetric' or 'predefinedMetric' must be specified.`);
        }
        if (props.scaleInCooldownSec !== undefined && props.scaleInCooldownSec < 0) {
            throw new RangeError(`scaleInCooldown cannot be negative, got: ${props.scaleInCooldownSec}`);
        }
        if (props.scaleOutCooldownSec !== undefined && props.scaleOutCooldownSec < 0) {
            throw new RangeError(`scaleOutCooldown cannot be negative, got: ${props.scaleOutCooldownSec}`);
        }
        super(parent, id);
        const resource = new applicationautoscaling_generated_1.cloudformation.ScalingPolicyResource(this, 'Resource', {
            policyName: props.policyName || this.uniqueId,
            policyType: 'TargetTrackingScaling',
            scalingTargetId: props.scalingTarget.scalableTargetId,
            targetTrackingScalingPolicyConfiguration: {
                customizedMetricSpecification: renderCustomMetric(props.customMetric),
                disableScaleIn: props.disableScaleIn,
                predefinedMetricSpecification: props.predefinedMetric !== undefined ? {
                    predefinedMetricType: props.predefinedMetric,
                    resourceLabel: props.resourceLabel,
                } : undefined,
                scaleInCooldown: props.scaleInCooldownSec,
                scaleOutCooldown: props.scaleOutCooldownSec,
                targetValue: props.targetValue
            }
        });
        this.scalingPolicyArn = resource.scalingPolicyArn;
    }
}
exports.TargetTrackingScalingPolicy = TargetTrackingScalingPolicy;
function renderCustomMetric(metric) {
    if (!metric) {
        return undefined;
    }
    return {
        dimensions: metric.dimensionsAsList(),
        metricName: metric.metricName,
        namespace: metric.namespace,
        statistic: metric.statistic,
        unit: metric.unit
    };
}
/**
 * One of the predefined autoscaling metrics
 */
var PredefinedMetric;
(function (PredefinedMetric) {
    PredefinedMetric["DynamoDBReadCapacityUtilization"] = "DynamoDBReadCapacityUtilization";
    PredefinedMetric["DynamoDBWriteCapacityUtilization"] = "DynamoDBWriteCapacityUtilization";
    PredefinedMetric["ALBRequestCountPerTarget"] = "ALBRequestCountPerTarget";
    PredefinedMetric["RDSReaderAverageCPUUtilization"] = "RDSReaderAverageCPUUtilization";
    PredefinedMetric["RDSReaderAverageDatabaseConnections"] = "RDSReaderAverageDatabaseConnections";
    PredefinedMetric["EC2SpotFleetRequestAverageCPUUtilization"] = "EC2SpotFleetRequestAverageCPUUtilization";
    PredefinedMetric["EC2SpotFleetRequestAverageNetworkIn"] = "EC2SpotFleetRequestAverageNetworkIn";
    PredefinedMetric["EC2SpotFleetRequestAverageNetworkOut"] = "EC2SpotFleetRequestAverageNetworkOut";
    PredefinedMetric["SageMakerVariantInvocationsPerInstance"] = "SageMakerVariantInvocationsPerInstance";
    PredefinedMetric["ECSServiceAverageCPUUtilization"] = "ECSServiceAverageCPUUtilization";
    PredefinedMetric["ECSServiceAverageMemoryUtilization"] = "ECSServiceAverageMemoryUtilization";
})(PredefinedMetric = exports.PredefinedMetric || (exports.PredefinedMetric = {}));
//# sourceMappingURL=data:application/json;base64,
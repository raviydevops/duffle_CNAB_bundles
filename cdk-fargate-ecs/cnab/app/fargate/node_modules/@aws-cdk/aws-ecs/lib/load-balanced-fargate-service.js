"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const elbv2 = require("@aws-cdk/aws-elasticloadbalancingv2");
const aws_route53_1 = require("@aws-cdk/aws-route53");
const cdk = require("@aws-cdk/cdk");
const fargate_service_1 = require("./fargate/fargate-service");
const fargate_task_definition_1 = require("./fargate/fargate-task-definition");
const aws_log_driver_1 = require("./log-drivers/aws-log-driver");
/**
 * A Fargate service running on an ECS cluster fronted by a load balancer
 */
class LoadBalancedFargateService extends cdk.Construct {
    constructor(parent, id, props) {
        super(parent, id);
        const taskDefinition = new fargate_task_definition_1.FargateTaskDefinition(this, 'TaskDef', {
            memoryMiB: props.memoryMiB,
            cpu: props.cpu
        });
        const optIn = props.createLogs !== undefined ? props.createLogs : true;
        const container = taskDefinition.addContainer('web', {
            image: props.image,
            logging: optIn ? this.createAWSLogDriver(this.id) : undefined
        });
        container.addPortMappings({
            containerPort: props.containerPort || 80,
        });
        const assignPublicIp = props.publicTasks !== undefined ? props.publicTasks : false;
        const service = new fargate_service_1.FargateService(this, "Service", {
            cluster: props.cluster,
            desiredCount: props.desiredCount || 1,
            taskDefinition,
            assignPublicIp
        });
        this.service = service;
        const internetFacing = props.publicLoadBalancer !== undefined ? props.publicLoadBalancer : true;
        const lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {
            vpc: props.cluster.vpc,
            internetFacing
        });
        this.loadBalancer = lb;
        let listener;
        if (typeof props.certificate !== 'undefined') {
            listener = lb.addListener('PublicListener', {
                port: 443,
                open: true,
                certificateArns: [props.certificate.certificateArn]
            });
        }
        else {
            listener = lb.addListener('PublicListener', { port: 80, open: true });
        }
        this.targetGroup = listener.addTargets('ECS', {
            port: 80,
            targets: [service]
        });
        new cdk.Output(this, 'LoadBalancerDNS', { value: lb.dnsName });
        if (typeof props.domainName !== 'undefined') {
            if (typeof props.domainZone === 'undefined') {
                throw new Error('A Route53 hosted domain zone name is required to configure the specified domain name');
            }
            new aws_route53_1.AliasRecord(props.domainZone, "DNS", {
                recordName: props.domainName,
                target: lb
            });
        }
    }
    createAWSLogDriver(prefix) {
        return new aws_log_driver_1.AwsLogDriver(this, 'Logging', { streamPrefix: prefix });
    }
}
exports.LoadBalancedFargateService = LoadBalancedFargateService;
//# sourceMappingURL=data:application/json;base64,
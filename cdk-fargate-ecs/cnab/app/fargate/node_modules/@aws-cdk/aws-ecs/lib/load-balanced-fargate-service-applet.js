"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_certificatemanager_1 = require("@aws-cdk/aws-certificatemanager");
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
const aws_route53_1 = require("@aws-cdk/aws-route53");
const cdk = require("@aws-cdk/cdk");
const cluster_1 = require("./cluster");
const container_image_1 = require("./container-image");
const load_balanced_fargate_service_1 = require("./load-balanced-fargate-service");
/**
 * An applet for a LoadBalancedFargateService. Sets up a Fargate service, Application
 * load balancer, ECS cluster, VPC, and (optionally) Route53 alias record.
 */
class LoadBalancedFargateServiceApplet extends cdk.Stack {
    constructor(parent, id, props) {
        super(parent, id, props);
        const vpc = new aws_ec2_1.VpcNetwork(this, 'MyVpc', { maxAZs: 2 });
        const cluster = new cluster_1.Cluster(this, 'Cluster', { vpc });
        let domainZone;
        if (props.domainZone) {
            domainZone = new aws_route53_1.HostedZoneProvider(this, { domainName: props.domainZone }).findAndImport(this, 'Zone');
        }
        let certificate;
        if (props.certificate) {
            certificate = aws_certificatemanager_1.CertificateRef.import(this, 'Cert', { certificateArn: props.certificate });
        }
        // Instantiate Fargate Service with just cluster and image
        new load_balanced_fargate_service_1.LoadBalancedFargateService(this, "FargateService", {
            cluster,
            cpu: props.cpu,
            containerPort: props.containerPort,
            memoryMiB: props.memoryMiB,
            publicLoadBalancer: props.publicLoadBalancer,
            publicTasks: props.publicTasks,
            image: container_image_1.ContainerImage.fromDockerHub(props.image),
            desiredCount: props.desiredCount,
            certificate,
            domainName: props.domainName,
            domainZone
        });
    }
}
exports.LoadBalancedFargateServiceApplet = LoadBalancedFargateServiceApplet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1iYWxhbmNlZC1mYXJnYXRlLXNlcnZpY2UtYXBwbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibG9hZC1iYWxhbmNlZC1mYXJnYXRlLXNlcnZpY2UtYXBwbGV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNEVBQWlFO0FBQ2pFLDhDQUE4QztBQUM5QyxzREFBMEQ7QUFDMUQsb0NBQXFDO0FBQ3JDLHVDQUFvQztBQUNwQyx1REFBbUQ7QUFDbkQsbUZBQTZFO0FBNkY3RTs7O0dBR0c7QUFDSCxNQUFhLGdDQUFpQyxTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBQzdELFlBQVksTUFBZSxFQUFFLEVBQVUsRUFBRSxLQUE0QztRQUNuRixLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV6QixNQUFNLEdBQUcsR0FBRyxJQUFJLG9CQUFVLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELE1BQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUV0RCxJQUFJLFVBQVUsQ0FBQztRQUNmLElBQUksS0FBSyxDQUFDLFVBQVUsRUFBRTtZQUNwQixVQUFVLEdBQUcsSUFBSSxnQ0FBa0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztTQUN6RztRQUNELElBQUksV0FBVyxDQUFDO1FBQ2hCLElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRTtZQUNyQixXQUFXLEdBQUcsdUNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztTQUMxRjtRQUVELDBEQUEwRDtRQUMxRCxJQUFJLDBEQUEwQixDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRTtZQUNyRCxPQUFPO1lBQ1AsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1lBQ2QsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1lBQzVDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixLQUFLLEVBQUUsZ0NBQWMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztZQUNoRCxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsV0FBVztZQUNYLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixVQUFVO1NBQ1gsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBL0JELDRFQStCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENlcnRpZmljYXRlUmVmIH0gZnJvbSAnQGF3cy1jZGsvYXdzLWNlcnRpZmljYXRlbWFuYWdlcic7XG5pbXBvcnQgeyBWcGNOZXR3b3JrIH0gZnJvbSAnQGF3cy1jZGsvYXdzLWVjMic7XG5pbXBvcnQgeyBIb3N0ZWRab25lUHJvdmlkZXIgfSBmcm9tICdAYXdzLWNkay9hd3Mtcm91dGU1Myc7XG5pbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY2RrJyk7XG5pbXBvcnQgeyBDbHVzdGVyIH0gZnJvbSAnLi9jbHVzdGVyJztcbmltcG9ydCB7IENvbnRhaW5lckltYWdlIH0gZnJvbSAnLi9jb250YWluZXItaW1hZ2UnO1xuaW1wb3J0IHsgTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2UgfSBmcm9tICcuL2xvYWQtYmFsYW5jZWQtZmFyZ2F0ZS1zZXJ2aWNlJztcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBhIExvYWRCYWxhbmNlZEVjc1NlcnZpY2VBcHBsZXRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMb2FkQmFsYW5jZWRGYXJnYXRlU2VydmljZUFwcGxldFByb3BzIGV4dGVuZHMgY2RrLlN0YWNrUHJvcHMge1xuICAvKipcbiAgICogVGhlIGltYWdlIHRvIHN0YXJ0IChmcm9tIERvY2tlckh1YilcbiAgICovXG4gIGltYWdlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgY3B1IHVuaXRzIHVzZWQgYnkgdGhlIHRhc2suXG4gICAqIFZhbGlkIHZhbHVlcywgd2hpY2ggZGV0ZXJtaW5lcyB5b3VyIHJhbmdlIG9mIHZhbGlkIHZhbHVlcyBmb3IgdGhlIG1lbW9yeSBwYXJhbWV0ZXI6XG4gICAqIDI1NiAoLjI1IHZDUFUpIC0gQXZhaWxhYmxlIG1lbW9yeSB2YWx1ZXM6IDAuNUdCLCAxR0IsIDJHQlxuICAgKiA1MTIgKC41IHZDUFUpIC0gQXZhaWxhYmxlIG1lbW9yeSB2YWx1ZXM6IDFHQiwgMkdCLCAzR0IsIDRHQlxuICAgKiAxMDI0ICgxIHZDUFUpIC0gQXZhaWxhYmxlIG1lbW9yeSB2YWx1ZXM6IDJHQiwgM0dCLCA0R0IsIDVHQiwgNkdCLCA3R0IsIDhHQlxuICAgKiAyMDQ4ICgyIHZDUFUpIC0gQXZhaWxhYmxlIG1lbW9yeSB2YWx1ZXM6IEJldHdlZW4gNEdCIGFuZCAxNkdCIGluIDFHQiBpbmNyZW1lbnRzXG4gICAqIDQwOTYgKDQgdkNQVSkgLSBBdmFpbGFibGUgbWVtb3J5IHZhbHVlczogQmV0d2VlbiA4R0IgYW5kIDMwR0IgaW4gMUdCIGluY3JlbWVudHNcbiAgICpcbiAgICogVGhpcyBkZWZhdWx0IGlzIHNldCBpbiB0aGUgdW5kZXJseWluZyBGYXJnYXRlVGFza0RlZmluaXRpb24gY29uc3RydWN0LlxuICAgKlxuICAgKiBAZGVmYXVsdCAyNTZcbiAgICovXG4gIGNwdT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGFtb3VudCAoaW4gTWlCKSBvZiBtZW1vcnkgdXNlZCBieSB0aGUgdGFzay5cbiAgICpcbiAgICogVGhpcyBmaWVsZCBpcyByZXF1aXJlZCBhbmQgeW91IG11c3QgdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHZhbHVlcywgd2hpY2ggZGV0ZXJtaW5lcyB5b3VyIHJhbmdlIG9mIHZhbGlkIHZhbHVlc1xuICAgKiBmb3IgdGhlIGNwdSBwYXJhbWV0ZXI6XG4gICAqXG4gICAqIDAuNUdCLCAxR0IsIDJHQiAtIEF2YWlsYWJsZSBjcHUgdmFsdWVzOiAyNTYgKC4yNSB2Q1BVKVxuICAgKlxuICAgKiAxR0IsIDJHQiwgM0dCLCA0R0IgLSBBdmFpbGFibGUgY3B1IHZhbHVlczogNTEyICguNSB2Q1BVKVxuICAgKlxuICAgKiAyR0IsIDNHQiwgNEdCLCA1R0IsIDZHQiwgN0dCLCA4R0IgLSBBdmFpbGFibGUgY3B1IHZhbHVlczogMTAyNCAoMSB2Q1BVKVxuICAgKlxuICAgKiBCZXR3ZWVuIDRHQiBhbmQgMTZHQiBpbiAxR0IgaW5jcmVtZW50cyAtIEF2YWlsYWJsZSBjcHUgdmFsdWVzOiAyMDQ4ICgyIHZDUFUpXG4gICAqXG4gICAqIEJldHdlZW4gOEdCIGFuZCAzMEdCIGluIDFHQiBpbmNyZW1lbnRzIC0gQXZhaWxhYmxlIGNwdSB2YWx1ZXM6IDQwOTYgKDQgdkNQVSlcbiAgICpcbiAgICogVGhpcyBkZWZhdWx0IGlzIHNldCBpbiB0aGUgdW5kZXJseWluZyBGYXJnYXRlVGFza0RlZmluaXRpb24gY29uc3RydWN0LlxuICAgKlxuICAgKiBAZGVmYXVsdCA1MTJcbiAgICovXG4gIG1lbW9yeU1pQj86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGNvbnRhaW5lciBwb3J0IG9mIHRoZSBhcHBsaWNhdGlvbiBsb2FkIGJhbGFuY2VyIGF0dGFjaGVkIHRvIHlvdXIgRmFyZ2F0ZSBzZXJ2aWNlLiBDb3JyZXNwb25kcyB0byBjb250YWluZXIgcG9ydCBtYXBwaW5nLlxuICAgKlxuICAgKiBAZGVmYXVsdCA4MFxuICAgKi9cbiAgY29udGFpbmVyUG9ydD86IG51bWJlcjtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBBcHBsaWNhdGlvbiBMb2FkIEJhbGFuY2VyIHdpbGwgYmUgaW50ZXJuZXQtZmFjaW5nXG4gICAqXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIHB1YmxpY0xvYWRCYWxhbmNlcj86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciB5b3VyIEZhcmdhdGUgU2VydmljZSB3aWxsIGJlIGFzc2lnbmVkIGEgcHVibGljIElQIGFkZHJlc3MuXG4gICAqXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBwdWJsaWNUYXNrcz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiBkZXNpcmVkIGNvcGllcyBvZiBydW5uaW5nIHRhc2tzXG4gICAqXG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIGRlc2lyZWRDb3VudD86IG51bWJlcjtcblxuICAvKlxuICAgKiBEb21haW4gbmFtZSBmb3IgdGhlIHNlcnZpY2UsIGUuZy4gYXBpLmV4YW1wbGUuY29tXG4gICAqL1xuICBkb21haW5OYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBSb3V0ZTUzIGhvc3RlZCB6b25lIGZvciB0aGUgZG9tYWluLCBlLmcuIFwiZXhhbXBsZS5jb20uXCJcbiAgICovXG4gIGRvbWFpblpvbmU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENlcnRpZmljYXRlIE1hbmFnZXIgY2VydGlmaWNhdGUgdG8gYXNzb2NpYXRlIHdpdGggdGhlIGxvYWQgYmFsYW5jZXIuXG4gICAqIFNldHRpbmcgdGhpcyBvcHRpb24gd2lsbCBzZXQgdGhlIGxvYWQgYmFsYW5jZXIgcG9ydCB0byA0NDMuXG4gICAqL1xuICBjZXJ0aWZpY2F0ZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBbiBhcHBsZXQgZm9yIGEgTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2UuIFNldHMgdXAgYSBGYXJnYXRlIHNlcnZpY2UsIEFwcGxpY2F0aW9uXG4gKiBsb2FkIGJhbGFuY2VyLCBFQ1MgY2x1c3RlciwgVlBDLCBhbmQgKG9wdGlvbmFsbHkpIFJvdXRlNTMgYWxpYXMgcmVjb3JkLlxuICovXG5leHBvcnQgY2xhc3MgTG9hZEJhbGFuY2VkRmFyZ2F0ZVNlcnZpY2VBcHBsZXQgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IGNkay5BcHAsIGlkOiBzdHJpbmcsIHByb3BzOiBMb2FkQmFsYW5jZWRGYXJnYXRlU2VydmljZUFwcGxldFByb3BzKSB7XG4gICAgc3VwZXIocGFyZW50LCBpZCwgcHJvcHMpO1xuXG4gICAgY29uc3QgdnBjID0gbmV3IFZwY05ldHdvcmsodGhpcywgJ015VnBjJywgeyBtYXhBWnM6IDIgfSk7XG4gICAgY29uc3QgY2x1c3RlciA9IG5ldyBDbHVzdGVyKHRoaXMsICdDbHVzdGVyJywgeyB2cGMgfSk7XG5cbiAgICBsZXQgZG9tYWluWm9uZTtcbiAgICBpZiAocHJvcHMuZG9tYWluWm9uZSkge1xuICAgICAgZG9tYWluWm9uZSA9IG5ldyBIb3N0ZWRab25lUHJvdmlkZXIodGhpcywgeyBkb21haW5OYW1lOiBwcm9wcy5kb21haW5ab25lIH0pLmZpbmRBbmRJbXBvcnQodGhpcywgJ1pvbmUnKTtcbiAgICB9XG4gICAgbGV0IGNlcnRpZmljYXRlO1xuICAgIGlmIChwcm9wcy5jZXJ0aWZpY2F0ZSkge1xuICAgICAgY2VydGlmaWNhdGUgPSBDZXJ0aWZpY2F0ZVJlZi5pbXBvcnQodGhpcywgJ0NlcnQnLCB7IGNlcnRpZmljYXRlQXJuOiBwcm9wcy5jZXJ0aWZpY2F0ZSB9KTtcbiAgICB9XG5cbiAgICAvLyBJbnN0YW50aWF0ZSBGYXJnYXRlIFNlcnZpY2Ugd2l0aCBqdXN0IGNsdXN0ZXIgYW5kIGltYWdlXG4gICAgbmV3IExvYWRCYWxhbmNlZEZhcmdhdGVTZXJ2aWNlKHRoaXMsIFwiRmFyZ2F0ZVNlcnZpY2VcIiwge1xuICAgICAgY2x1c3RlcixcbiAgICAgIGNwdTogcHJvcHMuY3B1LFxuICAgICAgY29udGFpbmVyUG9ydDogcHJvcHMuY29udGFpbmVyUG9ydCxcbiAgICAgIG1lbW9yeU1pQjogcHJvcHMubWVtb3J5TWlCLFxuICAgICAgcHVibGljTG9hZEJhbGFuY2VyOiBwcm9wcy5wdWJsaWNMb2FkQmFsYW5jZXIsXG4gICAgICBwdWJsaWNUYXNrczogcHJvcHMucHVibGljVGFza3MsXG4gICAgICBpbWFnZTogQ29udGFpbmVySW1hZ2UuZnJvbURvY2tlckh1Yihwcm9wcy5pbWFnZSksXG4gICAgICBkZXNpcmVkQ291bnQ6IHByb3BzLmRlc2lyZWRDb3VudCxcbiAgICAgIGNlcnRpZmljYXRlLFxuICAgICAgZG9tYWluTmFtZTogcHJvcHMuZG9tYWluTmFtZSxcbiAgICAgIGRvbWFpblpvbmVcbiAgICB9KTtcbiAgfVxufSJdfQ==
import appscaling = require('@aws-cdk/aws-applicationautoscaling');
import cloudwatch = require('@aws-cdk/aws-cloudwatch');
import ec2 = require('@aws-cdk/aws-ec2');
import elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');
import cdk = require('@aws-cdk/cdk');
import { TaskDefinition } from '../base/task-definition';
import { cloudformation } from '../ecs.generated';
import { ScalableTaskCount } from './scalable-task-count';
/**
 * Basic service properties
 */
export interface BaseServiceProps {
    /**
     * Number of desired copies of running tasks
     *
     * @default 1
     */
    desiredCount?: number;
    /**
     * A name for the service.
     *
     * @default CloudFormation-generated name
     */
    serviceName?: string;
    /**
     * The maximum number of tasks, specified as a percentage of the Amazon ECS
     * service's DesiredCount value, that can run in a service during a
     * deployment.
     *
     * @default 200
     */
    maximumPercent?: number;
    /**
     * The minimum number of tasks, specified as a percentage of
     * the Amazon ECS service's DesiredCount value, that must
     * continue to run and remain healthy during a deployment.
     *
     * @default 50
     */
    minimumHealthyPercent?: number;
    /**
     * Time after startup to ignore unhealthy load balancer checks.
     *
     * @default ??? FIXME
     */
    healthCheckGracePeriodSeconds?: number;
}
/**
 * Base class for Ecs and Fargate services
 */
export declare abstract class BaseService extends cdk.Construct implements elbv2.IApplicationLoadBalancerTarget, elbv2.INetworkLoadBalancerTarget, cdk.IDependable {
    /**
     * CloudFormation resources generated by this service
     */
    readonly dependencyElements: cdk.IDependable[];
    /**
     * Manage allowed network traffic for this service
     */
    readonly connections: ec2.Connections;
    /**
     * ARN of this service
     */
    readonly serviceArn: string;
    /**
     * Name of this service
     */
    readonly serviceName: string;
    /**
     * Name of this service's cluster
     */
    readonly clusterName: string;
    /**
     * Task definition this service is associated with
     */
    readonly taskDefinition: TaskDefinition;
    protected loadBalancers: cloudformation.ServiceResource.LoadBalancerProperty[];
    protected networkConfiguration?: cloudformation.ServiceResource.NetworkConfigurationProperty;
    private readonly resource;
    private scalableTaskCount?;
    constructor(parent: cdk.Construct, name: string, props: BaseServiceProps, additionalProps: any, clusterName: string, taskDefinition: TaskDefinition);
    /**
     * Called when the service is attached to an ALB
     *
     * Don't call this function directly. Instead, call listener.addTarget()
     * to add this service to a load balancer.
     */
    attachToApplicationTargetGroup(targetGroup: elbv2.ApplicationTargetGroup): elbv2.LoadBalancerTargetProps;
    /**
     * Called when the service is attached to an NLB
     *
     * Don't call this function directly. Instead, call listener.addTarget()
     * to add this service to a load balancer.
     */
    attachToNetworkTargetGroup(targetGroup: elbv2.NetworkTargetGroup): elbv2.LoadBalancerTargetProps;
    /**
     * Enable autoscaling for the number of tasks in this service
     */
    autoScaleTaskCount(props: appscaling.EnableScalingProps): ScalableTaskCount;
    /**
     * Return the given named metric for this Service
     */
    metric(metricName: string, props?: cloudwatch.MetricCustomization): cloudwatch.Metric;
    /**
     * Set up AWSVPC networking for this construct
     */
    protected configureAwsVpcNetworking(vpc: ec2.VpcNetworkRef, assignPublicIp?: boolean, vpcPlacement?: ec2.VpcPlacementStrategy, securityGroup?: ec2.SecurityGroupRef): void;
    /**
     * Shared logic for attaching to an ELBv2
     */
    private attachToELBv2;
    /**
     * Generate the role that will be used for autoscaling this service
     */
    private makeAutoScalingRole;
}

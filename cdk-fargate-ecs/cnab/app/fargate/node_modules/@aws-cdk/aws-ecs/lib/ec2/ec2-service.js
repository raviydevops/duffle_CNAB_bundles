"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cloudwatch = require("@aws-cdk/aws-cloudwatch");
const cdk = require("@aws-cdk/cdk");
const base_service_1 = require("../base/base-service");
const task_definition_1 = require("../base/task-definition");
const util_1 = require("../util");
/**
 * Start a service on an ECS cluster
 */
class Ec2Service extends base_service_1.BaseService {
    constructor(parent, name, props) {
        if (props.daemon && props.desiredCount !== undefined) {
            throw new Error('Daemon mode launches one task on every instance. Don\'t supply desiredCount.');
        }
        if (!util_1.isEc2Compatible(props.taskDefinition.compatibility)) {
            throw new Error('Supplied TaskDefinition is not configured for compatibility with EC2');
        }
        super(parent, name, Object.assign({}, props, { 
            // If daemon, desiredCount must be undefined and that's what we want. Otherwise, default to 1.
            desiredCount: props.daemon || props.desiredCount !== undefined ? props.desiredCount : 1 }), {
            cluster: props.cluster.clusterName,
            taskDefinition: props.taskDefinition.taskDefinitionArn,
            launchType: 'EC2',
            placementConstraints: new cdk.Token(() => this.constraints),
            placementStrategies: new cdk.Token(() => this.strategies),
            schedulingStrategy: props.daemon ? 'DAEMON' : 'REPLICA',
        }, props.cluster.clusterName, props.taskDefinition);
        this.cluster = props.cluster;
        this.clusterName = props.cluster.clusterName;
        this.constraints = [];
        this.strategies = [];
        this.daemon = props.daemon || false;
        if (props.taskDefinition.networkMode === task_definition_1.NetworkMode.AwsVpc) {
            this.configureAwsVpcNetworking(props.cluster.vpc, false, props.vpcPlacement, props.securityGroup);
        }
        else {
            // Either None, Bridge or Host networking. Copy SecurityGroup from ASG.
            validateNoNetworkingProps(props);
            this.connections.addSecurityGroup(...props.cluster.connections.securityGroups);
        }
        if (props.placeOnDistinctInstances) {
            this.constraints.push({ type: 'distinctInstance' });
        }
        if (!this.taskDefinition.defaultContainer) {
            throw new Error('A TaskDefinition must have at least one essential container');
        }
    }
    /**
     * Place services only on instances matching the given query expression
     *
     * You can specify multiple expressions in one call. The tasks will only
     * be placed on instances matching all expressions.
     *
     * @see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html
     */
    placeOnMemberOf(...expressions) {
        for (const expression of expressions) {
            this.constraints.push({ type: 'memberOf', expression });
        }
    }
    /**
     * Try to place tasks spread across instance attributes.
     *
     * You can use one of the built-in attributes found on `BuiltInAttributes`
     * or supply your own custom instance attributes. If more than one attribute
     * is supplied, spreading is done in order.
     *
     * @default attributes instanceId
     */
    placeSpreadAcross(...fields) {
        if (this.daemon) {
            throw new Error("Can't configure spreading placement for a service with daemon=true");
        }
        if (fields.length === 0) {
            fields = [BuiltInAttributes.InstanceId];
        }
        for (const field of fields) {
            this.strategies.push({ type: 'spread', field });
        }
    }
    /**
     * Try to place tasks on instances with the least amount of indicated resource available
     *
     * This ensures the total consumption of this resource is lowest.
     */
    placePackedBy(resource) {
        if (this.daemon) {
            throw new Error("Can't configure packing placement for a service with daemon=true");
        }
        this.strategies.push({ type: 'binpack', field: resource });
    }
    /**
     * Place tasks randomly across the available instances.
     */
    placeRandomly() {
        if (this.daemon) {
            throw new Error("Can't configure random placement for a service with daemon=true");
        }
        this.strategies.push({ type: 'random' });
    }
    /**
     * Register this service as the target of a Classic Load Balancer
     *
     * Don't call this. Call `loadBalancer.addTarget()` instead.
     */
    attachToClassicLB(loadBalancer) {
        if (this.taskDefinition.networkMode === task_definition_1.NetworkMode.Bridge) {
            throw new Error("Cannot use a Classic Load Balancer if NetworkMode is Bridge. Use Host or AwsVpc instead.");
        }
        if (this.taskDefinition.networkMode === task_definition_1.NetworkMode.None) {
            throw new Error("Cannot use a load balancer if NetworkMode is None. Use Host or AwsVpc instead.");
        }
        this.loadBalancers.push({
            loadBalancerName: loadBalancer.loadBalancerName,
            containerName: this.taskDefinition.defaultContainer.id,
            containerPort: this.taskDefinition.defaultContainer.containerPort,
        });
    }
    /**
     * Return the given named metric for this Service
     */
    metric(metricName, props) {
        return new cloudwatch.Metric(Object.assign({ namespace: 'AWS/ECS', metricName, dimensions: { ClusterName: this.clusterName, ServiceName: this.serviceName } }, props));
    }
    /**
     * Metric for cluster Memory utilization
     *
     * @default average over 5 minutes
     */
    metricMemoryUtilization(props) {
        return this.metric('MemoryUtilization', props);
    }
    /**
     * Metric for cluster CPU utilization
     *
     * @default average over 5 minutes
     */
    metricCpuUtilization(props) {
        return this.metric('CPUUtilization', props);
    }
    /**
     * Validate this Ec2Service
     */
    validate() {
        const ret = super.validate();
        if (!this.cluster.hasEc2Capacity) {
            ret.push('Cluster for this service needs Ec2 capacity. Call addXxxCapacity() on the cluster.');
        }
        return ret;
    }
}
exports.Ec2Service = Ec2Service;
/**
 * Validate combinations of networking arguments
 */
function validateNoNetworkingProps(props) {
    if (props.vpcPlacement !== undefined || props.securityGroup !== undefined) {
        throw new Error('vpcPlacement and securityGroup can only be used in AwsVpc networking mode');
    }
}
/**
 * Built-in container instance attributes
 */
class BuiltInAttributes {
}
/**
 * The Instance ID of the instance
 */
BuiltInAttributes.InstanceId = 'instanceId';
/**
 * The AZ where the instance is running
 */
BuiltInAttributes.AvailabilityZone = 'attribute:ecs.availability-zone';
/**
 * The AMI ID of the instance
 */
BuiltInAttributes.AmiId = 'attribute:ecs.ami-id';
/**
 * The instance type
 */
BuiltInAttributes.InstanceType = 'attribute:ecs.instance-type';
/**
 * The OS type
 *
 * Either 'linux' or 'windows'.
 */
BuiltInAttributes.OsType = 'attribute:ecs.os-type';
exports.BuiltInAttributes = BuiltInAttributes;
/**
 * Instance resource used for bin packing
 */
var BinPackResource;
(function (BinPackResource) {
    /**
     * Fill up hosts' CPU allocations first
     */
    BinPackResource["Cpu"] = "cpu";
    /**
     * Fill up hosts' memory allocations first
     */
    BinPackResource["Memory"] = "memory";
})(BinPackResource = exports.BinPackResource || (exports.BinPackResource = {}));
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Linux parameter setup in a container
 */
class LinuxParameters {
    constructor() {
        /**
         * Capabilities to be added
         */
        this.capAdd = [];
        /**
         * Capabilities to be dropped
         */
        this.capDrop = [];
        /**
         * Device mounts
         */
        this.devices = [];
        /**
         * TMPFS mounts
         */
        this.tmpfs = [];
    }
    /**
     * Add one or more capabilities
     *
     * Only works with EC2 launch type.
     */
    addCapabilities(...cap) {
        this.capAdd.push(...cap);
    }
    /**
     * Drop one or more capabilities
     *
     * Only works with EC2 launch type.
     */
    dropCapabilities(...cap) {
        this.capDrop.push(...cap);
    }
    /**
     * Add one or more devices
     */
    addDevices(...device) {
        this.devices.push(...device);
    }
    /**
     * Add one or more tmpfs mounts
     */
    addTmpfs(...tmpfs) {
        this.tmpfs.push(...tmpfs);
    }
    /**
     * Render the Linux parameters to a CloudFormation object
     */
    renderLinuxParameters() {
        return {
            initProcessEnabled: this.initProcessEnabled,
            sharedMemorySize: this.sharedMemorySize,
            capabilities: {
                add: this.capAdd,
                drop: this.capDrop,
            },
            devices: this.devices.map(renderDevice),
            tmpfs: this.tmpfs.map(renderTmpfs)
        };
    }
}
exports.LinuxParameters = LinuxParameters;
function renderDevice(device) {
    return {
        containerPath: device.containerPath,
        hostPath: device.hostPath,
        permissions: device.permissions
    };
}
function renderTmpfs(tmpfs) {
    return {
        containerPath: tmpfs.containerPath,
        size: tmpfs.size,
        mountOptions: tmpfs.mountOptions
    };
}
/**
 * A Linux capability
 */
var Capability;
(function (Capability) {
    Capability["All"] = "ALL";
    Capability["AuditControl"] = "AUDIT_CONTROL";
    Capability["AuditWrite"] = "AUDIT_WRITE";
    Capability["BlockSuspend"] = "BLOCK_SUSPEND";
    Capability["Chown"] = "CHOWN";
    Capability["DacOverride"] = "DAC_OVERRIDE";
    Capability["DacReadSearch"] = "DAC_READ_SEARCH";
    Capability["Fowner"] = "FOWNER";
    Capability["Fsetid"] = "FSETID";
    Capability["IpcLock"] = "IPC_LOCK";
    Capability["IpcOwner"] = "IPC_OWNER";
    Capability["Kill"] = "KILL";
    Capability["Lease"] = "LEASE";
    Capability["LinuxImmutable"] = "LINUX_IMMUTABLE";
    Capability["MacAdmin"] = "MAC_ADMIN";
    Capability["MacOverride"] = "MAC_OVERRIDE";
    Capability["Mknod"] = "MKNOD";
    Capability["NetAdmin"] = "NET_ADMIN";
    Capability["NetBindService"] = "NET_BIND_SERVICE";
    Capability["NetBroadcast"] = "NET_BROADCAST";
    Capability["NetRaw"] = "NET_RAW";
    Capability["Setfcap"] = "SETFCAP";
    Capability["Setgid"] = "SETGID";
    Capability["Setpcap"] = "SETPCAP";
    Capability["Setuid"] = "SETUID";
    Capability["SysAdmin"] = "SYS_ADMIN";
    Capability["SysBoot"] = "SYS_BOOT";
    Capability["SysChroot"] = "SYS_CHROOT";
    Capability["SysModule"] = "SYS_MODULE";
    Capability["SysNice"] = "SYS_NICE";
    Capability["SysPacct"] = "SYS_PACCT";
    Capability["SysPtrace"] = "SYS_PTRACE";
    Capability["SysRawio"] = "SYS_RAWIO";
    Capability["SysResource"] = "SYS_RESOURCE";
    Capability["SysTime"] = "SYS_TIME";
    Capability["SysTtyConfig"] = "SYS_TTY_CONFIG";
    Capability["Syslog"] = "SYSLOG";
    Capability["WakeAlarm"] = "WAKE_ALARM";
})(Capability = exports.Capability || (exports.Capability = {}));
/**
 * Permissions for device access
 */
var DevicePermission;
(function (DevicePermission) {
    /**
     * Read
     */
    DevicePermission["Read"] = "read";
    /**
     * Write
     */
    DevicePermission["Write"] = "write";
    /**
     * Make a node
     */
    DevicePermission["Mknod"] = "mknod";
})(DevicePermission = exports.DevicePermission || (exports.DevicePermission = {}));
/**
 * Options for a tmpfs mount
 */
var TmpfsMountOption;
(function (TmpfsMountOption) {
    TmpfsMountOption["Defaults"] = "defaults";
    TmpfsMountOption["Ro"] = "ro";
    TmpfsMountOption["Rw"] = "rw";
    TmpfsMountOption["Suid"] = "suid";
    TmpfsMountOption["Nosuid"] = "nosuid";
    TmpfsMountOption["Dev"] = "dev";
    TmpfsMountOption["Nodev"] = "nodev";
    TmpfsMountOption["Exec"] = "exec";
    TmpfsMountOption["Noexec"] = "noexec";
    TmpfsMountOption["Sync"] = "sync";
    TmpfsMountOption["Async"] = "async";
    TmpfsMountOption["Dirsync"] = "dirsync";
    TmpfsMountOption["Remount"] = "remount";
    TmpfsMountOption["Mand"] = "mand";
    TmpfsMountOption["Nomand"] = "nomand";
    TmpfsMountOption["Atime"] = "atime";
    TmpfsMountOption["Noatime"] = "noatime";
    TmpfsMountOption["Diratime"] = "diratime";
    TmpfsMountOption["Nodiratime"] = "nodiratime";
    TmpfsMountOption["Bind"] = "bind";
    TmpfsMountOption["Rbind"] = "rbind";
    TmpfsMountOption["Unbindable"] = "unbindable";
    TmpfsMountOption["Runbindable"] = "runbindable";
    TmpfsMountOption["Private"] = "private";
    TmpfsMountOption["Rprivate"] = "rprivate";
    TmpfsMountOption["Shared"] = "shared";
    TmpfsMountOption["Rshared"] = "rshared";
    TmpfsMountOption["Slave"] = "slave";
    TmpfsMountOption["Rslave"] = "rslave";
    TmpfsMountOption["Relatime"] = "relatime";
    TmpfsMountOption["Norelatime"] = "norelatime";
    TmpfsMountOption["Strictatime"] = "strictatime";
    TmpfsMountOption["Nostrictatime"] = "nostrictatime";
    TmpfsMountOption["Mode"] = "mode";
    TmpfsMountOption["Uid"] = "uid";
    TmpfsMountOption["Gid"] = "gid";
    TmpfsMountOption["NrInodes"] = "nr_inodes";
    TmpfsMountOption["NrBlocks"] = "nr_blocks";
    TmpfsMountOption["Mpol"] = "mpol";
})(TmpfsMountOption = exports.TmpfsMountOption || (exports.TmpfsMountOption = {}));
//# sourceMappingURL=data:application/json;base64,
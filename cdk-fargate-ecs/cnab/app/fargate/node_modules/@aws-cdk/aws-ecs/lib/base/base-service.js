"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const appscaling = require("@aws-cdk/aws-applicationautoscaling");
const cloudwatch = require("@aws-cdk/aws-cloudwatch");
const ec2 = require("@aws-cdk/aws-ec2");
const elbv2 = require("@aws-cdk/aws-elasticloadbalancingv2");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const task_definition_1 = require("../base/task-definition");
const ecs_generated_1 = require("../ecs.generated");
const scalable_task_count_1 = require("./scalable-task-count");
/**
 * Base class for Ecs and Fargate services
 */
class BaseService extends cdk.Construct {
    constructor(parent, name, props, additionalProps, clusterName, taskDefinition) {
        super(parent, name);
        /**
         * Manage allowed network traffic for this service
         */
        this.connections = new ec2.Connections();
        this.loadBalancers = new Array();
        this.taskDefinition = taskDefinition;
        this.resource = new ecs_generated_1.cloudformation.ServiceResource(this, "Service", Object.assign({ desiredCount: props.desiredCount, serviceName: props.serviceName, loadBalancers: new cdk.Token(() => this.loadBalancers), deploymentConfiguration: {
                maximumPercent: props.maximumPercent || 200,
                minimumHealthyPercent: props.minimumHealthyPercent || 50
            }, healthCheckGracePeriodSeconds: props.healthCheckGracePeriodSeconds, 
            /* role: never specified, supplanted by Service Linked Role */
            networkConfiguration: new cdk.Token(() => this.networkConfiguration) }, additionalProps));
        this.serviceArn = this.resource.serviceArn;
        this.serviceName = this.resource.serviceName;
        this.dependencyElements = [this.resource];
        this.clusterName = clusterName;
    }
    /**
     * Called when the service is attached to an ALB
     *
     * Don't call this function directly. Instead, call listener.addTarget()
     * to add this service to a load balancer.
     */
    attachToApplicationTargetGroup(targetGroup) {
        const ret = this.attachToELBv2(targetGroup);
        // Open up security groups. For dynamic port mapping, we won't know the port range
        // in advance so we need to open up all ports.
        const port = this.taskDefinition.defaultContainer.ingressPort;
        const portRange = port === 0 ? EPHEMERAL_PORT_RANGE : new ec2.TcpPort(port);
        targetGroup.registerConnectable(this, portRange);
        return ret;
    }
    /**
     * Called when the service is attached to an NLB
     *
     * Don't call this function directly. Instead, call listener.addTarget()
     * to add this service to a load balancer.
     */
    attachToNetworkTargetGroup(targetGroup) {
        return this.attachToELBv2(targetGroup);
    }
    /**
     * Enable autoscaling for the number of tasks in this service
     */
    autoScaleTaskCount(props) {
        if (this.scalableTaskCount) {
            throw new Error('AutoScaling of task count already enabled for this service');
        }
        return this.scalableTaskCount = new scalable_task_count_1.ScalableTaskCount(this, 'TaskCount', Object.assign({ serviceNamespace: appscaling.ServiceNamespace.Ecs, resourceId: `service/${this.clusterName}/${this.resource.serviceName}`, dimension: 'ecs:service:DesiredCount', role: this.makeAutoScalingRole() }, props));
    }
    /**
     * Return the given named metric for this Service
     */
    metric(metricName, props) {
        return new cloudwatch.Metric(Object.assign({ namespace: 'AWS/ECS', metricName, dimensions: { ServiceName: this.serviceName } }, props));
    }
    /**
     * Set up AWSVPC networking for this construct
     */
    // tslint:disable-next-line:max-line-length
    configureAwsVpcNetworking(vpc, assignPublicIp, vpcPlacement, securityGroup) {
        if (vpcPlacement === undefined) {
            vpcPlacement = { subnetsToUse: assignPublicIp ? ec2.SubnetType.Public : ec2.SubnetType.Private };
        }
        if (securityGroup === undefined) {
            securityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', { vpc });
        }
        const subnets = vpc.subnets(vpcPlacement);
        this.connections.addSecurityGroup(securityGroup);
        this.networkConfiguration = {
            awsvpcConfiguration: {
                assignPublicIp: assignPublicIp ? 'ENABLED' : 'DISABLED',
                subnets: subnets.map(x => x.subnetId),
                securityGroups: new cdk.Token(() => [securityGroup.securityGroupId]),
            }
        };
    }
    /**
     * Shared logic for attaching to an ELBv2
     */
    attachToELBv2(targetGroup) {
        if (this.taskDefinition.networkMode === task_definition_1.NetworkMode.None) {
            throw new Error("Cannot use a load balancer if NetworkMode is None. Use Bridge, Host or AwsVpc instead.");
        }
        this.loadBalancers.push({
            targetGroupArn: targetGroup.targetGroupArn,
            containerName: this.taskDefinition.defaultContainer.id,
            containerPort: this.taskDefinition.defaultContainer.containerPort,
        });
        this.resource.addDependency(targetGroup.loadBalancerDependency());
        const targetType = this.taskDefinition.networkMode === task_definition_1.NetworkMode.AwsVpc ? elbv2.TargetType.Ip : elbv2.TargetType.Instance;
        return { targetType };
    }
    /**
     * Generate the role that will be used for autoscaling this service
     */
    makeAutoScalingRole() {
        // Use a Service Linked Role.
        return iam.Role.import(this, 'ScalingRole', {
            roleArn: cdk.ArnUtils.fromComponents({
                service: 'iam',
                resource: 'role/aws-service-role/ecs.application-autoscaling.amazonaws.com',
                resourceName: 'AWSServiceRoleForApplicationAutoScaling_ECSService',
            })
        });
    }
}
exports.BaseService = BaseService;
/**
 * The port range to open up for dynamic port mapping
 */
const EPHEMERAL_PORT_RANGE = new ec2.TcpPortRange(32768, 65535);
//# sourceMappingURL=data:application/json;base64,
import cloudwatch = require('@aws-cdk/aws-cloudwatch');
import ec2 = require('@aws-cdk/aws-ec2');
import elb = require('@aws-cdk/aws-elasticloadbalancing');
import cdk = require('@aws-cdk/cdk');
import { BaseService, BaseServiceProps } from '../base/base-service';
import { TaskDefinition } from '../base/task-definition';
import { ICluster } from '../cluster';
/**
 * Properties to define an ECS service
 */
export interface Ec2ServiceProps extends BaseServiceProps {
    /**
     * Cluster where service will be deployed
     */
    cluster: ICluster;
    /**
     * Task Definition used for running tasks in the service
     */
    taskDefinition: TaskDefinition;
    /**
     * In what subnets to place the task's ENIs
     *
     * (Only applicable in case the TaskDefinition is configured for AwsVpc networking)
     *
     * @default Private subnets
     */
    vpcPlacement?: ec2.VpcPlacementStrategy;
    /**
     * Existing security group to use for the task's ENIs
     *
     * (Only applicable in case the TaskDefinition is configured for AwsVpc networking)
     *
     * @default A new security group is created
     */
    securityGroup?: ec2.SecurityGroupRef;
    /**
     * Whether to start services on distinct instances
     *
     * @default true
     */
    placeOnDistinctInstances?: boolean;
    /**
     * Deploy exactly one task on each instance in your cluster.
     *
     * When using this strategy, do not specify a desired number of tasks or any
     * task placement strategies.
     *
     * @default false
     */
    daemon?: boolean;
}
/**
 * Start a service on an ECS cluster
 */
export declare class Ec2Service extends BaseService implements elb.ILoadBalancerTarget {
    /**
     * Name of the cluster
     */
    readonly clusterName: string;
    private readonly constraints;
    private readonly strategies;
    private readonly daemon;
    private readonly cluster;
    constructor(parent: cdk.Construct, name: string, props: Ec2ServiceProps);
    /**
     * Place services only on instances matching the given query expression
     *
     * You can specify multiple expressions in one call. The tasks will only
     * be placed on instances matching all expressions.
     *
     * @see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html
     */
    placeOnMemberOf(...expressions: string[]): void;
    /**
     * Try to place tasks spread across instance attributes.
     *
     * You can use one of the built-in attributes found on `BuiltInAttributes`
     * or supply your own custom instance attributes. If more than one attribute
     * is supplied, spreading is done in order.
     *
     * @default attributes instanceId
     */
    placeSpreadAcross(...fields: string[]): void;
    /**
     * Try to place tasks on instances with the least amount of indicated resource available
     *
     * This ensures the total consumption of this resource is lowest.
     */
    placePackedBy(resource: BinPackResource): void;
    /**
     * Place tasks randomly across the available instances.
     */
    placeRandomly(): void;
    /**
     * Register this service as the target of a Classic Load Balancer
     *
     * Don't call this. Call `loadBalancer.addTarget()` instead.
     */
    attachToClassicLB(loadBalancer: elb.LoadBalancer): void;
    /**
     * Return the given named metric for this Service
     */
    metric(metricName: string, props?: cloudwatch.MetricCustomization): cloudwatch.Metric;
    /**
     * Metric for cluster Memory utilization
     *
     * @default average over 5 minutes
     */
    metricMemoryUtilization(props?: cloudwatch.MetricCustomization): cloudwatch.Metric;
    /**
     * Metric for cluster CPU utilization
     *
     * @default average over 5 minutes
     */
    metricCpuUtilization(props?: cloudwatch.MetricCustomization): cloudwatch.Metric;
    /**
     * Validate this Ec2Service
     */
    validate(): string[];
}
/**
 * Built-in container instance attributes
 */
export declare class BuiltInAttributes {
    /**
     * The Instance ID of the instance
     */
    static readonly InstanceId = "instanceId";
    /**
     * The AZ where the instance is running
     */
    static readonly AvailabilityZone = "attribute:ecs.availability-zone";
    /**
     * The AMI ID of the instance
     */
    static readonly AmiId = "attribute:ecs.ami-id";
    /**
     * The instance type
     */
    static readonly InstanceType = "attribute:ecs.instance-type";
    /**
     * The OS type
     *
     * Either 'linux' or 'windows'.
     */
    static readonly OsType = "attribute:ecs.os-type";
}
/**
 * Instance resource used for bin packing
 */
export declare enum BinPackResource {
    /**
     * Fill up hosts' CPU allocations first
     */
    Cpu = "cpu",
    /**
     * Fill up hosts' memory allocations first
     */
    Memory = "memory"
}

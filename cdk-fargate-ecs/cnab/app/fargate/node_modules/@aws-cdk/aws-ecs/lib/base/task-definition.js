"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const container_definition_1 = require("../container-definition");
const ecs_generated_1 = require("../ecs.generated");
const util_1 = require("../util");
/**
 * Base class for Ecs and Fargate task definitions
 */
class TaskDefinition extends cdk.Construct {
    constructor(parent, name, props) {
        super(parent, name);
        /**
         * All containers
         */
        this.containers = new Array();
        /**
         * All volumes
         */
        this.volumes = [];
        /**
         * Placement constraints for task instances
         */
        this.placementConstraints = new Array();
        this.family = props.family || this.uniqueId;
        this.compatibility = props.compatibility;
        if (props.volumes) {
            props.volumes.forEach(v => this.addVolume(v));
        }
        this.networkMode = props.networkMode !== undefined ? props.networkMode :
            util_1.isFargateCompatible(this.compatibility) ? NetworkMode.AwsVpc : NetworkMode.Bridge;
        if (util_1.isFargateCompatible(this.compatibility) && this.networkMode !== NetworkMode.AwsVpc) {
            throw new Error(`Fargate tasks can only have AwsVpc network mode, got: ${this.networkMode}`);
        }
        if (props.placementConstraints && props.placementConstraints.length > 0 && util_1.isFargateCompatible(this.compatibility)) {
            throw new Error('Cannot set placement constraints on tasks that run on Fargate');
        }
        if (util_1.isFargateCompatible(this.compatibility) && (!props.cpu || !props.memoryMiB)) {
            throw new Error(`Fargate-compatible tasks require both CPU (${props.cpu}) and memory (${props.memoryMiB}) specifications`);
        }
        this.executionRole = props.executionRole;
        this.taskRole = props.taskRole || new iam.Role(this, 'TaskRole', {
            assumedBy: new iam.ServicePrincipal('ecs-tasks.amazonaws.com'),
        });
        const taskDef = new ecs_generated_1.cloudformation.TaskDefinitionResource(this, 'Resource', {
            containerDefinitions: new cdk.Token(() => this.containers.map(x => x.renderContainerDefinition())),
            volumes: new cdk.Token(() => this.volumes),
            executionRoleArn: new cdk.Token(() => this.executionRole && this.executionRole.roleArn),
            family: this.family,
            taskRoleArn: this.taskRole.roleArn,
            requiresCompatibilities: [
                ...(util_1.isEc2Compatible(props.compatibility) ? ["EC2"] : []),
                ...(util_1.isFargateCompatible(props.compatibility) ? ["FARGATE"] : []),
            ],
            networkMode: this.networkMode,
            placementConstraints: !util_1.isFargateCompatible(this.compatibility) ? new cdk.Token(this.placementConstraints) : undefined,
            cpu: props.cpu,
            memory: props.memoryMiB,
        });
        if (props.placementConstraints) {
            props.placementConstraints.forEach(pc => this.addPlacementConstraint(pc));
        }
        this.taskDefinitionArn = taskDef.taskDefinitionArn;
    }
    /**
     * Add a policy statement to the Task Role
     */
    addToTaskRolePolicy(statement) {
        this.taskRole.addToPolicy(statement);
    }
    /**
     * Add a policy statement to the Execution Role
     */
    addToExecutionRolePolicy(statement) {
        this.obtainExecutionRole().addToPolicy(statement);
    }
    /**
     * Create a new container to this task definition
     */
    addContainer(id, props) {
        const container = new container_definition_1.ContainerDefinition(this, id, this, props);
        this.containers.push(container);
        if (this.defaultContainer === undefined && container.essential) {
            this.defaultContainer = container;
        }
        return container;
    }
    /**
     * Add a volume to this task definition
     */
    addVolume(volume) {
        this.volumes.push(volume);
    }
    /**
     * Validate this task definition
     */
    validate() {
        const ret = super.validate();
        if (util_1.isEc2Compatible(this.compatibility)) {
            // EC2 mode validations
            // Container sizes
            for (const container of this.containers) {
                if (!container.memoryLimitSpecified) {
                    ret.push(`ECS Container ${container.id} must have at least one of 'memoryLimitMiB' or 'memoryReservationMiB' specified`);
                }
            }
        }
        return ret;
    }
    /**
     * Constrain where tasks can be placed
     */
    addPlacementConstraint(constraint) {
        if (util_1.isFargateCompatible(this.compatibility)) {
            throw new Error('Cannot set placement constraints on tasks that run on Fargate');
        }
        const pc = this.renderPlacementConstraint(constraint);
        this.placementConstraints.push(pc);
    }
    /**
     * Extend this TaskDefinition with the given extension
     *
     * Extension can be used to apply a packaged modification to
     * a task definition.
     */
    addExtension(extension) {
        extension.extend(this);
    }
    /**
     * Create the execution role if it doesn't exist
     */
    obtainExecutionRole() {
        if (!this.executionRole) {
            this.executionRole = new iam.Role(this, 'ExecutionRole', {
                assumedBy: new iam.ServicePrincipal('ecs-tasks.amazonaws.com'),
            });
        }
        return this.executionRole;
    }
    /**
     * Render the placement constraints
     */
    renderPlacementConstraint(pc) {
        return {
            type: pc.type,
            expression: pc.expression
        };
    }
}
exports.TaskDefinition = TaskDefinition;
/**
 * The Docker networking mode to use for the containers in the task.
 */
var NetworkMode;
(function (NetworkMode) {
    /**
     * The task's containers do not have external connectivity and port mappings can't be specified in the container definition.
     */
    NetworkMode["None"] = "none";
    /**
     * The task utilizes Docker's built-in virtual network which runs inside each container instance.
     */
    NetworkMode["Bridge"] = "bridge";
    /**
     * The task is allocated an elastic network interface.
     */
    NetworkMode["AwsVpc"] = "awsvpc";
    /**
     * The task bypasses Docker's built-in virtual network and maps container ports directly to the EC2 instance's network interface directly.
     *
     * In this mode, you can't run multiple instantiations of the same task on a
     * single container instance when port mappings are used.
     */
    NetworkMode["Host"] = "host";
})(NetworkMode = exports.NetworkMode || (exports.NetworkMode = {}));
/**
 * A placement constraint type
 */
var PlacementConstraintType;
(function (PlacementConstraintType) {
    /**
     * Place each task on a different instance
     */
    PlacementConstraintType["DistinctInstance"] = "distinctInstance";
    /**
     * Place tasks only on instances matching the expression in 'expression'
     */
    PlacementConstraintType["MemberOf"] = "memberOf";
})(PlacementConstraintType = exports.PlacementConstraintType || (exports.PlacementConstraintType = {}));
/**
 * Task compatibility
 */
var Compatibility;
(function (Compatibility) {
    /**
     * Task should be launchable on EC2 clusters
     */
    Compatibility[Compatibility["Ec2"] = 0] = "Ec2";
    /**
     * Task should be launchable on Fargate clusters
     */
    Compatibility[Compatibility["Fargate"] = 1] = "Fargate";
    /**
     * Task should be launchable on both types of clusters
     */
    Compatibility[Compatibility["Ec2AndFargate"] = 2] = "Ec2AndFargate";
})(Compatibility = exports.Compatibility || (exports.Compatibility = {}));
//# sourceMappingURL=data:application/json;base64,
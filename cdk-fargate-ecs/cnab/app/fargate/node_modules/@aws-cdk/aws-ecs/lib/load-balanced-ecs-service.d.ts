import elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');
import cdk = require('@aws-cdk/cdk');
import { ICluster } from './cluster';
import { IContainerImage } from './container-image';
/**
 * Properties for a LoadBalancedEc2Service
 */
export interface LoadBalancedEc2ServiceProps {
    /**
     * The cluster where your EC2 service will be deployed
     */
    cluster: ICluster;
    /**
     * The image to start.
     */
    image: IContainerImage;
    /**
     * The hard limit (in MiB) of memory to present to the container.
     *
     * If your container attempts to exceed the allocated memory, the container
     * is terminated.
     *
     * At least one of memoryLimitMiB and memoryReservationMiB is required.
     */
    memoryLimitMiB?: number;
    /**
     * The soft limit (in MiB) of memory to reserve for the container.
     *
     * When system memory is under contention, Docker attempts to keep the
     * container memory within the limit. If the container requires more memory,
     * it can consume up to the value specified by the Memory property or all of
     * the available memory on the container instanceâ€”whichever comes first.
     *
     * At least one of memoryLimitMiB and memoryReservationMiB is required.
     */
    memoryReservationMiB?: number;
    /**
     * The container port of the application load balancer attached to your EC2 service. Corresponds to container port mapping.
     *
     * @default 80
     */
    containerPort?: number;
    /**
     * Determines whether the Application Load Balancer will be internet-facing
     *
     * @default true
     */
    publicLoadBalancer?: boolean;
    /**
     * Number of desired copies of running tasks
     *
     * @default 1
     */
    desiredCount?: number;
}
/**
 * A single task running on an ECS cluster fronted by a load balancer
 */
export declare class LoadBalancedEc2Service extends cdk.Construct {
    /**
     * The load balancer that is fronting the ECS service
     */
    readonly loadBalancer: elbv2.ApplicationLoadBalancer;
    constructor(parent: cdk.Construct, id: string, props: LoadBalancedEc2ServiceProps);
}

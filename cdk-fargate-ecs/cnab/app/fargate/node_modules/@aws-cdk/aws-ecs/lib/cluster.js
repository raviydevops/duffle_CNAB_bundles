"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const autoscaling = require("@aws-cdk/aws-autoscaling");
const cloudwatch = require("@aws-cdk/aws-cloudwatch");
const ec2 = require("@aws-cdk/aws-ec2");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const instance_drain_hook_1 = require("./drain-hook/instance-drain-hook");
const ecs_generated_1 = require("./ecs.generated");
/**
 * A container cluster that runs on your EC2 instances
 */
class Cluster extends cdk.Construct {
    constructor(parent, name, props) {
        super(parent, name);
        /**
         * Connections manager for the EC2 cluster
         */
        this.connections = new ec2.Connections();
        /**
         * Whether the cluster has EC2 capacity associated with it
         */
        this._hasEc2Capacity = false;
        const cluster = new ecs_generated_1.cloudformation.ClusterResource(this, 'Resource', { clusterName: props.clusterName });
        this.vpc = props.vpc;
        this.clusterArn = cluster.clusterArn;
        this.clusterName = cluster.clusterName;
    }
    /**
     * Import an existing cluster
     */
    static import(parent, name, props) {
        return new ImportedCluster(parent, name, props);
    }
    /**
     * Add a default-configured AutoScalingGroup running the ECS-optimized AMI to this Cluster
     *
     * Returns the AutoScalingGroup so you can add autoscaling settings to it.
     */
    addDefaultAutoScalingGroupCapacity(options) {
        const autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'DefaultAutoScalingGroup', {
            vpc: this.vpc,
            instanceType: options.instanceType,
            machineImage: new EcsOptimizedAmi(),
            updateType: autoscaling.UpdateType.ReplacingUpdate,
            minSize: options.minCapacity,
            maxSize: options.maxCapacity,
            desiredCapacity: options.instanceCount,
        });
        this.addAutoScalingGroupCapacity(autoScalingGroup, options);
        return autoScalingGroup;
    }
    /**
     * Add compute capacity to this ECS cluster in the form of an AutoScalingGroup
     */
    addAutoScalingGroupCapacity(autoScalingGroup, options = {}) {
        this._hasEc2Capacity = true;
        this.connections.connections.addSecurityGroup(...autoScalingGroup.connections.securityGroups);
        // Tie instances to cluster
        autoScalingGroup.addUserData(`echo ECS_CLUSTER=${this.clusterName} >> /etc/ecs/ecs.config`);
        if (!options.containersAccessInstanceRole) {
            // Deny containers access to instance metadata service
            // Source: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
            autoScalingGroup.addUserData('sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP');
            autoScalingGroup.addUserData('sudo service iptables save');
            // The following is only for AwsVpc networking mode, but doesn't hurt for the other modes.
            autoScalingGroup.addUserData('echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config');
        }
        // ECS instances must be able to do these things
        // Source: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
        autoScalingGroup.addToRolePolicy(new iam.PolicyStatement().addActions("ecs:CreateCluster", "ecs:DeregisterContainerInstance", "ecs:DiscoverPollEndpoint", "ecs:Poll", "ecs:RegisterContainerInstance", "ecs:StartTelemetrySession", "ecs:Submit*", "ecr:GetAuthorizationToken", "logs:CreateLogStream", "logs:PutLogEvents").addAllResources());
        // 0 disables, otherwise forward to underlying implementation which picks the sane default
        if (options.taskDrainTimeSeconds !== 0) {
            new instance_drain_hook_1.InstanceDrainHook(autoScalingGroup, 'DrainECSHook', {
                autoScalingGroup,
                cluster: this,
                drainTimeSec: options.taskDrainTimeSeconds
            });
        }
    }
    /**
     * Whether the cluster has EC2 capacity associated with it
     */
    get hasEc2Capacity() {
        return this._hasEc2Capacity;
    }
    /**
     * Export the Cluster
     */
    export() {
        return {
            clusterName: new cdk.Output(this, 'ClusterName', { value: this.clusterName }).makeImportValue().toString(),
            vpc: this.vpc.export(),
            securityGroups: this.connections.securityGroups.map(sg => sg.export()),
            hasEc2Capacity: this.hasEc2Capacity,
        };
    }
    /**
     * Metric for cluster CPU reservation
     *
     * @default average over 5 minutes
     */
    metricCpuReservation(props) {
        return this.metric('CPUReservation', props);
    }
    /**
     * Metric for cluster Memory reservation
     *
     * @default average over 5 minutes
     */
    metricMemoryReservation(props) {
        return this.metric('MemoryReservation', props);
    }
    /**
     * Return the given named metric for this Cluster
     */
    metric(metricName, props) {
        return new cloudwatch.Metric(Object.assign({ namespace: 'AWS/ECS', metricName, dimensions: { ClusterName: this.clusterName } }, props));
    }
}
exports.Cluster = Cluster;
/**
 * Construct a Linux machine image from the latest ECS Optimized AMI published in SSM
 */
class EcsOptimizedAmi {
    /**
     * Return the correct image
     */
    getImage(parent) {
        const ssmProvider = new cdk.SSMParameterProvider(parent, {
            parameterName: EcsOptimizedAmi.AmiParameterName
        });
        const json = ssmProvider.parameterValue("{\"image_id\": \"\"}");
        const ami = JSON.parse(json).image_id;
        return new ec2.MachineImage(ami, new ec2.LinuxOS());
    }
}
EcsOptimizedAmi.AmiParameterName = "/aws/service/ecs/optimized-ami/amazon-linux/recommended";
exports.EcsOptimizedAmi = EcsOptimizedAmi;
/**
 * An Cluster that has been imported
 */
class ImportedCluster extends cdk.Construct {
    constructor(parent, name, props) {
        super(parent, name);
        /**
         * Security group of the cluster instances
         */
        this.connections = new ec2.Connections();
        this.clusterName = props.clusterName;
        this.vpc = ec2.VpcNetworkRef.import(this, "vpc", props.vpc);
        this.hasEc2Capacity = props.hasEc2Capacity !== false;
        let i = 1;
        for (const sgProps of props.securityGroups) {
            this.connections.addSecurityGroup(ec2.SecurityGroupRef.import(this, `SecurityGroup${i}`, sgProps));
            i++;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,
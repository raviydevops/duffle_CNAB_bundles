"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const autoscaling = require("@aws-cdk/aws-autoscaling");
const iam = require("@aws-cdk/aws-iam");
const lambda = require("@aws-cdk/aws-lambda");
const sns = require("@aws-cdk/aws-sns");
const cdk = require("@aws-cdk/cdk");
const fs = require("fs");
const path = require("path");
/**
 * A hook to drain instances from ECS traffic before they're terminated
 */
class InstanceDrainHook extends cdk.Construct {
    constructor(parent, id, props) {
        super(parent, id);
        const drainTimeSeconds = props.drainTimeSec !== undefined ? props.drainTimeSec : 300;
        if (drainTimeSeconds < 0 || drainTimeSeconds > 900) {
            throw new Error(`Drain time must be between 0 and 900 seconds, got: ${drainTimeSeconds}`);
        }
        // Invoke Lambda via SNS Topic
        const topic = new sns.Topic(this, 'Topic');
        const fn = new lambda.Function(this, 'Function', {
            code: lambda.Code.inline(fs.readFileSync(path.join(__dirname, 'lambda-source', 'index.py'), { encoding: 'utf-8' })),
            handler: 'index.lambda_handler',
            runtime: lambda.Runtime.Python36,
            // Timeout: some extra margin for additional API calls made by the Lambda,
            // up to a maximum of 15 minutes.
            timeout: Math.min(drainTimeSeconds + 10, 900),
            environment: {
                CLUSTER: props.cluster.clusterName
            }
        });
        // Hook everything up: ASG -> Topic, Topic -> Lambda
        props.autoScalingGroup.onLifecycleTransition('DrainHook', {
            lifecycleTransition: autoscaling.LifecycleTransition.InstanceTerminating,
            defaultResult: autoscaling.DefaultResult.Continue,
            notificationTarget: topic,
            heartbeatTimeoutSec: drainTimeSeconds,
        });
        topic.subscribeLambda(fn);
        // FIXME: These should probably be restricted usefully in some way, but I don't exactly
        // know how.
        fn.addToRolePolicy(new iam.PolicyStatement()
            .addActions('autoscaling:CompleteLifecycleAction', 'ec2:DescribeInstances', 'ec2:DescribeInstanceAttribute', 'ec2:DescribeInstanceStatus', 'ec2:DescribeHosts')
            .addAllResources());
        // FIXME: These should be restricted to the ECS cluster probably, but I don't exactly
        // know how.
        fn.addToRolePolicy(new iam.PolicyStatement()
            .addActions('ecs:ListContainerInstances', 'ecs:SubmitContainerStateChange', 'ecs:SubmitTaskStateChange', 'ecs:DescribeContainerInstances', 'ecs:UpdateContainerInstancesState', 'ecs:ListTasks', 'ecs:DescribeTasks')
            .addAllResources());
    }
}
exports.InstanceDrainHook = InstanceDrainHook;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFuY2UtZHJhaW4taG9vay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluc3RhbmNlLWRyYWluLWhvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3REFBeUQ7QUFDekQsd0NBQXlDO0FBQ3pDLDhDQUErQztBQUMvQyx3Q0FBeUM7QUFDekMsb0NBQXFDO0FBQ3JDLHlCQUEwQjtBQUMxQiw2QkFBOEI7QUErQjlCOztHQUVHO0FBQ0gsTUFBYSxpQkFBa0IsU0FBUSxHQUFHLENBQUMsU0FBUztJQUNsRCxZQUFZLE1BQXFCLEVBQUUsRUFBVSxFQUFFLEtBQTZCO1FBQzFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFbEIsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsWUFBWSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBRXJGLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxJQUFJLGdCQUFnQixHQUFHLEdBQUcsRUFBRTtZQUNsRCxNQUFNLElBQUksS0FBSyxDQUFDLHNEQUFzRCxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7U0FDM0Y7UUFFRCw4QkFBOEI7UUFDOUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMzQyxNQUFNLEVBQUUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUMvQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxlQUFlLEVBQUUsVUFBVSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUNuSCxPQUFPLEVBQUUsc0JBQXNCO1lBQy9CLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVE7WUFDaEMsMEVBQTBFO1lBQzFFLGlDQUFpQztZQUNqQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLEVBQUUsR0FBRyxDQUFDO1lBQzdDLFdBQVcsRUFBRTtnQkFDWCxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXO2FBQ25DO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsb0RBQW9EO1FBQ3BELEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLEVBQUU7WUFDeEQsbUJBQW1CLEVBQUUsV0FBVyxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQjtZQUN4RSxhQUFhLEVBQUUsV0FBVyxDQUFDLGFBQWEsQ0FBQyxRQUFRO1lBQ2pELGtCQUFrQixFQUFFLEtBQUs7WUFDekIsbUJBQW1CLEVBQUUsZ0JBQWdCO1NBQ3RDLENBQUMsQ0FBQztRQUNILEtBQUssQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFMUIsdUZBQXVGO1FBQ3ZGLFlBQVk7UUFDWixFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRTthQUN6QyxVQUFVLENBQ1QscUNBQXFDLEVBQ3JDLHVCQUF1QixFQUN2QiwrQkFBK0IsRUFDL0IsNEJBQTRCLEVBQzVCLG1CQUFtQixDQUNwQjthQUNBLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFFdEIscUZBQXFGO1FBQ3JGLFlBQVk7UUFDWixFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRTthQUN6QyxVQUFVLENBQ1QsNEJBQTRCLEVBQzVCLGdDQUFnQyxFQUNoQywyQkFBMkIsRUFDM0IsZ0NBQWdDLEVBQ2hDLG1DQUFtQyxFQUNuQyxlQUFlLEVBQ2YsbUJBQW1CLENBQUM7YUFDckIsZUFBZSxFQUFFLENBQUMsQ0FBQztJQUN4QixDQUFDO0NBQ0Y7QUExREQsOENBMERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF1dG9zY2FsaW5nID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWF1dG9zY2FsaW5nJyk7XG5pbXBvcnQgaWFtID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWlhbScpO1xuaW1wb3J0IGxhbWJkYSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1sYW1iZGEnKTtcbmltcG9ydCBzbnMgPSByZXF1aXJlKCdAYXdzLWNkay9hd3Mtc25zJyk7XG5pbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY2RrJyk7XG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcycpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5pbXBvcnQgeyBJQ2x1c3RlciB9IGZyb20gJy4uL2NsdXN0ZXInO1xuXG4vLyBSZWZlcmVuY2UgZm9yIHRoZSBzb3VyY2UgaW4gdGhpcyBwYWNrYWdlOlxuLy9cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hd3Mtc2FtcGxlcy9lY3MtcmVmYXJjaC1jbG91ZGZvcm1hdGlvbi9ibG9iL21hc3Rlci9pbmZyYXN0cnVjdHVyZS9saWZlY3ljbGVob29rLnlhbWxcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBpbnN0YW5jZSBkcmFpbmluZyBob29rXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5zdGFuY2VEcmFpbkhvb2tQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgQXV0b1NjYWxpbmdHcm91cCB0byBpbnN0YWxsIHRoZSBpbnN0YW5jZSBkcmFpbmluZyBob29rIGZvclxuICAgKi9cbiAgYXV0b1NjYWxpbmdHcm91cDogYXV0b3NjYWxpbmcuSUF1dG9TY2FsaW5nR3JvdXA7XG5cbiAgLyoqXG4gICAqIFRoZSBjbHVzdGVyIG9uIHdoaWNoIHRhc2tzIGhhdmUgYmVlbiBzY2hlZHVsZWRcbiAgICovXG4gIGNsdXN0ZXI6IElDbHVzdGVyO1xuXG4gIC8qKlxuICAgKiBIb3cgbWFueSBzZWNvbmRzIHRvIGdpdmUgdGFza3MgdG8gZHJhaW4gYmVmb3JlIHRoZSBpbnN0YW5jZSBpcyB0ZXJtaW5hdGVkIGFueXdheVxuICAgKlxuICAgKiBNdXN0IGJlIGJldHdlZW4gMCBhbmQgOTAwLlxuICAgKlxuICAgKiBAZGVmYXVsdCA5MDBcbiAgICovXG4gIGRyYWluVGltZVNlYz86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBBIGhvb2sgdG8gZHJhaW4gaW5zdGFuY2VzIGZyb20gRUNTIHRyYWZmaWMgYmVmb3JlIHRoZXkncmUgdGVybWluYXRlZFxuICovXG5leHBvcnQgY2xhc3MgSW5zdGFuY2VEcmFpbkhvb2sgZXh0ZW5kcyBjZGsuQ29uc3RydWN0IHtcbiAgY29uc3RydWN0b3IocGFyZW50OiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogSW5zdGFuY2VEcmFpbkhvb2tQcm9wcykge1xuICAgIHN1cGVyKHBhcmVudCwgaWQpO1xuXG4gICAgY29uc3QgZHJhaW5UaW1lU2Vjb25kcyA9IHByb3BzLmRyYWluVGltZVNlYyAhPT0gdW5kZWZpbmVkID8gcHJvcHMuZHJhaW5UaW1lU2VjIDogMzAwO1xuXG4gICAgaWYgKGRyYWluVGltZVNlY29uZHMgPCAwIHx8IGRyYWluVGltZVNlY29uZHMgPiA5MDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRHJhaW4gdGltZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgOTAwIHNlY29uZHMsIGdvdDogJHtkcmFpblRpbWVTZWNvbmRzfWApO1xuICAgIH1cblxuICAgIC8vIEludm9rZSBMYW1iZGEgdmlhIFNOUyBUb3BpY1xuICAgIGNvbnN0IHRvcGljID0gbmV3IHNucy5Ub3BpYyh0aGlzLCAnVG9waWMnKTtcbiAgICBjb25zdCBmbiA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ0Z1bmN0aW9uJywge1xuICAgICAgY29kZTogbGFtYmRhLkNvZGUuaW5saW5lKGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnbGFtYmRhLXNvdXJjZScsICdpbmRleC5weScpLCB7IGVuY29kaW5nOiAndXRmLTgnIH0pKSxcbiAgICAgIGhhbmRsZXI6ICdpbmRleC5sYW1iZGFfaGFuZGxlcicsXG4gICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5QeXRob24zNixcbiAgICAgIC8vIFRpbWVvdXQ6IHNvbWUgZXh0cmEgbWFyZ2luIGZvciBhZGRpdGlvbmFsIEFQSSBjYWxscyBtYWRlIGJ5IHRoZSBMYW1iZGEsXG4gICAgICAvLyB1cCB0byBhIG1heGltdW0gb2YgMTUgbWludXRlcy5cbiAgICAgIHRpbWVvdXQ6IE1hdGgubWluKGRyYWluVGltZVNlY29uZHMgKyAxMCwgOTAwKSxcbiAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgIENMVVNURVI6IHByb3BzLmNsdXN0ZXIuY2x1c3Rlck5hbWVcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEhvb2sgZXZlcnl0aGluZyB1cDogQVNHIC0+IFRvcGljLCBUb3BpYyAtPiBMYW1iZGFcbiAgICBwcm9wcy5hdXRvU2NhbGluZ0dyb3VwLm9uTGlmZWN5Y2xlVHJhbnNpdGlvbignRHJhaW5Ib29rJywge1xuICAgICAgbGlmZWN5Y2xlVHJhbnNpdGlvbjogYXV0b3NjYWxpbmcuTGlmZWN5Y2xlVHJhbnNpdGlvbi5JbnN0YW5jZVRlcm1pbmF0aW5nLFxuICAgICAgZGVmYXVsdFJlc3VsdDogYXV0b3NjYWxpbmcuRGVmYXVsdFJlc3VsdC5Db250aW51ZSxcbiAgICAgIG5vdGlmaWNhdGlvblRhcmdldDogdG9waWMsXG4gICAgICBoZWFydGJlYXRUaW1lb3V0U2VjOiBkcmFpblRpbWVTZWNvbmRzLFxuICAgIH0pO1xuICAgIHRvcGljLnN1YnNjcmliZUxhbWJkYShmbik7XG5cbiAgICAvLyBGSVhNRTogVGhlc2Ugc2hvdWxkIHByb2JhYmx5IGJlIHJlc3RyaWN0ZWQgdXNlZnVsbHkgaW4gc29tZSB3YXksIGJ1dCBJIGRvbid0IGV4YWN0bHlcbiAgICAvLyBrbm93IGhvdy5cbiAgICBmbi5hZGRUb1JvbGVQb2xpY3kobmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoKVxuICAgICAgLmFkZEFjdGlvbnMoXG4gICAgICAgICdhdXRvc2NhbGluZzpDb21wbGV0ZUxpZmVjeWNsZUFjdGlvbicsXG4gICAgICAgICdlYzI6RGVzY3JpYmVJbnN0YW5jZXMnLFxuICAgICAgICAnZWMyOkRlc2NyaWJlSW5zdGFuY2VBdHRyaWJ1dGUnLFxuICAgICAgICAnZWMyOkRlc2NyaWJlSW5zdGFuY2VTdGF0dXMnLFxuICAgICAgICAnZWMyOkRlc2NyaWJlSG9zdHMnLFxuICAgICAgKVxuICAgICAgLmFkZEFsbFJlc291cmNlcygpKTtcblxuICAgIC8vIEZJWE1FOiBUaGVzZSBzaG91bGQgYmUgcmVzdHJpY3RlZCB0byB0aGUgRUNTIGNsdXN0ZXIgcHJvYmFibHksIGJ1dCBJIGRvbid0IGV4YWN0bHlcbiAgICAvLyBrbm93IGhvdy5cbiAgICBmbi5hZGRUb1JvbGVQb2xpY3kobmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoKVxuICAgICAgLmFkZEFjdGlvbnMoXG4gICAgICAgICdlY3M6TGlzdENvbnRhaW5lckluc3RhbmNlcycsXG4gICAgICAgICdlY3M6U3VibWl0Q29udGFpbmVyU3RhdGVDaGFuZ2UnLFxuICAgICAgICAnZWNzOlN1Ym1pdFRhc2tTdGF0ZUNoYW5nZScsXG4gICAgICAgICdlY3M6RGVzY3JpYmVDb250YWluZXJJbnN0YW5jZXMnLFxuICAgICAgICAnZWNzOlVwZGF0ZUNvbnRhaW5lckluc3RhbmNlc1N0YXRlJyxcbiAgICAgICAgJ2VjczpMaXN0VGFza3MnLFxuICAgICAgICAnZWNzOkRlc2NyaWJlVGFza3MnKVxuICAgICAgLmFkZEFsbFJlc291cmNlcygpKTtcbiAgfVxufSJdfQ==
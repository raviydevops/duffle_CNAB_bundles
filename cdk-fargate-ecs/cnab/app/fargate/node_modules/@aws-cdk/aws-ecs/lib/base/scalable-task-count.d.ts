import appscaling = require('@aws-cdk/aws-applicationautoscaling');
import cloudwatch = require('@aws-cdk/aws-cloudwatch');
/**
 * Scalable attribute representing task count
 */
export declare class ScalableTaskCount extends appscaling.BaseScalableAttribute {
    /**
     * Scale out or in based on time
     */
    scaleOnSchedule(id: string, props: appscaling.ScalingSchedule): void;
    /**
     * Scale out or in based on a metric value
     */
    scaleOnMetric(id: string, props: appscaling.BasicStepScalingPolicyProps): void;
    /**
     * Scale out or in to achieve a target CPU utilization
     */
    scaleOnCpuUtilization(id: string, props: CpuUtilizationScalingProps): void;
    /**
     * Scale out or in to achieve a target memory utilization utilization
     */
    scaleOnMemoryUtilization(id: string, props: CpuUtilizationScalingProps): void;
    /**
     * Scale out or in to track a custom metric
     */
    scaleToTrackCustomMetric(id: string, props: TrackCustomMetricProps): void;
}
/**
 * Properties for enabling scaling based on CPU utilization
 */
export interface CpuUtilizationScalingProps extends appscaling.BaseTargetTrackingProps {
    /**
     * Target average CPU utilization across the task
     */
    targetUtilizationPercent: number;
}
/**
 * Properties for enabling scaling based on memory utilization
 */
export interface MemoryUtilizationScalingProps extends appscaling.BaseTargetTrackingProps {
    /**
     * Target average memory utilization across the task
     */
    targetUtilizationPercent: number;
}
/**
 * Properties to target track a custom metric
 */
export interface TrackCustomMetricProps extends appscaling.BaseTargetTrackingProps {
    /**
     * Metric to track
     *
     * The metric must represent utilization; that is, you will always get the following behavior:
     *
     * - metric > targetValue => scale out
     * - metric < targetValue => scale in
     */
    metric: cloudwatch.Metric;
    /**
     * The target value to achieve for the metric
     */
    targetValue: number;
}

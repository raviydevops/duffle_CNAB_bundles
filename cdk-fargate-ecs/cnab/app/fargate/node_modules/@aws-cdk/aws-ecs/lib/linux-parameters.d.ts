import { cloudformation } from './ecs.generated';
/**
 * Linux parameter setup in a container
 */
export declare class LinuxParameters {
    /**
     * Whether the init process is enabled
     */
    initProcessEnabled?: boolean;
    /**
     * The shared memory size
     */
    sharedMemorySize?: number;
    /**
     * Capabilities to be added
     */
    private readonly capAdd;
    /**
     * Capabilities to be dropped
     */
    private readonly capDrop;
    /**
     * Device mounts
     */
    private readonly devices;
    /**
     * TMPFS mounts
     */
    private readonly tmpfs;
    /**
     * Add one or more capabilities
     *
     * Only works with EC2 launch type.
     */
    addCapabilities(...cap: Capability[]): void;
    /**
     * Drop one or more capabilities
     *
     * Only works with EC2 launch type.
     */
    dropCapabilities(...cap: Capability[]): void;
    /**
     * Add one or more devices
     */
    addDevices(...device: Device[]): void;
    /**
     * Add one or more tmpfs mounts
     */
    addTmpfs(...tmpfs: Tmpfs[]): void;
    /**
     * Render the Linux parameters to a CloudFormation object
     */
    renderLinuxParameters(): cloudformation.TaskDefinitionResource.LinuxParametersProperty;
}
/**
 * A host device
 */
export interface Device {
    /**
     * Path in the container
     *
     * @default Same path as the host
     */
    containerPath?: string;
    /**
     * Path on the host
     */
    hostPath: string;
    /**
     * Permissions
     *
     * @default Readonly
     */
    permissions?: DevicePermission[];
}
/**
 * A tmpfs mount
 */
export interface Tmpfs {
    /**
     * Path in the container to mount
     */
    containerPath: string;
    /**
     * Size of the volume
     */
    size: number;
    /**
     * Mount options
     */
    mountOptions?: TmpfsMountOption[];
}
/**
 * A Linux capability
 */
export declare enum Capability {
    All = "ALL",
    AuditControl = "AUDIT_CONTROL",
    AuditWrite = "AUDIT_WRITE",
    BlockSuspend = "BLOCK_SUSPEND",
    Chown = "CHOWN",
    DacOverride = "DAC_OVERRIDE",
    DacReadSearch = "DAC_READ_SEARCH",
    Fowner = "FOWNER",
    Fsetid = "FSETID",
    IpcLock = "IPC_LOCK",
    IpcOwner = "IPC_OWNER",
    Kill = "KILL",
    Lease = "LEASE",
    LinuxImmutable = "LINUX_IMMUTABLE",
    MacAdmin = "MAC_ADMIN",
    MacOverride = "MAC_OVERRIDE",
    Mknod = "MKNOD",
    NetAdmin = "NET_ADMIN",
    NetBindService = "NET_BIND_SERVICE",
    NetBroadcast = "NET_BROADCAST",
    NetRaw = "NET_RAW",
    Setfcap = "SETFCAP",
    Setgid = "SETGID",
    Setpcap = "SETPCAP",
    Setuid = "SETUID",
    SysAdmin = "SYS_ADMIN",
    SysBoot = "SYS_BOOT",
    SysChroot = "SYS_CHROOT",
    SysModule = "SYS_MODULE",
    SysNice = "SYS_NICE",
    SysPacct = "SYS_PACCT",
    SysPtrace = "SYS_PTRACE",
    SysRawio = "SYS_RAWIO",
    SysResource = "SYS_RESOURCE",
    SysTime = "SYS_TIME",
    SysTtyConfig = "SYS_TTY_CONFIG",
    Syslog = "SYSLOG",
    WakeAlarm = "WAKE_ALARM"
}
/**
 * Permissions for device access
 */
export declare enum DevicePermission {
    /**
     * Read
     */
    Read = "read",
    /**
     * Write
     */
    Write = "write",
    /**
     * Make a node
     */
    Mknod = "mknod"
}
/**
 * Options for a tmpfs mount
 */
export declare enum TmpfsMountOption {
    Defaults = "defaults",
    Ro = "ro",
    Rw = "rw",
    Suid = "suid",
    Nosuid = "nosuid",
    Dev = "dev",
    Nodev = "nodev",
    Exec = "exec",
    Noexec = "noexec",
    Sync = "sync",
    Async = "async",
    Dirsync = "dirsync",
    Remount = "remount",
    Mand = "mand",
    Nomand = "nomand",
    Atime = "atime",
    Noatime = "noatime",
    Diratime = "diratime",
    Nodiratime = "nodiratime",
    Bind = "bind",
    Rbind = "rbind",
    Unbindable = "unbindable",
    Runbindable = "runbindable",
    Private = "private",
    Rprivate = "rprivate",
    Shared = "shared",
    Rshared = "rshared",
    Slave = "slave",
    Rslave = "rslave",
    Relatime = "relatime",
    Norelatime = "norelatime",
    Strictatime = "strictatime",
    Nostrictatime = "nostrictatime",
    Mode = "mode",
    Uid = "uid",
    Gid = "gid",
    NrInodes = "nr_inodes",
    NrBlocks = "nr_blocks",
    Mpol = "mpol"
}

"use strict";
/**
 * File with definitions for the interface between the Cloud Executable and the CDK toolkit.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Bump this to the library version if and only if the CX protocol changes.
 *
 * We could also have used 1, 2, 3, ... here to indicate protocol versions, but
 * those then still need to be mapped to software versions to be useful. So we
 * might as well use the software version as protocol version and immediately
 * generate a useful error message from this.
 *
 * Note the following:
 *
 * - The versions are not compared in a semver way, they are used as
 *    opaque ordered tokens.
 * - The version needs to be set to the NEXT releasable version when it's
 *   updated (as the current verison in package.json has already been released!)
 * - The request does not have versioning yet, only the response.
 */
exports.PROTO_RESPONSE_VERSION = '0.19.0';
exports.OUTFILE_NAME = 'cdk.out';
exports.OUTDIR_ENV = 'CDK_OUTDIR';
exports.CONTEXT_ENV = 'CDK_CONTEXT_JSON';
/**
 * Context parameter for the default AWS account to use if a stack's environment is not set.
 */
exports.DEFAULT_ACCOUNT_CONTEXT_KEY = 'aws:cdk:toolkit:default-account';
/**
 * Context parameter for the default AWS region to use if a stack's environment is not set.
 */
exports.DEFAULT_REGION_CONTEXT_KEY = 'aws:cdk:toolkit:default-region';
/**
 * Metadata key used to print INFO-level messages by the toolkit when an app is syntheized.
 */
exports.INFO_METADATA_KEY = 'aws:cdk:info';
/**
 * Metadata key used to print WARNING-level messages by the toolkit when an app is syntheized.
 */
exports.WARNING_METADATA_KEY = 'aws:cdk:warning';
/**
 * Metadata key used to print ERROR-level messages by the toolkit when an app is syntheized.
 */
exports.ERROR_METADATA_KEY = 'aws:cdk:error';
/**
 * The key used when CDK path is embedded in **CloudFormation template**
 * metadata.
 */
exports.PATH_METADATA_KEY = 'aws:cdk:path';
/**
 * Enables the embedding of the "aws:cdk:path" in CloudFormation template metadata.
 */
exports.PATH_METADATA_ENABLE_CONTEXT = 'aws:cdk:enable-path-metadata';
/**
 * Separator string that separates the prefix separator from the object key separator.
 *
 * Asset keys will look like:
 *
 *    /assets/MyConstruct12345678/||abcdef12345.zip
 *
 * This allows us to encode both the prefix and the full location in a single
 * CloudFormation Template Parameter.
 */
exports.ASSET_PREFIX_SEPARATOR = '||';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3hhcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjeGFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBSUg7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ1UsUUFBQSxzQkFBc0IsR0FBRyxRQUFRLENBQUM7QUFFbEMsUUFBQSxZQUFZLEdBQUcsU0FBUyxDQUFDO0FBQ3pCLFFBQUEsVUFBVSxHQUFHLFlBQVksQ0FBQztBQUMxQixRQUFBLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQztBQXFFOUM7O0dBRUc7QUFDVSxRQUFBLDJCQUEyQixHQUFHLGlDQUFpQyxDQUFDO0FBRTdFOztHQUVHO0FBQ1UsUUFBQSwwQkFBMEIsR0FBRyxnQ0FBZ0MsQ0FBQztBQUUzRTs7R0FFRztBQUNVLFFBQUEsaUJBQWlCLEdBQUcsY0FBYyxDQUFDO0FBRWhEOztHQUVHO0FBQ1UsUUFBQSxvQkFBb0IsR0FBRyxpQkFBaUIsQ0FBQztBQUV0RDs7R0FFRztBQUNVLFFBQUEsa0JBQWtCLEdBQUcsZUFBZSxDQUFDO0FBRWxEOzs7R0FHRztBQUNVLFFBQUEsaUJBQWlCLEdBQUcsY0FBYyxDQUFDO0FBRWhEOztHQUVHO0FBQ1UsUUFBQSw0QkFBNEIsR0FBRyw4QkFBOEIsQ0FBQztBQUUzRTs7Ozs7Ozs7O0dBU0c7QUFDVSxRQUFBLHNCQUFzQixHQUFHLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRmlsZSB3aXRoIGRlZmluaXRpb25zIGZvciB0aGUgaW50ZXJmYWNlIGJldHdlZW4gdGhlIENsb3VkIEV4ZWN1dGFibGUgYW5kIHRoZSBDREsgdG9vbGtpdC5cbiAqL1xuXG5pbXBvcnQgeyBFbnZpcm9ubWVudCB9IGZyb20gJy4vZW52aXJvbm1lbnQnO1xuXG4vKipcbiAqIEJ1bXAgdGhpcyB0byB0aGUgbGlicmFyeSB2ZXJzaW9uIGlmIGFuZCBvbmx5IGlmIHRoZSBDWCBwcm90b2NvbCBjaGFuZ2VzLlxuICpcbiAqIFdlIGNvdWxkIGFsc28gaGF2ZSB1c2VkIDEsIDIsIDMsIC4uLiBoZXJlIHRvIGluZGljYXRlIHByb3RvY29sIHZlcnNpb25zLCBidXRcbiAqIHRob3NlIHRoZW4gc3RpbGwgbmVlZCB0byBiZSBtYXBwZWQgdG8gc29mdHdhcmUgdmVyc2lvbnMgdG8gYmUgdXNlZnVsLiBTbyB3ZVxuICogbWlnaHQgYXMgd2VsbCB1c2UgdGhlIHNvZnR3YXJlIHZlcnNpb24gYXMgcHJvdG9jb2wgdmVyc2lvbiBhbmQgaW1tZWRpYXRlbHlcbiAqIGdlbmVyYXRlIGEgdXNlZnVsIGVycm9yIG1lc3NhZ2UgZnJvbSB0aGlzLlxuICpcbiAqIE5vdGUgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiAtIFRoZSB2ZXJzaW9ucyBhcmUgbm90IGNvbXBhcmVkIGluIGEgc2VtdmVyIHdheSwgdGhleSBhcmUgdXNlZCBhc1xuICogICAgb3BhcXVlIG9yZGVyZWQgdG9rZW5zLlxuICogLSBUaGUgdmVyc2lvbiBuZWVkcyB0byBiZSBzZXQgdG8gdGhlIE5FWFQgcmVsZWFzYWJsZSB2ZXJzaW9uIHdoZW4gaXQnc1xuICogICB1cGRhdGVkIChhcyB0aGUgY3VycmVudCB2ZXJpc29uIGluIHBhY2thZ2UuanNvbiBoYXMgYWxyZWFkeSBiZWVuIHJlbGVhc2VkISlcbiAqIC0gVGhlIHJlcXVlc3QgZG9lcyBub3QgaGF2ZSB2ZXJzaW9uaW5nIHlldCwgb25seSB0aGUgcmVzcG9uc2UuXG4gKi9cbmV4cG9ydCBjb25zdCBQUk9UT19SRVNQT05TRV9WRVJTSU9OID0gJzAuMTkuMCc7XG5cbmV4cG9ydCBjb25zdCBPVVRGSUxFX05BTUUgPSAnY2RrLm91dCc7XG5leHBvcnQgY29uc3QgT1VURElSX0VOViA9ICdDREtfT1VURElSJztcbmV4cG9ydCBjb25zdCBDT05URVhUX0VOViA9ICdDREtfQ09OVEVYVF9KU09OJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgbWlzc2luZyBwaWVjZSBvZiBjb250ZXh0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1pc3NpbmdDb250ZXh0IHtcbiAgcHJvdmlkZXI6IHN0cmluZztcbiAgcHJvcHM6IHtcbiAgICBhY2NvdW50Pzogc3RyaW5nO1xuICAgIHJlZ2lvbj86IHN0cmluZztcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3ludGhlc2l6ZVJlc3BvbnNlIHtcbiAgLyoqXG4gICAqIFByb3RvY29sIHZlcnNpb25cbiAgICovXG4gIHZlcnNpb246IHN0cmluZztcbiAgc3RhY2tzOiBTeW50aGVzaXplZFN0YWNrW107XG4gIHJ1bnRpbWU/OiBBcHBSdW50aW1lO1xufVxuXG4vKipcbiAqIEEgY29tcGxldGUgc3ludGhlc2l6ZWQgc3RhY2tcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTeW50aGVzaXplZFN0YWNrIHtcbiAgbmFtZTogc3RyaW5nO1xuICBlbnZpcm9ubWVudDogRW52aXJvbm1lbnQ7XG4gIG1pc3Npbmc/OiB7IFtrZXk6IHN0cmluZ106IE1pc3NpbmdDb250ZXh0IH07XG4gIG1ldGFkYXRhOiBTdGFja01ldGFkYXRhO1xuICB0ZW1wbGF0ZTogYW55O1xufVxuXG4vKipcbiAqIEFuIG1ldGFkYXRhIGVudHJ5IGluIHRoZSBjb25zdHJ1Y3QuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWV0YWRhdGFFbnRyeSB7XG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgbWV0YWRhdGEgZW50cnkuXG4gICAqL1xuICB0eXBlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBkYXRhLlxuICAgKi9cbiAgZGF0YT86IGFueTtcblxuICAvKipcbiAgICogQSBzdGFjayB0cmFjZSBmb3Igd2hlbiB0aGUgZW50cnkgd2FzIGNyZWF0ZWQuXG4gICAqL1xuICB0cmFjZTogc3RyaW5nW107XG59XG5cbi8qKlxuICogTWV0YWRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSBvYmplY3RzIGluIHRoZSBzdGFjaydzIENvbnN0cnVjdCB0cmVlXG4gKi9cbmV4cG9ydCB0eXBlIFN0YWNrTWV0YWRhdGEgPSB7IFtwYXRoOiBzdHJpbmddOiBNZXRhZGF0YUVudHJ5W10gfTtcblxuLyoqXG4gKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgYXBwbGljYXRpb24ncyBydW50aW1lIGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBwUnVudGltZSB7XG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiBsaWJyYXJpZXMgbG9hZGVkIGluIHRoZSBhcHBsaWNhdGlvbiwgYXNzb2NpYXRlZCB3aXRoIHRoZWlyIHZlcnNpb25zLlxuICAgKi9cbiAgbGlicmFyaWVzOiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfTtcbn1cblxuLyoqXG4gKiBDb250ZXh0IHBhcmFtZXRlciBmb3IgdGhlIGRlZmF1bHQgQVdTIGFjY291bnQgdG8gdXNlIGlmIGEgc3RhY2sncyBlbnZpcm9ubWVudCBpcyBub3Qgc2V0LlxuICovXG5leHBvcnQgY29uc3QgREVGQVVMVF9BQ0NPVU5UX0NPTlRFWFRfS0VZID0gJ2F3czpjZGs6dG9vbGtpdDpkZWZhdWx0LWFjY291bnQnO1xuXG4vKipcbiAqIENvbnRleHQgcGFyYW1ldGVyIGZvciB0aGUgZGVmYXVsdCBBV1MgcmVnaW9uIHRvIHVzZSBpZiBhIHN0YWNrJ3MgZW52aXJvbm1lbnQgaXMgbm90IHNldC5cbiAqL1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfUkVHSU9OX0NPTlRFWFRfS0VZID0gJ2F3czpjZGs6dG9vbGtpdDpkZWZhdWx0LXJlZ2lvbic7XG5cbi8qKlxuICogTWV0YWRhdGEga2V5IHVzZWQgdG8gcHJpbnQgSU5GTy1sZXZlbCBtZXNzYWdlcyBieSB0aGUgdG9vbGtpdCB3aGVuIGFuIGFwcCBpcyBzeW50aGVpemVkLlxuICovXG5leHBvcnQgY29uc3QgSU5GT19NRVRBREFUQV9LRVkgPSAnYXdzOmNkazppbmZvJztcblxuLyoqXG4gKiBNZXRhZGF0YSBrZXkgdXNlZCB0byBwcmludCBXQVJOSU5HLWxldmVsIG1lc3NhZ2VzIGJ5IHRoZSB0b29sa2l0IHdoZW4gYW4gYXBwIGlzIHN5bnRoZWl6ZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBXQVJOSU5HX01FVEFEQVRBX0tFWSA9ICdhd3M6Y2RrOndhcm5pbmcnO1xuXG4vKipcbiAqIE1ldGFkYXRhIGtleSB1c2VkIHRvIHByaW50IEVSUk9SLWxldmVsIG1lc3NhZ2VzIGJ5IHRoZSB0b29sa2l0IHdoZW4gYW4gYXBwIGlzIHN5bnRoZWl6ZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBFUlJPUl9NRVRBREFUQV9LRVkgPSAnYXdzOmNkazplcnJvcic7XG5cbi8qKlxuICogVGhlIGtleSB1c2VkIHdoZW4gQ0RLIHBhdGggaXMgZW1iZWRkZWQgaW4gKipDbG91ZEZvcm1hdGlvbiB0ZW1wbGF0ZSoqXG4gKiBtZXRhZGF0YS5cbiAqL1xuZXhwb3J0IGNvbnN0IFBBVEhfTUVUQURBVEFfS0VZID0gJ2F3czpjZGs6cGF0aCc7XG5cbi8qKlxuICogRW5hYmxlcyB0aGUgZW1iZWRkaW5nIG9mIHRoZSBcImF3czpjZGs6cGF0aFwiIGluIENsb3VkRm9ybWF0aW9uIHRlbXBsYXRlIG1ldGFkYXRhLlxuICovXG5leHBvcnQgY29uc3QgUEFUSF9NRVRBREFUQV9FTkFCTEVfQ09OVEVYVCA9ICdhd3M6Y2RrOmVuYWJsZS1wYXRoLW1ldGFkYXRhJztcblxuLyoqXG4gKiBTZXBhcmF0b3Igc3RyaW5nIHRoYXQgc2VwYXJhdGVzIHRoZSBwcmVmaXggc2VwYXJhdG9yIGZyb20gdGhlIG9iamVjdCBrZXkgc2VwYXJhdG9yLlxuICpcbiAqIEFzc2V0IGtleXMgd2lsbCBsb29rIGxpa2U6XG4gKlxuICogICAgL2Fzc2V0cy9NeUNvbnN0cnVjdDEyMzQ1Njc4L3x8YWJjZGVmMTIzNDUuemlwXG4gKlxuICogVGhpcyBhbGxvd3MgdXMgdG8gZW5jb2RlIGJvdGggdGhlIHByZWZpeCBhbmQgdGhlIGZ1bGwgbG9jYXRpb24gaW4gYSBzaW5nbGVcbiAqIENsb3VkRm9ybWF0aW9uIFRlbXBsYXRlIFBhcmFtZXRlci5cbiAqL1xuZXhwb3J0IGNvbnN0IEFTU0VUX1BSRUZJWF9TRVBBUkFUT1IgPSAnfHwnO1xuIl19
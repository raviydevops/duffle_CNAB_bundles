"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cloudwatch = require("@aws-cdk/aws-cloudwatch");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const log_stream_1 = require("./log-stream");
const logs_generated_1 = require("./logs.generated");
const metric_filter_1 = require("./metric-filter");
const pattern_1 = require("./pattern");
const subscription_filter_1 = require("./subscription-filter");
/**
 * An CloudWatch Log Group
 */
class LogGroupRef extends cdk.Construct {
    /**
     * Import an existing LogGroup
     */
    static import(parent, id, props) {
        return new ImportedLogGroup(parent, id, props);
    }
    /**
     * Create a new Log Stream for this Log Group
     *
     * @param parent Parent construct
     * @param id Unique identifier for the construct in its parent
     * @param props Properties for creating the LogStream
     */
    newStream(parent, id, props = {}) {
        return new log_stream_1.LogStream(parent, id, Object.assign({ logGroup: this }, props));
    }
    /**
     * Create a new Subscription Filter on this Log Group
     *
     * @param parent Parent construct
     * @param id Unique identifier for the construct in its parent
     * @param props Properties for creating the SubscriptionFilter
     */
    newSubscriptionFilter(parent, id, props) {
        return new subscription_filter_1.SubscriptionFilter(parent, id, Object.assign({ logGroup: this }, props));
    }
    /**
     * Create a new Metric Filter on this Log Group
     *
     * @param parent Parent construct
     * @param id Unique identifier for the construct in its parent
     * @param props Properties for creating the MetricFilter
     */
    newMetricFilter(parent, id, props) {
        return new metric_filter_1.MetricFilter(parent, id, Object.assign({ logGroup: this }, props));
    }
    /**
     * Export this LogGroup
     */
    export() {
        return {
            logGroupArn: new cdk.Output(this, 'LogGroupArn', { value: this.logGroupArn }).makeImportValue().toString()
        };
    }
    /**
     * Extract a metric from structured log events in the LogGroup
     *
     * Creates a MetricFilter on this LogGroup that will extract the value
     * of the indicated JSON field in all records where it occurs.
     *
     * The metric will be available in CloudWatch Metrics under the
     * indicated namespace and name.
     *
     * @param jsonField JSON field to extract (example: '$.myfield')
     * @param metricNamespace Namespace to emit the metric under
     * @param metricName Name to emit the metric under
     * @returns A Metric object representing the extracted metric
     */
    extractMetric(jsonField, metricNamespace, metricName) {
        new metric_filter_1.MetricFilter(this, `${metricNamespace}_${metricName}`, {
            logGroup: this,
            metricNamespace,
            metricName,
            filterPattern: pattern_1.FilterPattern.exists(jsonField),
            metricValue: jsonField
        });
        return new cloudwatch.Metric({ metricName, namespace: metricNamespace });
    }
    /**
     * Give permissions to write to create and write to streams in this log group
     */
    grantWrite(principal) {
        this.grant(principal, 'logs:CreateLogStream', 'logs:PutLogEvents');
    }
    /**
     * Give the indicated permissions on this log group and all streams
     */
    grant(principal, ...actions) {
        if (!principal) {
            return;
        }
        principal.addToPolicy(new iam.PolicyStatement()
            .addActions(...actions)
            // This ARN includes a ':*' at the end to include the log streams.
            // See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html#w2ab1c21c10c63c43c11
            .addResource(`${this.logGroupArn}`));
    }
}
exports.LogGroupRef = LogGroupRef;
/**
 * Define a CloudWatch Log Group
 */
class LogGroup extends LogGroupRef {
    constructor(parent, id, props = {}) {
        super(parent, id);
        let retentionInDays = props.retentionDays;
        if (retentionInDays === undefined) {
            retentionInDays = 731;
        }
        if (retentionInDays === Infinity) {
            retentionInDays = undefined;
        }
        if (retentionInDays !== undefined && retentionInDays <= 0) {
            throw new Error(`retentionInDays must be positive, got ${retentionInDays}`);
        }
        const resource = new logs_generated_1.cloudformation.LogGroupResource(this, 'Resource', {
            logGroupName: props.logGroupName,
            retentionInDays,
        });
        if (props.retainLogGroup !== false) {
            cdk.applyRemovalPolicy(resource, cdk.RemovalPolicy.Orphan);
        }
        this.logGroupArn = resource.logGroupArn;
        this.logGroupName = resource.logGroupName;
    }
}
exports.LogGroup = LogGroup;
/**
 * An imported CloudWatch Log Group
 */
class ImportedLogGroup extends LogGroupRef {
    constructor(parent, id, props) {
        super(parent, id);
        this.logGroupArn = props.logGroupArn;
        this.logGroupName = cdk.ArnUtils.resourceNameComponent(props.logGroupArn, ':');
    }
}
//# sourceMappingURL=data:application/json;base64,
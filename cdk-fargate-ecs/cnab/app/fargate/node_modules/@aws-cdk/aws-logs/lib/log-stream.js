"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const logs_generated_1 = require("./logs.generated");
/**
 * A Log Stream in a Log Group
 */
class LogStreamRef extends cdk.Construct {
    /**
     * Import an existing LogGroup
     */
    static import(parent, id, props) {
        return new ImportedLogStream(parent, id, props);
    }
    /**
     * Export this LogStream
     */
    export() {
        return {
            logStreamName: new cdk.Output(this, 'LogStreamName', { value: this.logStreamName }).makeImportValue().toString()
        };
    }
}
exports.LogStreamRef = LogStreamRef;
/**
 * Define a Log Stream in a Log Group
 */
class LogStream extends LogStreamRef {
    constructor(parent, id, props) {
        super(parent, id);
        const resource = new logs_generated_1.cloudformation.LogStreamResource(this, 'Resource', {
            logGroupName: props.logGroup.logGroupName,
            logStreamName: props.logStreamName
        });
        if (props.retainLogStream !== false) {
            resource.options.deletionPolicy = cdk.DeletionPolicy.Retain;
        }
        this.logStreamName = resource.logStreamName;
    }
}
exports.LogStream = LogStream;
/**
 * An imported LogStream
 */
class ImportedLogStream extends LogStreamRef {
    constructor(parent, id, props) {
        super(parent, id);
        this.logStreamName = props.logStreamName;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLXN0cmVhbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxvZy1zdHJlYW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvQ0FBcUM7QUFFckMscURBQWtEO0FBU2xEOztHQUVHO0FBQ0gsTUFBc0IsWUFBYSxTQUFRLEdBQUcsQ0FBQyxTQUFTO0lBQ3REOztPQUVHO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFxQixFQUFFLEVBQVUsRUFBRSxLQUF3QjtRQUM5RSxPQUFPLElBQUksaUJBQWlCLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBT0Q7O09BRUc7SUFDSSxNQUFNO1FBQ1gsT0FBTztZQUNMLGFBQWEsRUFBRSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLEVBQUU7U0FDakgsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXJCRCxvQ0FxQkM7QUFrQ0Q7O0dBRUc7QUFDSCxNQUFhLFNBQVUsU0FBUSxZQUFZO0lBTXpDLFlBQVksTUFBcUIsRUFBRSxFQUFVLEVBQUUsS0FBcUI7UUFDbEUsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVsQixNQUFNLFFBQVEsR0FBRyxJQUFJLCtCQUFjLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUN0RSxZQUFZLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFZO1lBQ3pDLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtTQUNuQyxDQUFDLENBQUM7UUFFSCxJQUFJLEtBQUssQ0FBQyxlQUFlLEtBQUssS0FBSyxFQUFFO1lBQ25DLFFBQVEsQ0FBQyxPQUFPLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDO1NBQzdEO1FBRUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDO0lBQzlDLENBQUM7Q0FDRjtBQXBCRCw4QkFvQkM7QUFFRDs7R0FFRztBQUNILE1BQU0saUJBQWtCLFNBQVEsWUFBWTtJQU0xQyxZQUFZLE1BQXFCLEVBQUUsRUFBVSxFQUFFLEtBQXdCO1FBQ3JFLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFbEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDO0lBQzNDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcbmltcG9ydCB7IExvZ0dyb3VwUmVmIH0gZnJvbSAnLi9sb2ctZ3JvdXAnO1xuaW1wb3J0IHsgY2xvdWRmb3JtYXRpb24gfSBmcm9tICcuL2xvZ3MuZ2VuZXJhdGVkJztcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBpbXBvcnRpbmcgYSBMb2dTdHJlYW1cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMb2dTdHJlYW1SZWZQcm9wcyB7XG4gIGxvZ1N0cmVhbU5hbWU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIExvZyBTdHJlYW0gaW4gYSBMb2cgR3JvdXBcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIExvZ1N0cmVhbVJlZiBleHRlbmRzIGNkay5Db25zdHJ1Y3Qge1xuICAvKipcbiAgICogSW1wb3J0IGFuIGV4aXN0aW5nIExvZ0dyb3VwXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGltcG9ydChwYXJlbnQ6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBMb2dTdHJlYW1SZWZQcm9wcyk6IExvZ1N0cmVhbVJlZiB7XG4gICAgcmV0dXJuIG5ldyBJbXBvcnRlZExvZ1N0cmVhbShwYXJlbnQsIGlkLCBwcm9wcyk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhpcyBsb2cgc3RyZWFtXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgbG9nU3RyZWFtTmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBFeHBvcnQgdGhpcyBMb2dTdHJlYW1cbiAgICovXG4gIHB1YmxpYyBleHBvcnQoKTogTG9nU3RyZWFtUmVmUHJvcHMge1xuICAgIHJldHVybiB7XG4gICAgICBsb2dTdHJlYW1OYW1lOiBuZXcgY2RrLk91dHB1dCh0aGlzLCAnTG9nU3RyZWFtTmFtZScsIHsgdmFsdWU6IHRoaXMubG9nU3RyZWFtTmFtZSB9KS5tYWtlSW1wb3J0VmFsdWUoKS50b1N0cmluZygpXG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGEgTG9nU3RyZWFtXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTG9nU3RyZWFtUHJvcHMge1xuICAvKipcbiAgICogVGhlIGxvZyBncm91cCB0byBjcmVhdGUgYSBsb2cgc3RyZWFtIGZvci5cbiAgICovXG4gIGxvZ0dyb3VwOiBMb2dHcm91cFJlZjtcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGxvZyBzdHJlYW0gdG8gY3JlYXRlLlxuICAgKlxuICAgKiBUaGUgbmFtZSBtdXN0IGJlIHVuaXF1ZSB3aXRoaW4gdGhlIGxvZyBncm91cC5cbiAgICpcbiAgICogQGRlZmF1bHQgQXV0b21hdGljYWxseSBnZW5lcmF0ZWRcbiAgICovXG4gIGxvZ1N0cmVhbU5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFJldGFpbiB0aGUgbG9nIHN0cmVhbSBpZiB0aGUgc3RhY2sgb3IgY29udGFpbmluZyBjb25zdHJ1Y3QgY2Vhc2VzIHRvIGV4aXN0XG4gICAqXG4gICAqIE5vcm1hbGx5IHlvdSB3YW50IHRvIHJldGFpbiB0aGUgbG9nIHN0cmVhbSBzbyB5b3UgY2FuIGRpYWdub3NlIGlzc3Vlc1xuICAgKiBmcm9tIGxvZ3MgZXZlbiBhZnRlciBhIGRlcGxveW1lbnQgdGhhdCBubyBsb25nZXIgaW5jbHVkZXMgdGhlIGxvZyBzdHJlYW0uXG4gICAqXG4gICAqIFRoZSBkYXRlLWJhc2VkIHJldGVudGlvbiBwb2xpY3kgb2YgeW91ciBsb2cgZ3JvdXAgd2lsbCBhZ2Ugb3V0IHRoZSBsb2dzXG4gICAqIGFmdGVyIGEgY2VydGFpbiB0aW1lLlxuICAgKlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICByZXRhaW5Mb2dTdHJlYW0/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIERlZmluZSBhIExvZyBTdHJlYW0gaW4gYSBMb2cgR3JvdXBcbiAqL1xuZXhwb3J0IGNsYXNzIExvZ1N0cmVhbSBleHRlbmRzIExvZ1N0cmVhbVJlZiB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGlzIGxvZyBzdHJlYW1cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBsb2dTdHJlYW1OYW1lOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTG9nU3RyZWFtUHJvcHMpIHtcbiAgICBzdXBlcihwYXJlbnQsIGlkKTtcblxuICAgIGNvbnN0IHJlc291cmNlID0gbmV3IGNsb3VkZm9ybWF0aW9uLkxvZ1N0cmVhbVJlc291cmNlKHRoaXMsICdSZXNvdXJjZScsIHtcbiAgICAgIGxvZ0dyb3VwTmFtZTogcHJvcHMubG9nR3JvdXAubG9nR3JvdXBOYW1lLFxuICAgICAgbG9nU3RyZWFtTmFtZTogcHJvcHMubG9nU3RyZWFtTmFtZVxuICAgIH0pO1xuXG4gICAgaWYgKHByb3BzLnJldGFpbkxvZ1N0cmVhbSAhPT0gZmFsc2UpIHtcbiAgICAgIHJlc291cmNlLm9wdGlvbnMuZGVsZXRpb25Qb2xpY3kgPSBjZGsuRGVsZXRpb25Qb2xpY3kuUmV0YWluO1xuICAgIH1cblxuICAgIHRoaXMubG9nU3RyZWFtTmFtZSA9IHJlc291cmNlLmxvZ1N0cmVhbU5hbWU7XG4gIH1cbn1cblxuLyoqXG4gKiBBbiBpbXBvcnRlZCBMb2dTdHJlYW1cbiAqL1xuY2xhc3MgSW1wb3J0ZWRMb2dTdHJlYW0gZXh0ZW5kcyBMb2dTdHJlYW1SZWYge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhpcyBsb2cgc3RyZWFtXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgbG9nU3RyZWFtTmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHBhcmVudDogY2RrLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IExvZ1N0cmVhbVJlZlByb3BzKSB7XG4gICAgc3VwZXIocGFyZW50LCBpZCk7XG5cbiAgICB0aGlzLmxvZ1N0cmVhbU5hbWUgPSBwcm9wcy5sb2dTdHJlYW1OYW1lO1xuICB9XG59XG4iXX0=
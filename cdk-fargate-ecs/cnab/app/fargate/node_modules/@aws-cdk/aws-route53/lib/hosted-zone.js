"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const hosted_zone_ref_1 = require("./hosted-zone-ref");
const route53_generated_1 = require("./route53.generated");
const util_1 = require("./util");
/**
 * Create a Route53 public hosted zone.
 */
class PublicHostedZone extends hosted_zone_ref_1.HostedZoneRef {
    constructor(parent, name, props) {
        super(parent, name);
        util_1.validateZoneName(props.zoneName);
        const hostedZone = new route53_generated_1.cloudformation.HostedZoneResource(this, 'Resource', Object.assign({}, determineHostedZoneProps(props)));
        this.hostedZoneId = hostedZone.ref;
        this.nameServers = hostedZone.hostedZoneNameServers;
        this.zoneName = props.zoneName;
    }
}
exports.PublicHostedZone = PublicHostedZone;
/**
 * Create a Route53 private hosted zone for use in one or more VPCs.
 *
 * Note that `enableDnsHostnames` and `enableDnsSupport` must have been enabled
 * for the VPC you're configuring for private hosted zones.
 */
class PrivateHostedZone extends hosted_zone_ref_1.HostedZoneRef {
    constructor(parent, name, props) {
        super(parent, name);
        /**
         * VPCs to which this hosted zone will be added
         */
        this.vpcs = [];
        util_1.validateZoneName(props.zoneName);
        const hostedZone = new route53_generated_1.cloudformation.HostedZoneResource(this, 'Resource', Object.assign({ vpcs: new cdk.Token(() => this.vpcs ? this.vpcs : undefined) }, determineHostedZoneProps(props)));
        this.hostedZoneId = hostedZone.ref;
        this.zoneName = props.zoneName;
        this.addVpc(props.vpc);
    }
    /**
     * Add another VPC to this private hosted zone.
     *
     * @param vpc the other VPC to add.
     */
    addVpc(vpc) {
        this.vpcs.push(toVpcProperty(vpc));
    }
}
exports.PrivateHostedZone = PrivateHostedZone;
function toVpcProperty(vpc) {
    return { vpcId: vpc.vpcId, vpcRegion: new cdk.AwsRegion() };
}
function determineHostedZoneProps(props) {
    const name = props.zoneName + '.';
    const hostedZoneConfig = props.comment ? { comment: props.comment } : undefined;
    const queryLoggingConfig = props.queryLogsLogGroupArn ? { cloudWatchLogsLogGroupArn: props.queryLogsLogGroupArn } : undefined;
    return { name, hostedZoneConfig, queryLoggingConfig };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdGVkLXpvbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJob3N0ZWQtem9uZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLG9DQUFxQztBQUNyQyx1REFBa0Q7QUFDbEQsMkRBQTRFO0FBQzVFLGlDQUEwQztBQTBCMUM7O0dBRUc7QUFDSCxNQUFhLGdCQUFpQixTQUFRLCtCQUFhO0lBZ0JqRCxZQUFZLE1BQXFCLEVBQUUsSUFBWSxFQUFFLEtBQTRCO1FBQzNFLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFcEIsdUJBQWdCLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRWpDLE1BQU0sVUFBVSxHQUFHLElBQUksa0NBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsVUFBVSxvQkFDcEUsd0JBQXdCLENBQUMsS0FBSyxDQUFDLEVBQ2xDLENBQUM7UUFFSCxJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUM7UUFDbkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMscUJBQXFCLENBQUM7UUFDcEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0lBQ2pDLENBQUM7Q0FDRjtBQTdCRCw0Q0E2QkM7QUFZRDs7Ozs7R0FLRztBQUNILE1BQWEsaUJBQWtCLFNBQVEsK0JBQWE7SUFnQmxELFlBQVksTUFBcUIsRUFBRSxJQUFZLEVBQUUsS0FBNkI7UUFDNUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQU50Qjs7V0FFRztRQUNjLFNBQUksR0FBb0QsRUFBRSxDQUFDO1FBSzFFLHVCQUFnQixDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVqQyxNQUFNLFVBQVUsR0FBRyxJQUFJLGtDQUFjLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLFVBQVUsa0JBQ3ZFLElBQUksRUFBRSxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQ3pELHdCQUF3QixDQUFDLEtBQUssQ0FBQyxFQUNsQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUUvQixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxHQUFzQjtRQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyQyxDQUFDO0NBQ0Y7QUF4Q0QsOENBd0NDO0FBRUQsU0FBUyxhQUFhLENBQUMsR0FBc0I7SUFDM0MsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDO0FBQzlELENBQUM7QUFFRCxTQUFTLHdCQUF3QixDQUFDLEtBQTRCO0lBQzVELE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO0lBQ2xDLE1BQU0sZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDaEYsTUFBTSxrQkFBa0IsR0FBRyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLEVBQUUseUJBQXlCLEVBQUUsS0FBSyxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUU5SCxPQUFPLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLGtCQUFrQixFQUFFLENBQUM7QUFDeEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlYzIgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtZWMyJyk7XG5pbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY2RrJyk7XG5pbXBvcnQgeyBIb3N0ZWRab25lUmVmIH0gZnJvbSAnLi9ob3N0ZWQtem9uZS1yZWYnO1xuaW1wb3J0IHsgY2xvdWRmb3JtYXRpb24sIEhvc3RlZFpvbmVOYW1lU2VydmVycyB9IGZyb20gJy4vcm91dGU1My5nZW5lcmF0ZWQnO1xuaW1wb3J0IHsgdmFsaWRhdGVab25lTmFtZSB9IGZyb20gJy4vdXRpbCc7XG5cbi8qKlxuICogUHJvcGVydGllcyBvZiBhIG5ldyBob3N0ZWQgem9uZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFB1YmxpY0hvc3RlZFpvbmVQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgZnVsbHkgcXVhbGlmaWVkIGRvbWFpbiBuYW1lIGZvciB0aGUgaG9zdGVkIHpvbmVcbiAgICovXG4gIHpvbmVOYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEFueSBjb21tZW50cyB0aGF0IHlvdSB3YW50IHRvIGluY2x1ZGUgYWJvdXQgdGhlIGhvc3RlZCB6b25lLlxuICAgKlxuICAgKiBAZGVmYXVsdCBubyBjb21tZW50XG4gICAqL1xuICBjb21tZW50Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgQW1hem9uIFJlc291cmNlIE5hbWUgKEFSTikgZm9yIHRoZSBsb2cgZ3JvdXAgdGhhdCB5b3Ugd2FudCBBbWF6b24gUm91dGUgNTMgdG8gc2VuZCBxdWVyeSBsb2dzIHRvLlxuICAgKlxuICAgKiBAZGVmYXVsdCBubyBETlMgcXVlcnkgbG9nZ2luZ1xuICAgKi9cbiAgcXVlcnlMb2dzTG9nR3JvdXBBcm4/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgUm91dGU1MyBwdWJsaWMgaG9zdGVkIHpvbmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBQdWJsaWNIb3N0ZWRab25lIGV4dGVuZHMgSG9zdGVkWm9uZVJlZiB7XG4gIC8qKlxuICAgKiBJZGVudGlmaWVyIG9mIHRoaXMgaG9zdGVkIHpvbmVcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBob3N0ZWRab25lSWQ6IHN0cmluZztcblxuICAvKipcbiAgICogRnVsbHkgcXVhbGlmaWVkIGRvbWFpbiBuYW1lIGZvciB0aGUgaG9zdGVkIHpvbmVcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSB6b25lTmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBOYW1lc2VydmVycyBmb3IgdGhpcyBwdWJsaWMgaG9zdGVkIHpvbmVcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBuYW1lU2VydmVyczogSG9zdGVkWm9uZU5hbWVTZXJ2ZXJzO1xuXG4gIGNvbnN0cnVjdG9yKHBhcmVudDogY2RrLkNvbnN0cnVjdCwgbmFtZTogc3RyaW5nLCBwcm9wczogUHVibGljSG9zdGVkWm9uZVByb3BzKSB7XG4gICAgc3VwZXIocGFyZW50LCBuYW1lKTtcblxuICAgIHZhbGlkYXRlWm9uZU5hbWUocHJvcHMuem9uZU5hbWUpO1xuXG4gICAgY29uc3QgaG9zdGVkWm9uZSA9IG5ldyBjbG91ZGZvcm1hdGlvbi5Ib3N0ZWRab25lUmVzb3VyY2UodGhpcywgJ1Jlc291cmNlJywge1xuICAgICAgLi4uZGV0ZXJtaW5lSG9zdGVkWm9uZVByb3BzKHByb3BzKVxuICAgIH0pO1xuXG4gICAgdGhpcy5ob3N0ZWRab25lSWQgPSBob3N0ZWRab25lLnJlZjtcbiAgICB0aGlzLm5hbWVTZXJ2ZXJzID0gaG9zdGVkWm9uZS5ob3N0ZWRab25lTmFtZVNlcnZlcnM7XG4gICAgdGhpcy56b25lTmFtZSA9IHByb3BzLnpvbmVOYW1lO1xuICB9XG59XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgYSBwcml2YXRlIGhvc3RlZCB6b25lLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFByaXZhdGVIb3N0ZWRab25lUHJvcHMgZXh0ZW5kcyBQdWJsaWNIb3N0ZWRab25lUHJvcHMge1xuICAvKipcbiAgICogT25lIFZQQyB0aGF0IHlvdSB3YW50IHRvIGFzc29jaWF0ZSB3aXRoIHRoaXMgaG9zdGVkIHpvbmUuXG4gICAqL1xuICB2cGM6IGVjMi5WcGNOZXR3b3JrUmVmO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIFJvdXRlNTMgcHJpdmF0ZSBob3N0ZWQgem9uZSBmb3IgdXNlIGluIG9uZSBvciBtb3JlIFZQQ3MuXG4gKlxuICogTm90ZSB0aGF0IGBlbmFibGVEbnNIb3N0bmFtZXNgIGFuZCBgZW5hYmxlRG5zU3VwcG9ydGAgbXVzdCBoYXZlIGJlZW4gZW5hYmxlZFxuICogZm9yIHRoZSBWUEMgeW91J3JlIGNvbmZpZ3VyaW5nIGZvciBwcml2YXRlIGhvc3RlZCB6b25lcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFByaXZhdGVIb3N0ZWRab25lIGV4dGVuZHMgSG9zdGVkWm9uZVJlZiB7XG4gIC8qKlxuICAgKiBJZGVudGlmaWVyIG9mIHRoaXMgaG9zdGVkIHpvbmVcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBob3N0ZWRab25lSWQ6IHN0cmluZztcblxuICAvKipcbiAgICogRnVsbHkgcXVhbGlmaWVkIGRvbWFpbiBuYW1lIGZvciB0aGUgaG9zdGVkIHpvbmVcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSB6b25lTmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBWUENzIHRvIHdoaWNoIHRoaXMgaG9zdGVkIHpvbmUgd2lsbCBiZSBhZGRlZFxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSB2cGNzOiBjbG91ZGZvcm1hdGlvbi5Ib3N0ZWRab25lUmVzb3VyY2UuVlBDUHJvcGVydHlbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKHBhcmVudDogY2RrLkNvbnN0cnVjdCwgbmFtZTogc3RyaW5nLCBwcm9wczogUHJpdmF0ZUhvc3RlZFpvbmVQcm9wcykge1xuICAgIHN1cGVyKHBhcmVudCwgbmFtZSk7XG5cbiAgICB2YWxpZGF0ZVpvbmVOYW1lKHByb3BzLnpvbmVOYW1lKTtcblxuICAgIGNvbnN0IGhvc3RlZFpvbmUgPSBuZXcgY2xvdWRmb3JtYXRpb24uSG9zdGVkWm9uZVJlc291cmNlKHRoaXMsICdSZXNvdXJjZScsIHtcbiAgICAgIHZwY3M6IG5ldyBjZGsuVG9rZW4oKCkgPT4gdGhpcy52cGNzID8gdGhpcy52cGNzIDogdW5kZWZpbmVkKSxcbiAgICAgIC4uLmRldGVybWluZUhvc3RlZFpvbmVQcm9wcyhwcm9wcylcbiAgICB9KTtcblxuICAgIHRoaXMuaG9zdGVkWm9uZUlkID0gaG9zdGVkWm9uZS5yZWY7XG4gICAgdGhpcy56b25lTmFtZSA9IHByb3BzLnpvbmVOYW1lO1xuXG4gICAgdGhpcy5hZGRWcGMocHJvcHMudnBjKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYW5vdGhlciBWUEMgdG8gdGhpcyBwcml2YXRlIGhvc3RlZCB6b25lLlxuICAgKlxuICAgKiBAcGFyYW0gdnBjIHRoZSBvdGhlciBWUEMgdG8gYWRkLlxuICAgKi9cbiAgcHVibGljIGFkZFZwYyh2cGM6IGVjMi5WcGNOZXR3b3JrUmVmKSB7XG4gICAgdGhpcy52cGNzLnB1c2godG9WcGNQcm9wZXJ0eSh2cGMpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0b1ZwY1Byb3BlcnR5KHZwYzogZWMyLlZwY05ldHdvcmtSZWYpOiBjbG91ZGZvcm1hdGlvbi5Ib3N0ZWRab25lUmVzb3VyY2UuVlBDUHJvcGVydHkge1xuICByZXR1cm4geyB2cGNJZDogdnBjLnZwY0lkLCB2cGNSZWdpb246IG5ldyBjZGsuQXdzUmVnaW9uKCkgfTtcbn1cblxuZnVuY3Rpb24gZGV0ZXJtaW5lSG9zdGVkWm9uZVByb3BzKHByb3BzOiBQdWJsaWNIb3N0ZWRab25lUHJvcHMpIHtcbiAgY29uc3QgbmFtZSA9IHByb3BzLnpvbmVOYW1lICsgJy4nO1xuICBjb25zdCBob3N0ZWRab25lQ29uZmlnID0gcHJvcHMuY29tbWVudCA/IHsgY29tbWVudDogcHJvcHMuY29tbWVudCB9IDogdW5kZWZpbmVkO1xuICBjb25zdCBxdWVyeUxvZ2dpbmdDb25maWcgPSBwcm9wcy5xdWVyeUxvZ3NMb2dHcm91cEFybiA/IHsgY2xvdWRXYXRjaExvZ3NMb2dHcm91cEFybjogcHJvcHMucXVlcnlMb2dzTG9nR3JvdXBBcm4gfSA6IHVuZGVmaW5lZDtcblxuICByZXR1cm4geyBuYW1lLCBob3N0ZWRab25lQ29uZmlnLCBxdWVyeUxvZ2dpbmdDb25maWcgfTtcbn1cbiJdfQ==
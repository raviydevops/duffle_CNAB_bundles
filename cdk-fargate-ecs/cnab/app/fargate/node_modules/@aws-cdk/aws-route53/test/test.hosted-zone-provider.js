"use strict";
const cdk = require("@aws-cdk/cdk");
const lib_1 = require("../lib");
module.exports = {
    'Hosted Zone Provider': {
        'HostedZoneProvider will return context values if availble'(test) {
            // GIVEN
            const stack = new cdk.Stack(undefined, 'TestStack', { env: { account: '12345', region: 'us-east-1' } });
            const filter = { domainName: 'test.com' };
            new lib_1.HostedZoneProvider(stack, filter).findHostedZone();
            const key = Object.keys(stack.missingContext)[0];
            const fakeZone = {
                Id: "/hostedzone/11111111111111",
                Name: "example.com.",
                CallerReference: "TestLates-PublicZo-OESZPDFV7G6A",
                Config: {
                    Comment: "CDK created",
                    PrivateZone: false
                },
                ResourceRecordSetCount: 3
            };
            stack.setContext(key, fakeZone);
            const cdkZoneProps = {
                hostedZoneId: fakeZone.Id,
                zoneName: 'example.com',
            };
            const cdkZone = lib_1.HostedZoneRef.import(stack, 'MyZone', cdkZoneProps);
            // WHEN
            const provider = new lib_1.HostedZoneProvider(stack, filter);
            const zoneProps = cdk.resolve(provider.findHostedZone());
            const zoneRef = provider.findAndImport(stack, 'MyZoneProvider');
            // THEN
            test.deepEqual(zoneProps, cdkZoneProps);
            test.deepEqual(zoneRef.hostedZoneId, cdkZone.hostedZoneId);
            test.done();
        },
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5ob3N0ZWQtem9uZS1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3QuaG9zdGVkLXpvbmUtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9DQUFxQztBQUVyQyxnQ0FBK0U7QUFFL0UsaUJBQVM7SUFDUCxzQkFBc0IsRUFBRTtRQUN0QiwyREFBMkQsQ0FBQyxJQUFVO1lBQ3BFLFFBQVE7WUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFdBQVcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN4RyxNQUFNLE1BQU0sR0FBRyxFQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUMsQ0FBQztZQUN4QyxJQUFJLHdCQUFrQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2RCxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVqRCxNQUFNLFFBQVEsR0FBRztnQkFDZixFQUFFLEVBQUUsNEJBQTRCO2dCQUNoQyxJQUFJLEVBQUUsY0FBYztnQkFDcEIsZUFBZSxFQUFFLGlDQUFpQztnQkFDbEQsTUFBTSxFQUFFO29CQUNOLE9BQU8sRUFBRSxhQUFhO29CQUN0QixXQUFXLEVBQUUsS0FBSztpQkFDbkI7Z0JBQ0Qsc0JBQXNCLEVBQUUsQ0FBQzthQUMxQixDQUFDO1lBRUYsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFFaEMsTUFBTSxZQUFZLEdBQXVCO2dCQUN2QyxZQUFZLEVBQUUsUUFBUSxDQUFDLEVBQUU7Z0JBQ3pCLFFBQVEsRUFBRSxhQUFhO2FBQ3hCLENBQUM7WUFFRixNQUFNLE9BQU8sR0FBRyxtQkFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBRXBFLE9BQU87WUFDUCxNQUFNLFFBQVEsR0FBRyxJQUFJLHdCQUFrQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN2RCxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO1lBQ3pELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFFaEUsT0FBTztZQUNQLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ3hDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDM0QsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQztLQUNGO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcbmltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgeyBIb3N0ZWRab25lUHJvdmlkZXIsIEhvc3RlZFpvbmVSZWYsIEhvc3RlZFpvbmVSZWZQcm9wcyB9IGZyb20gJy4uL2xpYic7XG5cbmV4cG9ydCA9IHtcbiAgJ0hvc3RlZCBab25lIFByb3ZpZGVyJzoge1xuICAgICdIb3N0ZWRab25lUHJvdmlkZXIgd2lsbCByZXR1cm4gY29udGV4dCB2YWx1ZXMgaWYgYXZhaWxibGUnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2sodW5kZWZpbmVkLCAnVGVzdFN0YWNrJywgeyBlbnY6IHsgYWNjb3VudDogJzEyMzQ1JywgcmVnaW9uOiAndXMtZWFzdC0xJyB9IH0pO1xuICAgICAgY29uc3QgZmlsdGVyID0ge2RvbWFpbk5hbWU6ICd0ZXN0LmNvbSd9O1xuICAgICAgbmV3IEhvc3RlZFpvbmVQcm92aWRlcihzdGFjaywgZmlsdGVyKS5maW5kSG9zdGVkWm9uZSgpO1xuICAgICAgY29uc3Qga2V5ID0gT2JqZWN0LmtleXMoc3RhY2subWlzc2luZ0NvbnRleHQpWzBdO1xuXG4gICAgICBjb25zdCBmYWtlWm9uZSA9IHtcbiAgICAgICAgSWQ6IFwiL2hvc3RlZHpvbmUvMTExMTExMTExMTExMTFcIixcbiAgICAgICAgTmFtZTogXCJleGFtcGxlLmNvbS5cIixcbiAgICAgICAgQ2FsbGVyUmVmZXJlbmNlOiBcIlRlc3RMYXRlcy1QdWJsaWNaby1PRVNaUERGVjdHNkFcIixcbiAgICAgICAgQ29uZmlnOiB7XG4gICAgICAgICAgQ29tbWVudDogXCJDREsgY3JlYXRlZFwiLFxuICAgICAgICAgIFByaXZhdGVab25lOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBSZXNvdXJjZVJlY29yZFNldENvdW50OiAzXG4gICAgICB9O1xuXG4gICAgICBzdGFjay5zZXRDb250ZXh0KGtleSwgZmFrZVpvbmUpO1xuXG4gICAgICBjb25zdCBjZGtab25lUHJvcHM6IEhvc3RlZFpvbmVSZWZQcm9wcyA9IHtcbiAgICAgICAgaG9zdGVkWm9uZUlkOiBmYWtlWm9uZS5JZCxcbiAgICAgICAgem9uZU5hbWU6ICdleGFtcGxlLmNvbScsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBjZGtab25lID0gSG9zdGVkWm9uZVJlZi5pbXBvcnQoc3RhY2ssICdNeVpvbmUnLCBjZGtab25lUHJvcHMpO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBIb3N0ZWRab25lUHJvdmlkZXIoc3RhY2ssIGZpbHRlcik7XG4gICAgICBjb25zdCB6b25lUHJvcHMgPSBjZGsucmVzb2x2ZShwcm92aWRlci5maW5kSG9zdGVkWm9uZSgpKTtcbiAgICAgIGNvbnN0IHpvbmVSZWYgPSBwcm92aWRlci5maW5kQW5kSW1wb3J0KHN0YWNrLCAnTXlab25lUHJvdmlkZXInKTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgdGVzdC5kZWVwRXF1YWwoem9uZVByb3BzLCBjZGtab25lUHJvcHMpO1xuICAgICAgdGVzdC5kZWVwRXF1YWwoem9uZVJlZi5ob3N0ZWRab25lSWQsIGNka1pvbmUuaG9zdGVkWm9uZUlkKTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG4gIH1cbn07XG4iXX0=
"use strict";
const assert_1 = require("@aws-cdk/assert");
const cdk_1 = require("@aws-cdk/cdk");
const lib_1 = require("../lib");
class TestApp {
    constructor() {
        this.app = new cdk_1.App();
        const account = '123456789012';
        const region = 'bermuda-triangle';
        this.app.setContext(`availability-zones:${account}:${region}`, [`${region}-1a`]);
        this.stack = new cdk_1.Stack(this.app, 'MyStack', { env: { account, region } });
    }
    synthesizeTemplate() {
        return this.app.synthesizeStack(this.stack.name);
    }
}
module.exports = {
    'TXT records': {
        TXT(test) {
            const app = new TestApp();
            const zone = new lib_1.PublicHostedZone(app.stack, 'HostedZone', { zoneName: 'test.public' });
            new lib_1.TXTRecord(zone, 'TXT', { recordName: '_foo', recordValue: 'Bar!' });
            assert_1.expect(app.synthesizeTemplate()).to(assert_1.exactlyMatchTemplate({
                Resources: {
                    HostedZoneDB99F866: {
                        Type: 'AWS::Route53::HostedZone',
                        Properties: {
                            Name: 'test.public.'
                        }
                    },
                    HostedZoneTXT69C29760: {
                        Type: 'AWS::Route53::RecordSet',
                        Properties: {
                            HostedZoneId: {
                                Ref: 'HostedZoneDB99F866'
                            },
                            Name: '_foo.test.public.',
                            ResourceRecords: ['"Bar!"'],
                            Type: 'TXT',
                            TTL: '1800'
                        }
                    }
                }
            }));
            test.done();
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC50eHQtcmVjb3JkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC50eHQtcmVjb3JkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0Q0FBK0Q7QUFDL0Qsc0NBQTBDO0FBRTFDLGdDQUFxRDtBQW1DckQsTUFBTSxPQUFPO0lBSVg7UUFGaUIsUUFBRyxHQUFHLElBQUksU0FBRyxFQUFFLENBQUM7UUFHL0IsTUFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDO1FBQy9CLE1BQU0sTUFBTSxHQUFHLGtCQUFrQixDQUFDO1FBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLHNCQUFzQixPQUFPLElBQUksTUFBTSxFQUFFLEVBQ25ELENBQUMsR0FBRyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLFdBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVNLGtCQUFrQjtRQUN2QixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkQsQ0FBQztDQUNGO0FBaERELGlCQUFTO0lBQ1AsYUFBYSxFQUFFO1FBQ2IsR0FBRyxDQUFDLElBQVU7WUFDWixNQUFNLEdBQUcsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1lBQzFCLE1BQU0sSUFBSSxHQUFHLElBQUksc0JBQWdCLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQztZQUN4RixJQUFJLGVBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztZQUN4RSxlQUFNLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsNkJBQW9CLENBQUM7Z0JBQ3ZELFNBQVMsRUFBRTtvQkFDVCxrQkFBa0IsRUFBRTt3QkFDbEIsSUFBSSxFQUFFLDBCQUEwQjt3QkFDaEMsVUFBVSxFQUFFOzRCQUNWLElBQUksRUFBRSxjQUFjO3lCQUNyQjtxQkFDRjtvQkFDRCxxQkFBcUIsRUFBRTt3QkFDckIsSUFBSSxFQUFFLHlCQUF5Qjt3QkFDL0IsVUFBVSxFQUFFOzRCQUNWLFlBQVksRUFBRTtnQ0FDZCxHQUFHLEVBQUUsb0JBQW9COzZCQUN4Qjs0QkFDRCxJQUFJLEVBQUUsbUJBQW1COzRCQUN6QixlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUM7NEJBQzNCLElBQUksRUFBRSxLQUFLOzRCQUNYLEdBQUcsRUFBRSxNQUFNO3lCQUNaO3FCQUNBO2lCQUNKO2FBQ0YsQ0FBQyxDQUFDLENBQUM7WUFDSixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxDQUFDO0tBQ0Y7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhhY3RseU1hdGNoVGVtcGxhdGUsIGV4cGVjdCB9IGZyb20gJ0Bhd3MtY2RrL2Fzc2VydCc7XG5pbXBvcnQgeyBBcHAsIFN0YWNrIH0gZnJvbSAnQGF3cy1jZGsvY2RrJztcbmltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgeyBQdWJsaWNIb3N0ZWRab25lLCBUWFRSZWNvcmQgfSBmcm9tICcuLi9saWInO1xuXG5leHBvcnQgPSB7XG4gICdUWFQgcmVjb3Jkcyc6IHtcbiAgICBUWFQodGVzdDogVGVzdCkge1xuICAgICAgY29uc3QgYXBwID0gbmV3IFRlc3RBcHAoKTtcbiAgICAgIGNvbnN0IHpvbmUgPSBuZXcgUHVibGljSG9zdGVkWm9uZShhcHAuc3RhY2ssICdIb3N0ZWRab25lJywgeyB6b25lTmFtZTogJ3Rlc3QucHVibGljJyB9KTtcbiAgICAgIG5ldyBUWFRSZWNvcmQoem9uZSwgJ1RYVCcsIHsgcmVjb3JkTmFtZTogJ19mb28nLCByZWNvcmRWYWx1ZTogJ0JhciEnIH0pO1xuICAgICAgZXhwZWN0KGFwcC5zeW50aGVzaXplVGVtcGxhdGUoKSkudG8oZXhhY3RseU1hdGNoVGVtcGxhdGUoe1xuICAgICAgICBSZXNvdXJjZXM6IHtcbiAgICAgICAgICBIb3N0ZWRab25lREI5OUY4NjY6IHtcbiAgICAgICAgICAgIFR5cGU6ICdBV1M6OlJvdXRlNTM6Okhvc3RlZFpvbmUnLFxuICAgICAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgICAgICBOYW1lOiAndGVzdC5wdWJsaWMuJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgSG9zdGVkWm9uZVRYVDY5QzI5NzYwOiB7XG4gICAgICAgICAgICBUeXBlOiAnQVdTOjpSb3V0ZTUzOjpSZWNvcmRTZXQnLFxuICAgICAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgICAgICBIb3N0ZWRab25lSWQ6IHtcbiAgICAgICAgICAgICAgUmVmOiAnSG9zdGVkWm9uZURCOTlGODY2J1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBOYW1lOiAnX2Zvby50ZXN0LnB1YmxpYy4nLFxuICAgICAgICAgICAgICBSZXNvdXJjZVJlY29yZHM6IFsnXCJCYXIhXCInXSxcbiAgICAgICAgICAgICAgVHlwZTogJ1RYVCcsXG4gICAgICAgICAgICAgIFRUTDogJzE4MDAnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH1cbiAgfVxufTtcblxuY2xhc3MgVGVzdEFwcCB7XG4gIHB1YmxpYyByZWFkb25seSBzdGFjazogU3RhY2s7XG4gIHByaXZhdGUgcmVhZG9ubHkgYXBwID0gbmV3IEFwcCgpO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IGFjY291bnQgPSAnMTIzNDU2Nzg5MDEyJztcbiAgICBjb25zdCByZWdpb24gPSAnYmVybXVkYS10cmlhbmdsZSc7XG4gICAgdGhpcy5hcHAuc2V0Q29udGV4dChgYXZhaWxhYmlsaXR5LXpvbmVzOiR7YWNjb3VudH06JHtyZWdpb259YCxcbiAgICAgICAgICAgICAgW2Ake3JlZ2lvbn0tMWFgXSk7XG4gICAgdGhpcy5zdGFjayA9IG5ldyBTdGFjayh0aGlzLmFwcCwgJ015U3RhY2snLCB7IGVudjogeyBhY2NvdW50LCByZWdpb24gfSB9KTtcbiAgfVxuXG4gIHB1YmxpYyBzeW50aGVzaXplVGVtcGxhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwLnN5bnRoZXNpemVTdGFjayh0aGlzLnN0YWNrLm5hbWUpO1xuICB9XG59XG4iXX0=
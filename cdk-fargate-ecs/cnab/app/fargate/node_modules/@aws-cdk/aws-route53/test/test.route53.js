"use strict";
const assert_1 = require("@aws-cdk/assert");
const ec2 = require("@aws-cdk/aws-ec2");
const cdk = require("@aws-cdk/cdk");
const lib_1 = require("../lib");
class TestApp {
    constructor() {
        this.app = new cdk.App();
        const account = '123456789012';
        const region = 'bermuda-triangle';
        this.app.setContext(`availability-zones:${account}:${region}`, [`${region}-1a`]);
        this.stack = new cdk.Stack(this.app, 'MyStack', { env: { account, region } });
    }
    synthesizeTemplate() {
        return this.app.synthesizeStack(this.stack.name);
    }
}
module.exports = {
    'default properties': {
        'public hosted zone'(test) {
            const app = new TestApp();
            new lib_1.PublicHostedZone(app.stack, 'HostedZone', { zoneName: 'test.public' });
            assert_1.expect(app.synthesizeTemplate()).to(assert_1.exactlyMatchTemplate({
                Resources: {
                    HostedZoneDB99F866: {
                        Type: "AWS::Route53::HostedZone",
                        Properties: {
                            Name: "test.public."
                        }
                    }
                }
            }));
            test.done();
        },
        'private hosted zone'(test) {
            const app = new TestApp();
            const vpcNetwork = new ec2.VpcNetwork(app.stack, 'VPC');
            new lib_1.PrivateHostedZone(app.stack, 'HostedZone', { zoneName: 'test.private', vpc: vpcNetwork });
            assert_1.expect(app.synthesizeTemplate()).to(assert_1.beASupersetOfTemplate({
                Resources: {
                    HostedZoneDB99F866: {
                        Type: "AWS::Route53::HostedZone",
                        Properties: {
                            Name: "test.private.",
                            VPCs: [{
                                    VPCId: { Ref: 'VPCB9E5F0B4' },
                                    VPCRegion: { Ref: 'AWS::Region' }
                                }]
                        }
                    }
                }
            }));
            test.done();
        },
        'when specifying multiple VPCs'(test) {
            const app = new TestApp();
            const vpcNetworkA = new ec2.VpcNetwork(app.stack, 'VPC1');
            const vpcNetworkB = new ec2.VpcNetwork(app.stack, 'VPC2');
            new lib_1.PrivateHostedZone(app.stack, 'HostedZone', { zoneName: 'test.private', vpc: vpcNetworkA })
                .addVpc(vpcNetworkB);
            assert_1.expect(app.synthesizeTemplate()).to(assert_1.beASupersetOfTemplate({
                Resources: {
                    HostedZoneDB99F866: {
                        Type: "AWS::Route53::HostedZone",
                        Properties: {
                            Name: "test.private.",
                            VPCs: [{
                                    VPCId: { Ref: 'VPC17DE2CF87' },
                                    VPCRegion: { Ref: 'AWS::Region' }
                                },
                                {
                                    VPCId: { Ref: 'VPC2C1F0E711' },
                                    VPCRegion: { Ref: 'AWS::Region' }
                                }]
                        }
                    }
                }
            }));
            test.done();
        }
    },
    'exporting and importing works'(test) {
        const stack1 = new cdk.Stack();
        const stack2 = new cdk.Stack();
        const zone = new lib_1.PublicHostedZone(stack1, 'Zone', {
            zoneName: 'cdk.local',
        });
        const zoneRef = zone.export();
        const importedZone = lib_1.HostedZoneRef.import(stack2, 'Imported', zoneRef);
        new lib_1.TXTRecord(importedZone, 'Record', {
            recordName: 'lookHere',
            recordValue: 'SeeThere'
        });
        assert_1.expect(stack1).to(assert_1.exactlyMatchTemplate({
            Resources: {
                ZoneA5DE4B68: {
                    Type: "AWS::Route53::HostedZone",
                    Properties: {
                        Name: "cdk.local."
                    }
                }
            },
            Outputs: {
                ZoneHostedZoneId413B8768: {
                    Value: { Ref: "ZoneA5DE4B68" },
                    Export: { Name: "ZoneHostedZoneId413B8768" }
                }
            }
        }));
        assert_1.expect(stack2).to(assert_1.haveResource("AWS::Route53::RecordSet", {
            HostedZoneId: { "Fn::ImportValue": "ZoneHostedZoneId413B8768" },
            Name: "lookHere.cdk.local.",
            ResourceRecords: ["\"SeeThere\""],
            Type: "TXT"
        }));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,
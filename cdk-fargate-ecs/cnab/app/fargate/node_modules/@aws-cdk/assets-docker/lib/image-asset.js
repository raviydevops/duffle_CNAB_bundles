"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs");
const path = require("path");
const adopted_repository_1 = require("./adopted-repository");
/**
 * An asset that represents a Docker image.
 *
 * The image will be created in build time and uploaded to an ECR repository.
 */
class DockerImageAsset extends cdk.Construct {
    constructor(parent, id, props) {
        super(parent, id);
        // resolve full path
        this.directory = path.resolve(props.directory);
        if (!fs.existsSync(this.directory)) {
            throw new Error(`Cannot find image directory at ${this.directory}`);
        }
        if (!fs.existsSync(path.join(this.directory, 'Dockerfile'))) {
            throw new Error(`No 'Dockerfile' found in ${this.directory}`);
        }
        const imageNameParameter = new cdk.Parameter(this, 'ImageName', {
            type: 'String',
            description: `ECR repository name and tag asset "${this.path}"`,
        });
        const asset = {
            packaging: 'container-image',
            path: this.directory,
            id: this.uniqueId,
            imageNameParameter: imageNameParameter.logicalId
        };
        this.addMetadata(cxapi.ASSET_METADATA, asset);
        // parse repository name and tag from the parameter (<REPO_NAME>:<TAG>)
        const components = new cdk.FnSplit(':', imageNameParameter.value);
        const repositoryName = new cdk.FnSelect(0, components).toString();
        const imageTag = new cdk.FnSelect(1, components).toString();
        // Require that repository adoption happens first, so we route the
        // input ARN into the Custom Resource and then get the URI which we use to
        // refer to the image FROM the Custom Resource.
        //
        // If adoption fails (because the repository might be twice-adopted), we
        // haven't already started using the image.
        this.repository = new adopted_repository_1.AdoptedRepository(this, 'AdoptRepository', { repositoryName });
        this.imageUri = this.repository.repositoryUriForTag(imageTag);
    }
}
exports.DockerImageAsset = DockerImageAsset;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtYXNzZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbWFnZS1hc3NldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLG9DQUFxQztBQUNyQyx5Q0FBMEM7QUFDMUMseUJBQTBCO0FBQzFCLDZCQUE4QjtBQUM5Qiw2REFBeUQ7QUFTekQ7Ozs7R0FJRztBQUNILE1BQWEsZ0JBQWlCLFNBQVEsR0FBRyxDQUFDLFNBQVM7SUFpQmpELFlBQVksTUFBcUIsRUFBRSxFQUFVLEVBQUUsS0FBNEI7UUFDekUsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVsQixvQkFBb0I7UUFDcEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7U0FDckU7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUMsRUFBRTtZQUMzRCxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztTQUMvRDtRQUVELE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUU7WUFDOUQsSUFBSSxFQUFFLFFBQVE7WUFDZCxXQUFXLEVBQUUsc0NBQXNDLElBQUksQ0FBQyxJQUFJLEdBQUc7U0FDaEUsQ0FBQyxDQUFDO1FBRUgsTUFBTSxLQUFLLEdBQTJDO1lBQ3BELFNBQVMsRUFBRSxpQkFBaUI7WUFDNUIsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3BCLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUNqQixrQkFBa0IsRUFBRSxrQkFBa0IsQ0FBQyxTQUFTO1NBQ2pELENBQUM7UUFFRixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFOUMsdUVBQXVFO1FBQ3ZFLE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEUsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNsRSxNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRTVELGtFQUFrRTtRQUNsRSwwRUFBMEU7UUFDMUUsK0NBQStDO1FBQy9DLEVBQUU7UUFDRix3RUFBd0U7UUFDeEUsMkNBQTJDO1FBQzNDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxzQ0FBaUIsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO1FBQ3JGLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoRSxDQUFDO0NBQ0Y7QUF6REQsNENBeURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGVjciA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1lY3InKTtcbmltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcbmltcG9ydCBjeGFwaSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2N4LWFwaScpO1xuaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuaW1wb3J0IHsgQWRvcHRlZFJlcG9zaXRvcnkgfSBmcm9tICcuL2Fkb3B0ZWQtcmVwb3NpdG9yeSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG9ja2VySW1hZ2VBc3NldFByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBkaXJlY3Rvcnkgd2hlcmUgdGhlIERvY2tlcmZpbGUgaXMgc3RvcmVkXG4gICAqL1xuICBkaXJlY3Rvcnk6IHN0cmluZztcbn1cblxuLyoqXG4gKiBBbiBhc3NldCB0aGF0IHJlcHJlc2VudHMgYSBEb2NrZXIgaW1hZ2UuXG4gKlxuICogVGhlIGltYWdlIHdpbGwgYmUgY3JlYXRlZCBpbiBidWlsZCB0aW1lIGFuZCB1cGxvYWRlZCB0byBhbiBFQ1IgcmVwb3NpdG9yeS5cbiAqL1xuZXhwb3J0IGNsYXNzIERvY2tlckltYWdlQXNzZXQgZXh0ZW5kcyBjZGsuQ29uc3RydWN0IHtcbiAgLyoqXG4gICAqIFRoZSBmdWxsIFVSSSBvZiB0aGUgaW1hZ2UgKGluY2x1ZGluZyBhIHRhZykuIFVzZSB0aGlzIHJlZmVyZW5jZSB0byBwdWxsXG4gICAqIHRoZSBhc3NldC5cbiAgICovXG4gIHB1YmxpYyBpbWFnZVVyaTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBSZXBvc2l0b3J5IHdoZXJlIHRoZSBpbWFnZSBpcyBzdG9yZWRcbiAgICovXG4gIHB1YmxpYyByZXBvc2l0b3J5OiBlY3IuSVJlcG9zaXRvcnk7XG5cbiAgLyoqXG4gICAqIERpcmVjdG9yeSB3aGVyZSB0aGUgc291cmNlIGZpbGVzIGFyZSBzdG9yZWRcbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlyZWN0b3J5OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRG9ja2VySW1hZ2VBc3NldFByb3BzKSB7XG4gICAgc3VwZXIocGFyZW50LCBpZCk7XG5cbiAgICAvLyByZXNvbHZlIGZ1bGwgcGF0aFxuICAgIHRoaXMuZGlyZWN0b3J5ID0gcGF0aC5yZXNvbHZlKHByb3BzLmRpcmVjdG9yeSk7XG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKHRoaXMuZGlyZWN0b3J5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZmluZCBpbWFnZSBkaXJlY3RvcnkgYXQgJHt0aGlzLmRpcmVjdG9yeX1gKTtcbiAgICB9XG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKHBhdGguam9pbih0aGlzLmRpcmVjdG9yeSwgJ0RvY2tlcmZpbGUnKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gJ0RvY2tlcmZpbGUnIGZvdW5kIGluICR7dGhpcy5kaXJlY3Rvcnl9YCk7XG4gICAgfVxuXG4gICAgY29uc3QgaW1hZ2VOYW1lUGFyYW1ldGVyID0gbmV3IGNkay5QYXJhbWV0ZXIodGhpcywgJ0ltYWdlTmFtZScsIHtcbiAgICAgIHR5cGU6ICdTdHJpbmcnLFxuICAgICAgZGVzY3JpcHRpb246IGBFQ1IgcmVwb3NpdG9yeSBuYW1lIGFuZCB0YWcgYXNzZXQgXCIke3RoaXMucGF0aH1cImAsXG4gICAgfSk7XG5cbiAgICBjb25zdCBhc3NldDogY3hhcGkuQ29udGFpbmVySW1hZ2VBc3NldE1ldGFkYXRhRW50cnkgPSB7XG4gICAgICBwYWNrYWdpbmc6ICdjb250YWluZXItaW1hZ2UnLFxuICAgICAgcGF0aDogdGhpcy5kaXJlY3RvcnksXG4gICAgICBpZDogdGhpcy51bmlxdWVJZCxcbiAgICAgIGltYWdlTmFtZVBhcmFtZXRlcjogaW1hZ2VOYW1lUGFyYW1ldGVyLmxvZ2ljYWxJZFxuICAgIH07XG5cbiAgICB0aGlzLmFkZE1ldGFkYXRhKGN4YXBpLkFTU0VUX01FVEFEQVRBLCBhc3NldCk7XG5cbiAgICAvLyBwYXJzZSByZXBvc2l0b3J5IG5hbWUgYW5kIHRhZyBmcm9tIHRoZSBwYXJhbWV0ZXIgKDxSRVBPX05BTUU+OjxUQUc+KVxuICAgIGNvbnN0IGNvbXBvbmVudHMgPSBuZXcgY2RrLkZuU3BsaXQoJzonLCBpbWFnZU5hbWVQYXJhbWV0ZXIudmFsdWUpO1xuICAgIGNvbnN0IHJlcG9zaXRvcnlOYW1lID0gbmV3IGNkay5GblNlbGVjdCgwLCBjb21wb25lbnRzKS50b1N0cmluZygpO1xuICAgIGNvbnN0IGltYWdlVGFnID0gbmV3IGNkay5GblNlbGVjdCgxLCBjb21wb25lbnRzKS50b1N0cmluZygpO1xuXG4gICAgLy8gUmVxdWlyZSB0aGF0IHJlcG9zaXRvcnkgYWRvcHRpb24gaGFwcGVucyBmaXJzdCwgc28gd2Ugcm91dGUgdGhlXG4gICAgLy8gaW5wdXQgQVJOIGludG8gdGhlIEN1c3RvbSBSZXNvdXJjZSBhbmQgdGhlbiBnZXQgdGhlIFVSSSB3aGljaCB3ZSB1c2UgdG9cbiAgICAvLyByZWZlciB0byB0aGUgaW1hZ2UgRlJPTSB0aGUgQ3VzdG9tIFJlc291cmNlLlxuICAgIC8vXG4gICAgLy8gSWYgYWRvcHRpb24gZmFpbHMgKGJlY2F1c2UgdGhlIHJlcG9zaXRvcnkgbWlnaHQgYmUgdHdpY2UtYWRvcHRlZCksIHdlXG4gICAgLy8gaGF2ZW4ndCBhbHJlYWR5IHN0YXJ0ZWQgdXNpbmcgdGhlIGltYWdlLlxuICAgIHRoaXMucmVwb3NpdG9yeSA9IG5ldyBBZG9wdGVkUmVwb3NpdG9yeSh0aGlzLCAnQWRvcHRSZXBvc2l0b3J5JywgeyByZXBvc2l0b3J5TmFtZSB9KTtcbiAgICB0aGlzLmltYWdlVXJpID0gdGhpcy5yZXBvc2l0b3J5LnJlcG9zaXRvcnlVcmlGb3JUYWcoaW1hZ2VUYWcpO1xuICB9XG59XG4iXX0=
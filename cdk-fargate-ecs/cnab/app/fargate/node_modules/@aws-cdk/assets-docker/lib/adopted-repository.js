"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cfn = require("@aws-cdk/aws-cloudformation");
const ecr = require("@aws-cdk/aws-ecr");
const iam = require("@aws-cdk/aws-iam");
const lambda = require("@aws-cdk/aws-lambda");
const path = require("path");
/**
 * An internal class used to adopt an ECR repository used for the locally built
 * image into the stack.
 *
 * Since the repository is not created by the stack (but by the CDK toolkit),
 * adopting will make the repository "owned" by the stack. It will be cleaned
 * up when the stack gets deleted, to avoid leaving orphaned repositories on
 * stack cleanup.
 */
class AdoptedRepository extends ecr.RepositoryBase {
    constructor(parent, id, props) {
        super(parent, id);
        this.policyDocument = new iam.PolicyDocument();
        const fn = new lambda.SingletonFunction(this, 'Function', {
            runtime: lambda.Runtime.NodeJS810,
            lambdaPurpose: 'AdoptEcrRepository',
            handler: 'handler.handler',
            code: lambda.Code.asset(path.join(__dirname, 'adopt-repository')),
            uuid: 'dbc60def-c595-44bc-aa5c-28c95d68f62c',
            timeout: 300
        });
        fn.addToRolePolicy(new iam.PolicyStatement()
            .addResource(ecr.Repository.arnForLocalRepository(props.repositoryName))
            .addActions('ecr:GetRepositoryPolicy', 'ecr:SetRepositoryPolicy', 'ecr:DeleteRepository', 'ecr:ListImages', 'ecr:BatchDeleteImage'));
        const adopter = new cfn.CustomResource(this, 'Resource', {
            resourceType: 'Custom::ECRAdoptedRepository',
            lambdaProvider: fn,
            properties: {
                RepositoryName: props.repositoryName,
                PolicyDocument: this.policyDocument
            }
        });
        // we use the Fn::GetAtt with the RepositoryName returned by the custom
        // resource in order to implicitly create a dependency between consumers
        // and the custom resource.
        this.repositoryName = adopter.getAtt('RepositoryName').toString();
        // this this repository is "local" to the stack (in the same region/account)
        // we can render it's ARN from it's name.
        this.repositoryArn = ecr.Repository.arnForLocalRepository(this.repositoryName);
    }
    /**
     * Adds a statement to the repository resource policy.
     *
     * Contrary to normal imported repositories, which no-op here, we can
     * use the custom resource to modify the ECR resource policy if needed.
     */
    addToResourcePolicy(statement) {
        this.policyDocument.addStatement(statement);
    }
}
exports.AdoptedRepository = AdoptedRepository;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRvcHRlZC1yZXBvc2l0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWRvcHRlZC1yZXBvc2l0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbURBQW9EO0FBQ3BELHdDQUF5QztBQUN6Qyx3Q0FBeUM7QUFDekMsOENBQStDO0FBRS9DLDZCQUE4QjtBQVc5Qjs7Ozs7Ozs7R0FRRztBQUNILE1BQWEsaUJBQWtCLFNBQVEsR0FBRyxDQUFDLGNBQWM7SUFNdkQsWUFBWSxNQUFxQixFQUFFLEVBQVUsRUFBRSxLQUE2QjtRQUMxRSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBSEgsbUJBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUt6RCxNQUFNLEVBQUUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQ3hELE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVM7WUFDakMsYUFBYSxFQUFFLG9CQUFvQjtZQUNuQyxPQUFPLEVBQUUsaUJBQWlCO1lBQzFCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1lBQ2pFLElBQUksRUFBRSxzQ0FBc0M7WUFDNUMsT0FBTyxFQUFFLEdBQUc7U0FDYixDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRTthQUN6QyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7YUFDdkUsVUFBVSxDQUNULHlCQUF5QixFQUN6Qix5QkFBeUIsRUFDekIsc0JBQXNCLEVBQ3RCLGdCQUFnQixFQUNoQixzQkFBc0IsQ0FDdkIsQ0FBQyxDQUFDO1FBRUwsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDdkQsWUFBWSxFQUFFLDhCQUE4QjtZQUM1QyxjQUFjLEVBQUUsRUFBRTtZQUNsQixVQUFVLEVBQUU7Z0JBQ1YsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO2dCQUNwQyxjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7YUFDcEM7U0FDRixDQUFDLENBQUM7UUFFSCx1RUFBdUU7UUFDdkUsd0VBQXdFO1FBQ3hFLDJCQUEyQjtRQUMzQixJQUFJLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVsRSw0RUFBNEU7UUFDNUUseUNBQXlDO1FBQ3pDLElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksbUJBQW1CLENBQUMsU0FBOEI7UUFDdkQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDOUMsQ0FBQztDQUNGO0FBeERELDhDQXdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjZm4gPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtY2xvdWRmb3JtYXRpb24nKTtcbmltcG9ydCBlY3IgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtZWNyJyk7XG5pbXBvcnQgaWFtID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWlhbScpO1xuaW1wb3J0IGxhbWJkYSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1sYW1iZGEnKTtcbmltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5pbnRlcmZhY2UgQWRvcHRlZFJlcG9zaXRvcnlQcm9wcyB7XG4gIC8qKlxuICAgKiBBbiBFQ1IgcmVwb3NpdG9yeSB0byBhZG9wdC4gT25jZSBhZG9wdGVkLCB0aGUgcmVwb3NpdG9yeSB3aWxsXG4gICAqIHByYWN0aWNhbGx5IGJlY29tZSBwYXJ0IG9mIHRoaXMgc3RhY2ssIHNvIGl0IHdpbGwgYmUgcmVtb3ZlZCB3aGVuXG4gICAqIHRoZSBzdGFjayBpcyBkZWxldGVkLlxuICAgKi9cbiAgcmVwb3NpdG9yeU5hbWU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBBbiBpbnRlcm5hbCBjbGFzcyB1c2VkIHRvIGFkb3B0IGFuIEVDUiByZXBvc2l0b3J5IHVzZWQgZm9yIHRoZSBsb2NhbGx5IGJ1aWx0XG4gKiBpbWFnZSBpbnRvIHRoZSBzdGFjay5cbiAqXG4gKiBTaW5jZSB0aGUgcmVwb3NpdG9yeSBpcyBub3QgY3JlYXRlZCBieSB0aGUgc3RhY2sgKGJ1dCBieSB0aGUgQ0RLIHRvb2xraXQpLFxuICogYWRvcHRpbmcgd2lsbCBtYWtlIHRoZSByZXBvc2l0b3J5IFwib3duZWRcIiBieSB0aGUgc3RhY2suIEl0IHdpbGwgYmUgY2xlYW5lZFxuICogdXAgd2hlbiB0aGUgc3RhY2sgZ2V0cyBkZWxldGVkLCB0byBhdm9pZCBsZWF2aW5nIG9ycGhhbmVkIHJlcG9zaXRvcmllcyBvblxuICogc3RhY2sgY2xlYW51cC5cbiAqL1xuZXhwb3J0IGNsYXNzIEFkb3B0ZWRSZXBvc2l0b3J5IGV4dGVuZHMgZWNyLlJlcG9zaXRvcnlCYXNlIHtcbiAgcHVibGljIHJlYWRvbmx5IHJlcG9zaXRvcnlOYW1lOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSByZXBvc2l0b3J5QXJuOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBwb2xpY3lEb2N1bWVudCA9IG5ldyBpYW0uUG9saWN5RG9jdW1lbnQoKTtcblxuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBZG9wdGVkUmVwb3NpdG9yeVByb3BzKSB7XG4gICAgc3VwZXIocGFyZW50LCBpZCk7XG5cbiAgICBjb25zdCBmbiA9IG5ldyBsYW1iZGEuU2luZ2xldG9uRnVuY3Rpb24odGhpcywgJ0Z1bmN0aW9uJywge1xuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTm9kZUpTODEwLFxuICAgICAgbGFtYmRhUHVycG9zZTogJ0Fkb3B0RWNyUmVwb3NpdG9yeScsXG4gICAgICBoYW5kbGVyOiAnaGFuZGxlci5oYW5kbGVyJyxcbiAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmFzc2V0KHBhdGguam9pbihfX2Rpcm5hbWUsICdhZG9wdC1yZXBvc2l0b3J5JykpLFxuICAgICAgdXVpZDogJ2RiYzYwZGVmLWM1OTUtNDRiYy1hYTVjLTI4Yzk1ZDY4ZjYyYycsXG4gICAgICB0aW1lb3V0OiAzMDBcbiAgICB9KTtcblxuICAgIGZuLmFkZFRvUm9sZVBvbGljeShuZXcgaWFtLlBvbGljeVN0YXRlbWVudCgpXG4gICAgICAuYWRkUmVzb3VyY2UoZWNyLlJlcG9zaXRvcnkuYXJuRm9yTG9jYWxSZXBvc2l0b3J5KHByb3BzLnJlcG9zaXRvcnlOYW1lKSlcbiAgICAgIC5hZGRBY3Rpb25zKFxuICAgICAgICAnZWNyOkdldFJlcG9zaXRvcnlQb2xpY3knLFxuICAgICAgICAnZWNyOlNldFJlcG9zaXRvcnlQb2xpY3knLFxuICAgICAgICAnZWNyOkRlbGV0ZVJlcG9zaXRvcnknLFxuICAgICAgICAnZWNyOkxpc3RJbWFnZXMnLFxuICAgICAgICAnZWNyOkJhdGNoRGVsZXRlSW1hZ2UnXG4gICAgICApKTtcblxuICAgIGNvbnN0IGFkb3B0ZXIgPSBuZXcgY2ZuLkN1c3RvbVJlc291cmNlKHRoaXMsICdSZXNvdXJjZScsIHtcbiAgICAgIHJlc291cmNlVHlwZTogJ0N1c3RvbTo6RUNSQWRvcHRlZFJlcG9zaXRvcnknLFxuICAgICAgbGFtYmRhUHJvdmlkZXI6IGZuLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBSZXBvc2l0b3J5TmFtZTogcHJvcHMucmVwb3NpdG9yeU5hbWUsXG4gICAgICAgIFBvbGljeURvY3VtZW50OiB0aGlzLnBvbGljeURvY3VtZW50XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyB3ZSB1c2UgdGhlIEZuOjpHZXRBdHQgd2l0aCB0aGUgUmVwb3NpdG9yeU5hbWUgcmV0dXJuZWQgYnkgdGhlIGN1c3RvbVxuICAgIC8vIHJlc291cmNlIGluIG9yZGVyIHRvIGltcGxpY2l0bHkgY3JlYXRlIGEgZGVwZW5kZW5jeSBiZXR3ZWVuIGNvbnN1bWVyc1xuICAgIC8vIGFuZCB0aGUgY3VzdG9tIHJlc291cmNlLlxuICAgIHRoaXMucmVwb3NpdG9yeU5hbWUgPSBhZG9wdGVyLmdldEF0dCgnUmVwb3NpdG9yeU5hbWUnKS50b1N0cmluZygpO1xuXG4gICAgLy8gdGhpcyB0aGlzIHJlcG9zaXRvcnkgaXMgXCJsb2NhbFwiIHRvIHRoZSBzdGFjayAoaW4gdGhlIHNhbWUgcmVnaW9uL2FjY291bnQpXG4gICAgLy8gd2UgY2FuIHJlbmRlciBpdCdzIEFSTiBmcm9tIGl0J3MgbmFtZS5cbiAgICB0aGlzLnJlcG9zaXRvcnlBcm4gPSBlY3IuUmVwb3NpdG9yeS5hcm5Gb3JMb2NhbFJlcG9zaXRvcnkodGhpcy5yZXBvc2l0b3J5TmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIHN0YXRlbWVudCB0byB0aGUgcmVwb3NpdG9yeSByZXNvdXJjZSBwb2xpY3kuXG4gICAqXG4gICAqIENvbnRyYXJ5IHRvIG5vcm1hbCBpbXBvcnRlZCByZXBvc2l0b3JpZXMsIHdoaWNoIG5vLW9wIGhlcmUsIHdlIGNhblxuICAgKiB1c2UgdGhlIGN1c3RvbSByZXNvdXJjZSB0byBtb2RpZnkgdGhlIEVDUiByZXNvdXJjZSBwb2xpY3kgaWYgbmVlZGVkLlxuICAgKi9cbiAgcHVibGljIGFkZFRvUmVzb3VyY2VQb2xpY3koc3RhdGVtZW50OiBpYW0uUG9saWN5U3RhdGVtZW50KSB7XG4gICAgdGhpcy5wb2xpY3lEb2N1bWVudC5hZGRTdGF0ZW1lbnQoc3RhdGVtZW50KTtcbiAgfVxufVxuIl19
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const stepfunctions = require("../lib");
class JobPollerStack extends cdk.Stack {
    constructor(parent, id, props = {}) {
        super(parent, id, props);
        const submitJobActivity = new stepfunctions.Activity(this, 'SubmitJob');
        const checkJobActivity = new stepfunctions.Activity(this, 'CheckJob');
        const submitJob = new stepfunctions.Task(this, 'Submit Job', {
            resource: submitJobActivity,
            resultPath: '$.guid',
        });
        const waitX = new stepfunctions.Wait(this, 'Wait X Seconds', { secondsPath: '$.wait_time' });
        const getStatus = new stepfunctions.Task(this, 'Get Job Status', {
            resource: checkJobActivity,
            inputPath: '$.guid',
            resultPath: '$.status',
        });
        const isComplete = new stepfunctions.Choice(this, 'Job Complete?');
        const jobFailed = new stepfunctions.Fail(this, 'Job Failed', {
            cause: 'AWS Batch Job Failed',
            error: 'DescribeJob returned FAILED',
        });
        const finalStatus = new stepfunctions.Task(this, 'Get Final Job Status', {
            resource: checkJobActivity,
            inputPath: '$.guid',
        });
        const chain = stepfunctions.Chain
            .start(submitJob)
            .next(waitX)
            .next(getStatus)
            .next(isComplete
            .when(stepfunctions.Condition.stringEquals('$.status', 'FAILED'), jobFailed)
            .when(stepfunctions.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)
            .otherwise(waitX));
        new stepfunctions.StateMachine(this, 'StateMachine', {
            definition: chain,
            timeoutSec: 30
        });
    }
}
const app = new cdk.App();
new JobPollerStack(app, 'aws-stepfunctions-integ');
app.run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuam9iLXBvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmpvYi1wb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvQ0FBc0M7QUFDdEMsd0NBQXlDO0FBRXpDLE1BQU0sY0FBZSxTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBQ2xDLFlBQVksTUFBZSxFQUFFLEVBQVUsRUFBRSxRQUF3QixFQUFFO1FBQy9ELEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXpCLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztRQUN4RSxNQUFNLGdCQUFnQixHQUFHLElBQUksYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFdEUsTUFBTSxTQUFTLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUU7WUFDekQsUUFBUSxFQUFFLGlCQUFpQjtZQUMzQixVQUFVLEVBQUUsUUFBUTtTQUN2QixDQUFDLENBQUM7UUFDSCxNQUFNLEtBQUssR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFDN0YsTUFBTSxTQUFTLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRTtZQUM3RCxRQUFRLEVBQUUsZ0JBQWdCO1lBQzFCLFNBQVMsRUFBRSxRQUFRO1lBQ25CLFVBQVUsRUFBRSxVQUFVO1NBQ3pCLENBQUMsQ0FBQztRQUNILE1BQU0sVUFBVSxHQUFHLElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDbkUsTUFBTSxTQUFTLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUU7WUFDekQsS0FBSyxFQUFFLHNCQUFzQjtZQUM3QixLQUFLLEVBQUUsNkJBQTZCO1NBQ3ZDLENBQUMsQ0FBQztRQUNILE1BQU0sV0FBVyxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsc0JBQXNCLEVBQUU7WUFDckUsUUFBUSxFQUFFLGdCQUFnQjtZQUMxQixTQUFTLEVBQUUsUUFBUTtTQUN0QixDQUFDLENBQUM7UUFFSCxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsS0FBSzthQUM1QixLQUFLLENBQUMsU0FBUyxDQUFDO2FBQ2hCLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDWCxJQUFJLENBQUMsU0FBUyxDQUFDO2FBQ2YsSUFBSSxDQUFDLFVBQVU7YUFDWCxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxFQUFFLFNBQVMsQ0FBQzthQUMzRSxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQzthQUNoRixTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUUzQixJQUFJLGFBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUNqRCxVQUFVLEVBQUUsS0FBSztZQUNqQixVQUFVLEVBQUUsRUFBRTtTQUNqQixDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixJQUFJLGNBQWMsQ0FBQyxHQUFHLEVBQUUseUJBQXlCLENBQUMsQ0FBQztBQUNuRCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2RrID0gcmVxdWlyZSggJ0Bhd3MtY2RrL2NkaycpO1xuaW1wb3J0IHN0ZXBmdW5jdGlvbnMgPSByZXF1aXJlKCcuLi9saWInKTtcblxuY2xhc3MgSm9iUG9sbGVyU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudDogY2RrLkFwcCwgaWQ6IHN0cmluZywgcHJvcHM6IGNkay5TdGFja1Byb3BzID0ge30pIHtcbiAgICAgICAgc3VwZXIocGFyZW50LCBpZCwgcHJvcHMpO1xuXG4gICAgICAgIGNvbnN0IHN1Ym1pdEpvYkFjdGl2aXR5ID0gbmV3IHN0ZXBmdW5jdGlvbnMuQWN0aXZpdHkodGhpcywgJ1N1Ym1pdEpvYicpO1xuICAgICAgICBjb25zdCBjaGVja0pvYkFjdGl2aXR5ID0gbmV3IHN0ZXBmdW5jdGlvbnMuQWN0aXZpdHkodGhpcywgJ0NoZWNrSm9iJyk7XG5cbiAgICAgICAgY29uc3Qgc3VibWl0Sm9iID0gbmV3IHN0ZXBmdW5jdGlvbnMuVGFzayh0aGlzLCAnU3VibWl0IEpvYicsIHtcbiAgICAgICAgICAgIHJlc291cmNlOiBzdWJtaXRKb2JBY3Rpdml0eSxcbiAgICAgICAgICAgIHJlc3VsdFBhdGg6ICckLmd1aWQnLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgd2FpdFggPSBuZXcgc3RlcGZ1bmN0aW9ucy5XYWl0KHRoaXMsICdXYWl0IFggU2Vjb25kcycsIHsgc2Vjb25kc1BhdGg6ICckLndhaXRfdGltZScgfSk7XG4gICAgICAgIGNvbnN0IGdldFN0YXR1cyA9IG5ldyBzdGVwZnVuY3Rpb25zLlRhc2sodGhpcywgJ0dldCBKb2IgU3RhdHVzJywge1xuICAgICAgICAgICAgcmVzb3VyY2U6IGNoZWNrSm9iQWN0aXZpdHksXG4gICAgICAgICAgICBpbnB1dFBhdGg6ICckLmd1aWQnLFxuICAgICAgICAgICAgcmVzdWx0UGF0aDogJyQuc3RhdHVzJyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGlzQ29tcGxldGUgPSBuZXcgc3RlcGZ1bmN0aW9ucy5DaG9pY2UodGhpcywgJ0pvYiBDb21wbGV0ZT8nKTtcbiAgICAgICAgY29uc3Qgam9iRmFpbGVkID0gbmV3IHN0ZXBmdW5jdGlvbnMuRmFpbCh0aGlzLCAnSm9iIEZhaWxlZCcsIHtcbiAgICAgICAgICAgIGNhdXNlOiAnQVdTIEJhdGNoIEpvYiBGYWlsZWQnLFxuICAgICAgICAgICAgZXJyb3I6ICdEZXNjcmliZUpvYiByZXR1cm5lZCBGQUlMRUQnLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZmluYWxTdGF0dXMgPSBuZXcgc3RlcGZ1bmN0aW9ucy5UYXNrKHRoaXMsICdHZXQgRmluYWwgSm9iIFN0YXR1cycsIHtcbiAgICAgICAgICAgIHJlc291cmNlOiBjaGVja0pvYkFjdGl2aXR5LFxuICAgICAgICAgICAgaW5wdXRQYXRoOiAnJC5ndWlkJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgY2hhaW4gPSBzdGVwZnVuY3Rpb25zLkNoYWluXG4gICAgICAgICAgICAuc3RhcnQoc3VibWl0Sm9iKVxuICAgICAgICAgICAgLm5leHQod2FpdFgpXG4gICAgICAgICAgICAubmV4dChnZXRTdGF0dXMpXG4gICAgICAgICAgICAubmV4dChpc0NvbXBsZXRlXG4gICAgICAgICAgICAgICAgLndoZW4oc3RlcGZ1bmN0aW9ucy5Db25kaXRpb24uc3RyaW5nRXF1YWxzKCckLnN0YXR1cycsICdGQUlMRUQnKSwgam9iRmFpbGVkKVxuICAgICAgICAgICAgICAgIC53aGVuKHN0ZXBmdW5jdGlvbnMuQ29uZGl0aW9uLnN0cmluZ0VxdWFscygnJC5zdGF0dXMnLCAnU1VDQ0VFREVEJyksIGZpbmFsU3RhdHVzKVxuICAgICAgICAgICAgICAgIC5vdGhlcndpc2Uod2FpdFgpKTtcblxuICAgICAgICBuZXcgc3RlcGZ1bmN0aW9ucy5TdGF0ZU1hY2hpbmUodGhpcywgJ1N0YXRlTWFjaGluZScsIHtcbiAgICAgICAgICAgIGRlZmluaXRpb246IGNoYWluLFxuICAgICAgICAgICAgdGltZW91dFNlYzogMzBcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xubmV3IEpvYlBvbGxlclN0YWNrKGFwcCwgJ2F3cy1zdGVwZnVuY3Rpb25zLWludGVnJyk7XG5hcHAucnVuKCk7Il19
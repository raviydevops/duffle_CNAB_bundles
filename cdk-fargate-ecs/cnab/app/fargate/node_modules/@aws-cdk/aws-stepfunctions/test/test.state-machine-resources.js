"use strict";
const assert_1 = require("@aws-cdk/assert");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const stepfunctions = require("../lib");
class FakeResource {
    asStepFunctionsTaskResource(_callingTask) {
        const resourceArn = 'resource';
        return {
            resourceArn,
            policyStatements: [new iam.PolicyStatement()
                    .addAction('resource:Everything')
                    .addResource('resource')
            ],
            metricPrefixSingular: 'FakeResource',
            metricPrefixPlural: 'FakeResources',
            metricDimensions: { ResourceArn: resourceArn },
        };
    }
}
module.exports = {
    'Tasks can add permissions to the execution role'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const task = new stepfunctions.Task(stack, 'Task', {
            resource: new FakeResource(),
        });
        // WHEN
        new stepfunctions.StateMachine(stack, 'SM', {
            definition: task
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            PolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                    {
                        Action: "resource:Everything",
                        Effect: "Allow",
                        Resource: "resource"
                    }
                ],
            }
        }));
        test.done();
    },
    'Tasks hidden inside a Parallel state are also included'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const task = new stepfunctions.Task(stack, 'Task', {
            resource: new FakeResource(),
        });
        const para = new stepfunctions.Parallel(stack, 'Para');
        para.branch(task);
        // WHEN
        new stepfunctions.StateMachine(stack, 'SM', {
            definition: para
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            PolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                    {
                        Action: "resource:Everything",
                        Effect: "Allow",
                        Resource: "resource"
                    }
                ],
            }
        }));
        test.done();
    },
    'Task metrics use values returned from resource'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const task = new stepfunctions.Task(stack, 'Task', { resource: new FakeResource() });
        // THEN
        const sharedMetric = {
            periodSec: 300,
            namespace: 'AWS/States',
            dimensions: { ResourceArn: 'resource' },
        };
        test.deepEqual(cdk.resolve(task.metricRunTime()), Object.assign({}, sharedMetric, { metricName: 'FakeResourceRunTime', statistic: 'Average' }));
        test.deepEqual(cdk.resolve(task.metricFailed()), Object.assign({}, sharedMetric, { metricName: 'FakeResourcesFailed', statistic: 'Sum' }));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5zdGF0ZS1tYWNoaW5lLXJlc291cmNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3Quc3RhdGUtbWFjaGluZS1yZXNvdXJjZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRDQUF1RDtBQUN2RCx3Q0FBeUM7QUFDekMsb0NBQXFDO0FBRXJDLHdDQUF5QztBQTZGekMsTUFBTSxZQUFZO0lBQ1AsMkJBQTJCLENBQUMsWUFBZ0M7UUFDL0QsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDO1FBRS9CLE9BQU87WUFDSCxXQUFXO1lBQ1gsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxlQUFlLEVBQUU7cUJBQ3ZDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQztxQkFDaEMsV0FBVyxDQUFDLFVBQVUsQ0FBQzthQUMzQjtZQUNELG9CQUFvQixFQUFFLGNBQWM7WUFDcEMsa0JBQWtCLEVBQUUsZUFBZTtZQUNuQyxnQkFBZ0IsRUFBRSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUU7U0FDaEQsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQTFHRCxpQkFBUztJQUNMLGlEQUFpRCxDQUFDLElBQVU7UUFDeEQsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzlCLE1BQU0sSUFBSSxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO1lBQy9DLFFBQVEsRUFBRSxJQUFJLFlBQVksRUFBRTtTQUMvQixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsSUFBSSxhQUFhLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUU7WUFDeEMsVUFBVSxFQUFFLElBQUk7U0FDbkIsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQyxrQkFBa0IsRUFBRTtZQUM5QyxjQUFjLEVBQUU7Z0JBQ1osT0FBTyxFQUFFLFlBQVk7Z0JBQ3JCLFNBQVMsRUFBRTtvQkFDUDt3QkFDSSxNQUFNLEVBQUUscUJBQXFCO3dCQUM3QixNQUFNLEVBQUUsT0FBTzt3QkFDZixRQUFRLEVBQUUsVUFBVTtxQkFDdkI7aUJBQ0o7YUFDSjtTQUNKLENBQUMsQ0FBQyxDQUFDO1FBRUosSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCx3REFBd0QsQ0FBQyxJQUFVO1FBQy9ELFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixNQUFNLElBQUksR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtZQUMvQyxRQUFRLEVBQUUsSUFBSSxZQUFZLEVBQUU7U0FDL0IsQ0FBQyxDQUFDO1FBRUgsTUFBTSxJQUFJLEdBQUcsSUFBSSxhQUFhLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWxCLE9BQU87UUFDUCxJQUFJLGFBQWEsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRTtZQUN4QyxVQUFVLEVBQUUsSUFBSTtTQUNuQixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxxQkFBWSxDQUFDLGtCQUFrQixFQUFFO1lBQzlDLGNBQWMsRUFBRTtnQkFDWixPQUFPLEVBQUUsWUFBWTtnQkFDckIsU0FBUyxFQUFFO29CQUNQO3dCQUNJLE1BQU0sRUFBRSxxQkFBcUI7d0JBQzdCLE1BQU0sRUFBRSxPQUFPO3dCQUNmLFFBQVEsRUFBRSxVQUFVO3FCQUN2QjtpQkFDSjthQUNKO1NBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELGdEQUFnRCxDQUFDLElBQVU7UUFDdkQsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTlCLE9BQU87UUFDUCxNQUFNLElBQUksR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVyRixPQUFPO1FBQ1AsTUFBTSxZQUFZLEdBQUc7WUFDakIsU0FBUyxFQUFFLEdBQUc7WUFDZCxTQUFTLEVBQUUsWUFBWTtZQUN2QixVQUFVLEVBQUUsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFO1NBQzFDLENBQUM7UUFDRixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLG9CQUN6QyxZQUFZLElBQ2YsVUFBVSxFQUFFLHFCQUFxQixFQUNqQyxTQUFTLEVBQUUsU0FBUyxJQUN0QixDQUFDO1FBRUgsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxvQkFDeEMsWUFBWSxJQUNmLFVBQVUsRUFBRSxxQkFBcUIsRUFDakMsU0FBUyxFQUFFLEtBQUssSUFDbEIsQ0FBQztRQUVILElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoQixDQUFDO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4cGVjdCwgaGF2ZVJlc291cmNlIH0gZnJvbSAnQGF3cy1jZGsvYXNzZXJ0JztcbmltcG9ydCBpYW0gPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtaWFtJyk7XG5pbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY2RrJyk7XG5pbXBvcnQgeyBUZXN0IH0gZnJvbSAnbm9kZXVuaXQnO1xuaW1wb3J0IHN0ZXBmdW5jdGlvbnMgPSByZXF1aXJlKCcuLi9saWInKTtcblxuZXhwb3J0ID0ge1xuICAgICdUYXNrcyBjYW4gYWRkIHBlcm1pc3Npb25zIHRvIHRoZSBleGVjdXRpb24gcm9sZScodGVzdDogVGVzdCkge1xuICAgICAgICAvLyBHSVZFTlxuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgICAgY29uc3QgdGFzayA9IG5ldyBzdGVwZnVuY3Rpb25zLlRhc2soc3RhY2ssICdUYXNrJywge1xuICAgICAgICAgICAgcmVzb3VyY2U6IG5ldyBGYWtlUmVzb3VyY2UoKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gV0hFTlxuICAgICAgICBuZXcgc3RlcGZ1bmN0aW9ucy5TdGF0ZU1hY2hpbmUoc3RhY2ssICdTTScsIHtcbiAgICAgICAgICAgIGRlZmluaXRpb246IHRhc2tcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVEhFTlxuICAgICAgICBleHBlY3Qoc3RhY2spLnRvKGhhdmVSZXNvdXJjZSgnQVdTOjpJQU06OlBvbGljeScsIHtcbiAgICAgICAgICAgIFBvbGljeURvY3VtZW50OiB7XG4gICAgICAgICAgICAgICAgVmVyc2lvbjogJzIwMTItMTAtMTcnLFxuICAgICAgICAgICAgICAgIFN0YXRlbWVudDogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBY3Rpb246IFwicmVzb3VyY2U6RXZlcnl0aGluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgRWZmZWN0OiBcIkFsbG93XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBSZXNvdXJjZTogXCJyZXNvdXJjZVwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG5cbiAgICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgICdUYXNrcyBoaWRkZW4gaW5zaWRlIGEgUGFyYWxsZWwgc3RhdGUgYXJlIGFsc28gaW5jbHVkZWQnKHRlc3Q6IFRlc3QpIHtcbiAgICAgICAgLy8gR0lWRU5cbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICAgIGNvbnN0IHRhc2sgPSBuZXcgc3RlcGZ1bmN0aW9ucy5UYXNrKHN0YWNrLCAnVGFzaycsIHtcbiAgICAgICAgICAgIHJlc291cmNlOiBuZXcgRmFrZVJlc291cmNlKCksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHBhcmEgPSBuZXcgc3RlcGZ1bmN0aW9ucy5QYXJhbGxlbChzdGFjaywgJ1BhcmEnKTtcbiAgICAgICAgcGFyYS5icmFuY2godGFzayk7XG5cbiAgICAgICAgLy8gV0hFTlxuICAgICAgICBuZXcgc3RlcGZ1bmN0aW9ucy5TdGF0ZU1hY2hpbmUoc3RhY2ssICdTTScsIHtcbiAgICAgICAgICAgIGRlZmluaXRpb246IHBhcmFcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVEhFTlxuICAgICAgICBleHBlY3Qoc3RhY2spLnRvKGhhdmVSZXNvdXJjZSgnQVdTOjpJQU06OlBvbGljeScsIHtcbiAgICAgICAgICAgIFBvbGljeURvY3VtZW50OiB7XG4gICAgICAgICAgICAgICAgVmVyc2lvbjogJzIwMTItMTAtMTcnLFxuICAgICAgICAgICAgICAgIFN0YXRlbWVudDogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBY3Rpb246IFwicmVzb3VyY2U6RXZlcnl0aGluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgRWZmZWN0OiBcIkFsbG93XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBSZXNvdXJjZTogXCJyZXNvdXJjZVwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG5cbiAgICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgICdUYXNrIG1ldHJpY3MgdXNlIHZhbHVlcyByZXR1cm5lZCBmcm9tIHJlc291cmNlJyh0ZXN0OiBUZXN0KSB7XG4gICAgICAgIC8vIEdJVkVOXG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuXG4gICAgICAgIC8vIFdIRU5cbiAgICAgICAgY29uc3QgdGFzayA9IG5ldyBzdGVwZnVuY3Rpb25zLlRhc2soc3RhY2ssICdUYXNrJywgeyByZXNvdXJjZTogbmV3IEZha2VSZXNvdXJjZSgpIH0pO1xuXG4gICAgICAgIC8vIFRIRU5cbiAgICAgICAgY29uc3Qgc2hhcmVkTWV0cmljID0ge1xuICAgICAgICAgICAgcGVyaW9kU2VjOiAzMDAsXG4gICAgICAgICAgICBuYW1lc3BhY2U6ICdBV1MvU3RhdGVzJyxcbiAgICAgICAgICAgIGRpbWVuc2lvbnM6IHsgUmVzb3VyY2VBcm46ICdyZXNvdXJjZScgfSxcbiAgICAgICAgfTtcbiAgICAgICAgdGVzdC5kZWVwRXF1YWwoY2RrLnJlc29sdmUodGFzay5tZXRyaWNSdW5UaW1lKCkpLCB7XG4gICAgICAgICAgICAuLi5zaGFyZWRNZXRyaWMsXG4gICAgICAgICAgICBtZXRyaWNOYW1lOiAnRmFrZVJlc291cmNlUnVuVGltZScsXG4gICAgICAgICAgICBzdGF0aXN0aWM6ICdBdmVyYWdlJ1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0LmRlZXBFcXVhbChjZGsucmVzb2x2ZSh0YXNrLm1ldHJpY0ZhaWxlZCgpKSwge1xuICAgICAgICAgICAgLi4uc2hhcmVkTWV0cmljLFxuICAgICAgICAgICAgbWV0cmljTmFtZTogJ0Zha2VSZXNvdXJjZXNGYWlsZWQnLFxuICAgICAgICAgICAgc3RhdGlzdGljOiAnU3VtJ1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9XG59O1xuXG5jbGFzcyBGYWtlUmVzb3VyY2UgaW1wbGVtZW50cyBzdGVwZnVuY3Rpb25zLklTdGVwRnVuY3Rpb25zVGFza1Jlc291cmNlIHtcbiAgICBwdWJsaWMgYXNTdGVwRnVuY3Rpb25zVGFza1Jlc291cmNlKF9jYWxsaW5nVGFzazogc3RlcGZ1bmN0aW9ucy5UYXNrKTogc3RlcGZ1bmN0aW9ucy5TdGVwRnVuY3Rpb25zVGFza1Jlc291cmNlUHJvcHMge1xuICAgICAgICBjb25zdCByZXNvdXJjZUFybiA9ICdyZXNvdXJjZSc7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc291cmNlQXJuLFxuICAgICAgICAgICAgcG9saWN5U3RhdGVtZW50czogW25ldyBpYW0uUG9saWN5U3RhdGVtZW50KClcbiAgICAgICAgICAgICAgICAuYWRkQWN0aW9uKCdyZXNvdXJjZTpFdmVyeXRoaW5nJylcbiAgICAgICAgICAgICAgICAuYWRkUmVzb3VyY2UoJ3Jlc291cmNlJylcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBtZXRyaWNQcmVmaXhTaW5ndWxhcjogJ0Zha2VSZXNvdXJjZScsXG4gICAgICAgICAgICBtZXRyaWNQcmVmaXhQbHVyYWw6ICdGYWtlUmVzb3VyY2VzJyxcbiAgICAgICAgICAgIG1ldHJpY0RpbWVuc2lvbnM6IHsgUmVzb3VyY2VBcm46IHJlc291cmNlQXJuIH0sXG4gICAgICAgICB9O1xuICAgIH1cbn1cbiJdfQ==
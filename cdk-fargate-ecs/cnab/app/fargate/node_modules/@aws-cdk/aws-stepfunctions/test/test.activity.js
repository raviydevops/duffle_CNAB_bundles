"use strict";
const assert_1 = require("@aws-cdk/assert");
const cdk = require("@aws-cdk/cdk");
const stepfunctions = require("../lib");
module.exports = {
    'instantiate Activity'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new stepfunctions.Activity(stack, 'Activity');
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::StepFunctions::Activity', {
            Name: 'Activity'
        }));
        test.done();
    },
    'Activity can be used in a Task'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const activity = new stepfunctions.Activity(stack, 'Activity');
        const task = new stepfunctions.Task(stack, 'Task', {
            resource: activity
        });
        new stepfunctions.StateMachine(stack, 'SM', {
            definition: task
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::StepFunctions::StateMachine', {
            DefinitionString: {
                "Fn::Join": ["", [
                        "{\"StartAt\":\"Task\",\"States\":{\"Task\":{\"End\":true,\"Type\":\"Task\",\"Resource\":\"",
                        { Ref: "Activity04690B0A" },
                        "\"}}}"
                    ]]
            },
        }));
        test.done();
    },
    'Activity exposes metrics'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const activity = new stepfunctions.Activity(stack, 'Activity');
        // THEN
        const sharedMetric = {
            periodSec: 300,
            namespace: 'AWS/States',
            dimensions: { ActivityArn: { Ref: 'Activity04690B0A' } },
        };
        test.deepEqual(cdk.resolve(activity.metricRunTime()), Object.assign({}, sharedMetric, { metricName: 'ActivityRunTime', statistic: 'Average' }));
        test.deepEqual(cdk.resolve(activity.metricFailed()), Object.assign({}, sharedMetric, { metricName: 'ActivitiesFailed', statistic: 'Sum' }));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5hY3Rpdml0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3QuYWN0aXZpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRDQUF1RDtBQUN2RCxvQ0FBcUM7QUFFckMsd0NBQXlDO0FBRXpDLGlCQUFTO0lBQ0wsc0JBQXNCLENBQUMsSUFBVTtRQUM3QixRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFOUIsT0FBTztRQUNQLElBQUksYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFOUMsT0FBTztRQUNQLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQyw4QkFBOEIsRUFBRTtZQUMxRCxJQUFJLEVBQUUsVUFBVTtTQUNuQixDQUFDLENBQUMsQ0FBQztRQUVKLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRUQsZ0NBQWdDLENBQUMsSUFBVTtRQUN2QyxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFOUIsT0FBTztRQUNQLE1BQU0sUUFBUSxHQUFHLElBQUksYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDL0QsTUFBTSxJQUFJLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7WUFDL0MsUUFBUSxFQUFFLFFBQVE7U0FDckIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxhQUFhLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUU7WUFDeEMsVUFBVSxFQUFFLElBQUk7U0FDbkIsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQyxrQ0FBa0MsRUFBRTtZQUM5RCxnQkFBZ0IsRUFBRTtnQkFDZCxVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUU7d0JBQ2IsNEZBQTRGO3dCQUM1RixFQUFFLEdBQUcsRUFBRSxrQkFBa0IsRUFBRTt3QkFDM0IsT0FBTztxQkFFVixDQUFDO2FBQ0w7U0FDSixDQUFDLENBQUMsQ0FBQztRQUVKLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRUQsMEJBQTBCLENBQUMsSUFBVTtRQUNqQyxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFOUIsT0FBTztRQUNQLE1BQU0sUUFBUSxHQUFHLElBQUksYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFL0QsT0FBTztRQUNQLE1BQU0sWUFBWSxHQUFHO1lBQ2pCLFNBQVMsRUFBRSxHQUFHO1lBQ2QsU0FBUyxFQUFFLFlBQVk7WUFDdkIsVUFBVSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsR0FBRyxFQUFFLGtCQUFrQixFQUFFLEVBQUM7U0FDMUQsQ0FBQztRQUNGLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLENBQUMsb0JBQzdDLFlBQVksSUFDZixVQUFVLEVBQUUsaUJBQWlCLEVBQzdCLFNBQVMsRUFBRSxTQUFTLElBQ3RCLENBQUM7UUFFSCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDLG9CQUM1QyxZQUFZLElBQ2YsVUFBVSxFQUFFLGtCQUFrQixFQUM5QixTQUFTLEVBQUUsS0FBSyxJQUNsQixDQUFDO1FBRUgsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hCLENBQUM7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhwZWN0LCBoYXZlUmVzb3VyY2UgfSBmcm9tICdAYXdzLWNkay9hc3NlcnQnO1xuaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NkaycpO1xuaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCBzdGVwZnVuY3Rpb25zID0gcmVxdWlyZSgnLi4vbGliJyk7XG5cbmV4cG9ydCA9IHtcbiAgICAnaW5zdGFudGlhdGUgQWN0aXZpdHknKHRlc3Q6IFRlc3QpIHtcbiAgICAgICAgLy8gR0lWRU5cbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICAgICAgLy8gV0hFTlxuICAgICAgICBuZXcgc3RlcGZ1bmN0aW9ucy5BY3Rpdml0eShzdGFjaywgJ0FjdGl2aXR5Jyk7XG5cbiAgICAgICAgLy8gVEhFTlxuICAgICAgICBleHBlY3Qoc3RhY2spLnRvKGhhdmVSZXNvdXJjZSgnQVdTOjpTdGVwRnVuY3Rpb25zOjpBY3Rpdml0eScsIHtcbiAgICAgICAgICAgIE5hbWU6ICdBY3Rpdml0eSdcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAnQWN0aXZpdHkgY2FuIGJlIHVzZWQgaW4gYSBUYXNrJyh0ZXN0OiBUZXN0KSB7XG4gICAgICAgIC8vIEdJVkVOXG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuXG4gICAgICAgIC8vIFdIRU5cbiAgICAgICAgY29uc3QgYWN0aXZpdHkgPSBuZXcgc3RlcGZ1bmN0aW9ucy5BY3Rpdml0eShzdGFjaywgJ0FjdGl2aXR5Jyk7XG4gICAgICAgIGNvbnN0IHRhc2sgPSBuZXcgc3RlcGZ1bmN0aW9ucy5UYXNrKHN0YWNrLCAnVGFzaycsIHtcbiAgICAgICAgICAgIHJlc291cmNlOiBhY3Rpdml0eVxuICAgICAgICB9KTtcbiAgICAgICAgbmV3IHN0ZXBmdW5jdGlvbnMuU3RhdGVNYWNoaW5lKHN0YWNrLCAnU00nLCB7XG4gICAgICAgICAgICBkZWZpbml0aW9uOiB0YXNrXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFRIRU5cbiAgICAgICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6U3RlcEZ1bmN0aW9uczo6U3RhdGVNYWNoaW5lJywge1xuICAgICAgICAgICAgRGVmaW5pdGlvblN0cmluZzoge1xuICAgICAgICAgICAgICAgIFwiRm46OkpvaW5cIjogW1wiXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgXCJ7XFxcIlN0YXJ0QXRcXFwiOlxcXCJUYXNrXFxcIixcXFwiU3RhdGVzXFxcIjp7XFxcIlRhc2tcXFwiOntcXFwiRW5kXFxcIjp0cnVlLFxcXCJUeXBlXFxcIjpcXFwiVGFza1xcXCIsXFxcIlJlc291cmNlXFxcIjpcXFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIHsgUmVmOiBcIkFjdGl2aXR5MDQ2OTBCMEFcIiB9LFxuICAgICAgICAgICAgICAgICAgICBcIlxcXCJ9fX1cIlxuXG4gICAgICAgICAgICAgICAgXV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcblxuICAgICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9LFxuXG4gICAgJ0FjdGl2aXR5IGV4cG9zZXMgbWV0cmljcycodGVzdDogVGVzdCkge1xuICAgICAgICAvLyBHSVZFTlxuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAgICAgICAvLyBXSEVOXG4gICAgICAgIGNvbnN0IGFjdGl2aXR5ID0gbmV3IHN0ZXBmdW5jdGlvbnMuQWN0aXZpdHkoc3RhY2ssICdBY3Rpdml0eScpO1xuXG4gICAgICAgIC8vIFRIRU5cbiAgICAgICAgY29uc3Qgc2hhcmVkTWV0cmljID0ge1xuICAgICAgICAgICAgcGVyaW9kU2VjOiAzMDAsXG4gICAgICAgICAgICBuYW1lc3BhY2U6ICdBV1MvU3RhdGVzJyxcbiAgICAgICAgICAgIGRpbWVuc2lvbnM6IHsgQWN0aXZpdHlBcm46IHsgUmVmOiAnQWN0aXZpdHkwNDY5MEIwQScgfX0sXG4gICAgICAgIH07XG4gICAgICAgIHRlc3QuZGVlcEVxdWFsKGNkay5yZXNvbHZlKGFjdGl2aXR5Lm1ldHJpY1J1blRpbWUoKSksIHtcbiAgICAgICAgICAgIC4uLnNoYXJlZE1ldHJpYyxcbiAgICAgICAgICAgIG1ldHJpY05hbWU6ICdBY3Rpdml0eVJ1blRpbWUnLFxuICAgICAgICAgICAgc3RhdGlzdGljOiAnQXZlcmFnZSdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdC5kZWVwRXF1YWwoY2RrLnJlc29sdmUoYWN0aXZpdHkubWV0cmljRmFpbGVkKCkpLCB7XG4gICAgICAgICAgICAuLi5zaGFyZWRNZXRyaWMsXG4gICAgICAgICAgICBtZXRyaWNOYW1lOiAnQWN0aXZpdGllc0ZhaWxlZCcsXG4gICAgICAgICAgICBzdGF0aXN0aWM6ICdTdW0nXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH1cbn07Il19
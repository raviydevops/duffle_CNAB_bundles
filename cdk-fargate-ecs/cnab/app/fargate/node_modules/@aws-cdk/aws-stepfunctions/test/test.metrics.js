"use strict";
const cdk = require("@aws-cdk/cdk");
const stepfunctions = require("../lib");
module.exports = {
    'Activity Task metrics and Activity metrics are the same'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const activity = new stepfunctions.Activity(stack, 'Activity');
        const task = new stepfunctions.Task(stack, 'Task', { resource: activity });
        // WHEN
        const activityMetrics = [
            activity.metricFailed(),
            activity.metricHeartbeatTimedOut(),
            activity.metricRunTime(),
            activity.metricScheduled(),
            activity.metricScheduleTime(),
            activity.metricStarted(),
            activity.metricSucceeded(),
            activity.metricTime(),
            activity.metricTimedOut()
        ];
        const taskMetrics = [
            task.metricFailed(),
            task.metricHeartbeatTimedOut(),
            task.metricRunTime(),
            task.metricScheduled(),
            task.metricScheduleTime(),
            task.metricStarted(),
            task.metricSucceeded(),
            task.metricTime(),
            task.metricTimedOut(),
        ];
        // THEN
        for (let i = 0; i < activityMetrics.length; i++) {
            test.deepEqual(activityMetrics[i], taskMetrics[i]);
        }
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5tZXRyaWNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5tZXRyaWNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvQ0FBcUM7QUFFckMsd0NBQXlDO0FBRXpDLGlCQUFTO0lBQ0wseURBQXlELENBQUMsSUFBVTtRQUNoRSxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDOUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxhQUFhLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUMvRCxNQUFNLElBQUksR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBRTNFLE9BQU87UUFDUCxNQUFNLGVBQWUsR0FBRztZQUNwQixRQUFRLENBQUMsWUFBWSxFQUFFO1lBQ3ZCLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRTtZQUNsQyxRQUFRLENBQUMsYUFBYSxFQUFFO1lBQ3hCLFFBQVEsQ0FBQyxlQUFlLEVBQUU7WUFDMUIsUUFBUSxDQUFDLGtCQUFrQixFQUFFO1lBQzdCLFFBQVEsQ0FBQyxhQUFhLEVBQUU7WUFDeEIsUUFBUSxDQUFDLGVBQWUsRUFBRTtZQUMxQixRQUFRLENBQUMsVUFBVSxFQUFFO1lBQ3JCLFFBQVEsQ0FBQyxjQUFjLEVBQUU7U0FDNUIsQ0FBQztRQUVGLE1BQU0sV0FBVyxHQUFHO1lBQ2hCLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbkIsSUFBSSxDQUFDLHVCQUF1QixFQUFFO1lBQzlCLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDcEIsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN0QixJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDekIsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNwQixJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDakIsSUFBSSxDQUFDLGNBQWMsRUFBRTtTQUN4QixDQUFDO1FBRUYsT0FBTztRQUNQLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxlQUFlLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdDLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3REO1FBRUQsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hCLENBQUM7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NkaycpO1xuaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCBzdGVwZnVuY3Rpb25zID0gcmVxdWlyZSgnLi4vbGliJyk7XG5cbmV4cG9ydCA9IHtcbiAgICAnQWN0aXZpdHkgVGFzayBtZXRyaWNzIGFuZCBBY3Rpdml0eSBtZXRyaWNzIGFyZSB0aGUgc2FtZScodGVzdDogVGVzdCkge1xuICAgICAgICAvLyBHSVZFTlxuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgICAgY29uc3QgYWN0aXZpdHkgPSBuZXcgc3RlcGZ1bmN0aW9ucy5BY3Rpdml0eShzdGFjaywgJ0FjdGl2aXR5Jyk7XG4gICAgICAgIGNvbnN0IHRhc2sgPSBuZXcgc3RlcGZ1bmN0aW9ucy5UYXNrKHN0YWNrLCAnVGFzaycsIHsgcmVzb3VyY2U6IGFjdGl2aXR5IH0pO1xuXG4gICAgICAgIC8vIFdIRU5cbiAgICAgICAgY29uc3QgYWN0aXZpdHlNZXRyaWNzID0gW1xuICAgICAgICAgICAgYWN0aXZpdHkubWV0cmljRmFpbGVkKCksXG4gICAgICAgICAgICBhY3Rpdml0eS5tZXRyaWNIZWFydGJlYXRUaW1lZE91dCgpLFxuICAgICAgICAgICAgYWN0aXZpdHkubWV0cmljUnVuVGltZSgpLFxuICAgICAgICAgICAgYWN0aXZpdHkubWV0cmljU2NoZWR1bGVkKCksXG4gICAgICAgICAgICBhY3Rpdml0eS5tZXRyaWNTY2hlZHVsZVRpbWUoKSxcbiAgICAgICAgICAgIGFjdGl2aXR5Lm1ldHJpY1N0YXJ0ZWQoKSxcbiAgICAgICAgICAgIGFjdGl2aXR5Lm1ldHJpY1N1Y2NlZWRlZCgpLFxuICAgICAgICAgICAgYWN0aXZpdHkubWV0cmljVGltZSgpLFxuICAgICAgICAgICAgYWN0aXZpdHkubWV0cmljVGltZWRPdXQoKVxuICAgICAgICBdO1xuXG4gICAgICAgIGNvbnN0IHRhc2tNZXRyaWNzID0gW1xuICAgICAgICAgICAgdGFzay5tZXRyaWNGYWlsZWQoKSxcbiAgICAgICAgICAgIHRhc2subWV0cmljSGVhcnRiZWF0VGltZWRPdXQoKSxcbiAgICAgICAgICAgIHRhc2subWV0cmljUnVuVGltZSgpLFxuICAgICAgICAgICAgdGFzay5tZXRyaWNTY2hlZHVsZWQoKSxcbiAgICAgICAgICAgIHRhc2subWV0cmljU2NoZWR1bGVUaW1lKCksXG4gICAgICAgICAgICB0YXNrLm1ldHJpY1N0YXJ0ZWQoKSxcbiAgICAgICAgICAgIHRhc2subWV0cmljU3VjY2VlZGVkKCksXG4gICAgICAgICAgICB0YXNrLm1ldHJpY1RpbWUoKSxcbiAgICAgICAgICAgIHRhc2subWV0cmljVGltZWRPdXQoKSxcbiAgICAgICAgXTtcblxuICAgICAgICAvLyBUSEVOXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWN0aXZpdHlNZXRyaWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0ZXN0LmRlZXBFcXVhbChhY3Rpdml0eU1ldHJpY3NbaV0sIHRhc2tNZXRyaWNzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH1cbn07Il19
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chain_1 = require("../chain");
const state_1 = require("./state");
/**
 * Define a Wait state in the state machine
 *
 * A Wait state can be used to delay execution of the state machine for a while.
 */
class Wait extends state_1.State {
    constructor(parent, id, props) {
        super(parent, id, props);
        this.seconds = props.seconds;
        this.timestamp = props.timestamp;
        this.secondsPath = props.secondsPath;
        this.timestampPath = props.timestampPath;
        this.endStates = [this];
    }
    /**
     * Continue normal execution with the given state
     */
    next(next) {
        super.makeNext(next.startState);
        return chain_1.Chain.sequence(this, next);
    }
    /**
     * Return the Amazon States Language object for this state
     */
    toStateJson() {
        return Object.assign({ Type: state_1.StateType.Wait, Comment: this.comment, Seconds: this.seconds, Timestamp: this.timestamp, SecondsPath: this.secondsPath, TimestampPath: this.timestampPath }, this.renderNextEnd());
    }
}
exports.Wait = Wait;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FpdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndhaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxvQ0FBaUM7QUFFakMsbUNBQTJDO0FBZ0QzQzs7OztHQUlHO0FBQ0gsTUFBYSxJQUFLLFNBQVEsYUFBSztJQVEzQixZQUFZLE1BQXFCLEVBQUUsRUFBVSxFQUFFLEtBQWdCO1FBQzNELEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXpCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUM3QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztRQUV6QyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksSUFBSSxDQUFDLElBQWdCO1FBQ3hCLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hDLE9BQU8sYUFBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksV0FBVztRQUNkLHVCQUNJLElBQUksRUFBRSxpQkFBUyxDQUFDLElBQUksRUFDcEIsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQ3JCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUNyQixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFDekIsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQzdCLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYSxJQUM5QixJQUFJLENBQUMsYUFBYSxFQUFFLEVBQ3pCO0lBQ04sQ0FBQztDQUNKO0FBekNELG9CQXlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcbmltcG9ydCB7IENoYWluIH0gZnJvbSAnLi4vY2hhaW4nO1xuaW1wb3J0IHsgSUNoYWluYWJsZSwgSU5leHRhYmxlIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgU3RhdGUsIFN0YXRlVHlwZSB9IGZyb20gJy4vc3RhdGUnO1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgV2FpdCBzdGF0ZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFdhaXRQcm9wcyB7XG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgZGVzY3JpcHRpb24gZm9yIHRoaXMgc3RhdGVcbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IE5vIGNvbW1lbnRcbiAgICAgKi9cbiAgICBjb21tZW50Pzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogV2FpdCBhIGZpeGVkIG51bWJlciBvZiBzZWNvbmRzXG4gICAgICpcbiAgICAgKiBFeGFjdGx5IG9uZSBvZiBzZWNvbmRzLCBzZWNvbmRzUGF0aCwgdGltZXN0YW1wLCB0aW1lc3RhbXBQYXRoIG11c3QgYmUgc3VwcGxpZWQuXG4gICAgICovXG4gICAgc2Vjb25kcz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFdhaXQgdW50aWwgdGhlIGdpdmVuIElTTzg2MDEgdGltZXN0YW1wXG4gICAgICpcbiAgICAgKiBFeGFjdGx5IG9uZSBvZiBzZWNvbmRzLCBzZWNvbmRzUGF0aCwgdGltZXN0YW1wLCB0aW1lc3RhbXBQYXRoIG11c3QgYmUgc3VwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSAyMDE2LTAzLTE0VDAxOjU5OjAwWlxuICAgICAqL1xuICAgIHRpbWVzdGFtcD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFdhaXQgZm9yIGEgbnVtYmVyIG9mIHNlY29uZHMgc3RvcmVkIGluIHRoZSBzdGF0ZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBFeGFjdGx5IG9uZSBvZiBzZWNvbmRzLCBzZWNvbmRzUGF0aCwgdGltZXN0YW1wLCB0aW1lc3RhbXBQYXRoIG11c3QgYmUgc3VwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSAkLndhaXRTZWNvbmRzXG4gICAgICovXG4gICAgc2Vjb25kc1BhdGg/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBXYWl0IHVudGlsIGEgdGltZXN0YW1wIGZvdW5kIGluIHRoZSBzdGF0ZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBFeGFjdGx5IG9uZSBvZiBzZWNvbmRzLCBzZWNvbmRzUGF0aCwgdGltZXN0YW1wLCB0aW1lc3RhbXBQYXRoIG11c3QgYmUgc3VwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSAkLndhaXRUaW1lc3RhbXBcbiAgICAgKi9cbiAgICB0aW1lc3RhbXBQYXRoPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIERlZmluZSBhIFdhaXQgc3RhdGUgaW4gdGhlIHN0YXRlIG1hY2hpbmVcbiAqXG4gKiBBIFdhaXQgc3RhdGUgY2FuIGJlIHVzZWQgdG8gZGVsYXkgZXhlY3V0aW9uIG9mIHRoZSBzdGF0ZSBtYWNoaW5lIGZvciBhIHdoaWxlLlxuICovXG5leHBvcnQgY2xhc3MgV2FpdCBleHRlbmRzIFN0YXRlIGltcGxlbWVudHMgSU5leHRhYmxlIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgZW5kU3RhdGVzOiBJTmV4dGFibGVbXTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2Vjb25kcz86IG51bWJlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRpbWVzdGFtcD86IHN0cmluZztcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNlY29uZHNQYXRoPzogc3RyaW5nO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdGltZXN0YW1wUGF0aD86IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHBhcmVudDogY2RrLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFdhaXRQcm9wcykge1xuICAgICAgICBzdXBlcihwYXJlbnQsIGlkLCBwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5zZWNvbmRzID0gcHJvcHMuc2Vjb25kcztcbiAgICAgICAgdGhpcy50aW1lc3RhbXAgPSBwcm9wcy50aW1lc3RhbXA7XG4gICAgICAgIHRoaXMuc2Vjb25kc1BhdGggPSBwcm9wcy5zZWNvbmRzUGF0aDtcbiAgICAgICAgdGhpcy50aW1lc3RhbXBQYXRoID0gcHJvcHMudGltZXN0YW1wUGF0aDtcblxuICAgICAgICB0aGlzLmVuZFN0YXRlcyA9IFt0aGlzXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb250aW51ZSBub3JtYWwgZXhlY3V0aW9uIHdpdGggdGhlIGdpdmVuIHN0YXRlXG4gICAgICovXG4gICAgcHVibGljIG5leHQobmV4dDogSUNoYWluYWJsZSk6IENoYWluIHtcbiAgICAgICAgc3VwZXIubWFrZU5leHQobmV4dC5zdGFydFN0YXRlKTtcbiAgICAgICAgcmV0dXJuIENoYWluLnNlcXVlbmNlKHRoaXMsIG5leHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgQW1hem9uIFN0YXRlcyBMYW5ndWFnZSBvYmplY3QgZm9yIHRoaXMgc3RhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgdG9TdGF0ZUpzb24oKTogb2JqZWN0IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFR5cGU6IFN0YXRlVHlwZS5XYWl0LFxuICAgICAgICAgICAgQ29tbWVudDogdGhpcy5jb21tZW50LFxuICAgICAgICAgICAgU2Vjb25kczogdGhpcy5zZWNvbmRzLFxuICAgICAgICAgICAgVGltZXN0YW1wOiB0aGlzLnRpbWVzdGFtcCxcbiAgICAgICAgICAgIFNlY29uZHNQYXRoOiB0aGlzLnNlY29uZHNQYXRoLFxuICAgICAgICAgICAgVGltZXN0YW1wUGF0aDogdGhpcy50aW1lc3RhbXBQYXRoLFxuICAgICAgICAgICAgLi4udGhpcy5yZW5kZXJOZXh0RW5kKCksXG4gICAgICAgIH07XG4gICAgfVxufSJdfQ==
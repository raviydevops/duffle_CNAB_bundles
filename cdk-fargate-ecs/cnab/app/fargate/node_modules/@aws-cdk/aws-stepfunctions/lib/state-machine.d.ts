import cloudwatch = require('@aws-cdk/aws-cloudwatch');
import events = require('@aws-cdk/aws-events');
import iam = require('@aws-cdk/aws-iam');
import cdk = require('@aws-cdk/cdk');
import { IChainable } from './types';
/**
 * Properties for defining a State Machine
 */
export interface StateMachineProps {
    /**
     * A name for the state machine
     *
     * @default A name is automatically generated
     */
    stateMachineName?: string;
    /**
     * Definition for this state machine
     */
    definition: IChainable;
    /**
     * The execution role for the state machine service
     *
     * @default A role is automatically created
     */
    role?: iam.Role;
    /**
     * Maximum run time for this state machine
     *
     * @default No timeout
     */
    timeoutSec?: number;
}
/**
 * Define a StepFunctions State Machine
 */
export declare class StateMachine extends cdk.Construct implements IStateMachine {
    /**
     * Import a state machine
     */
    static import(parent: cdk.Construct, id: string, props: ImportedStateMachineProps): IStateMachine;
    /**
     * Execution role of this state machine
     */
    readonly role: iam.Role;
    /**
     * The name of the state machine
     */
    readonly stateMachineName: string;
    /**
     * The ARN of the state machine
     */
    readonly stateMachineArn: string;
    /**
     * A role used by CloudWatch events to start the State Machine
     */
    private eventsRole?;
    constructor(parent: cdk.Construct, id: string, props: StateMachineProps);
    /**
     * Add the given statement to the role's policy
     */
    addToRolePolicy(statement: iam.PolicyStatement): void;
    /**
     * Allows using state machines as event rule targets.
     */
    asEventRuleTarget(_ruleArn: string, _ruleId: string): events.EventRuleTargetProps;
    /**
     * Return the given named metric for this State Machine's executions
     *
     * @default sum over 5 minutes
     */
    metric(metricName: string, props?: cloudwatch.MetricCustomization): cloudwatch.Metric;
    /**
     * Metric for the number of executions that failed
     *
     * @default sum over 5 minutes
     */
    metricFailed(props?: cloudwatch.MetricCustomization): cloudwatch.Metric;
    /**
     * Metric for the number of executions that were throttled
     *
     * @default sum over 5 minutes
     */
    metricThrottled(props?: cloudwatch.MetricCustomization): cloudwatch.Metric;
    /**
     * Metric for the number of executions that were aborted
     *
     * @default sum over 5 minutes
     */
    metricAborted(props?: cloudwatch.MetricCustomization): cloudwatch.Metric;
    /**
     * Metric for the number of executions that succeeded
     *
     * @default sum over 5 minutes
     */
    metricSucceeded(props?: cloudwatch.MetricCustomization): cloudwatch.Metric;
    /**
     * Metric for the number of executions that succeeded
     *
     * @default sum over 5 minutes
     */
    metricTimedOut(props?: cloudwatch.MetricCustomization): cloudwatch.Metric;
    /**
     * Metric for the number of executions that were started
     *
     * @default sum over 5 minutes
     */
    metricStarted(props?: cloudwatch.MetricCustomization): cloudwatch.Metric;
    /**
     * Export this state machine
     */
    export(): ImportedStateMachineProps;
}
/**
 * A State Machine
 */
export interface IStateMachine {
    /**
     * The ARN of the state machine
     */
    readonly stateMachineArn: string;
}
/**
 * Properties for an imported state machine
 */
export interface ImportedStateMachineProps {
    /**
     * The ARN of the state machine
     */
    stateMachineArn: string;
}

"use strict";
// Copyright 2012-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// Generated from the AWS CloudFormation Resource Specification
// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html
// @cfn2ts:meta@ {"generated":"2018-12-13T10:04:08.548Z","fingerprint":"Cq/NC2TkHPJdg+zfZmshSXKbHe48RPW/nQ+otvZIaDM="}
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:max-line-length | This is generated code - line lengths are difficult to control
const cdk = require("@aws-cdk/cdk");
var cloudformation;
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``ActivityResourceProps``
     *
     * @param properties the TypeScript properties of a ``ActivityResourceProps``
     *
     * @returns the result of the validation.
     */
    function ActivityResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));
        errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
        return errors.wrap('supplied properties not correct for "ActivityResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::StepFunctions::Activity`` resource
     *
     * @param properties the TypeScript properties of a ``ActivityResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::StepFunctions::Activity`` resource.
     */
    function activityResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        ActivityResourcePropsValidator(properties).assertSuccess();
        return {
            Name: cdk.stringToCloudFormation(properties.name),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-activity.html
     */
    class ActivityResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::StepFunctions::Activity``.
         *
         * @param parent   the ``cdk.Construct`` this ``ActivityResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``ActivityResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: ActivityResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'name', this);
            this.activityName = this.getAtt('Name').toString();
            this.activityArn = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return activityResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    ActivityResource.resourceTypeName = "AWS::StepFunctions::Activity";
    cloudformation.ActivityResource = ActivityResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``StateMachineResourceProps``
     *
     * @param properties the TypeScript properties of a ``StateMachineResourceProps``
     *
     * @returns the result of the validation.
     */
    function StateMachineResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('definitionString', cdk.requiredValidator)(properties.definitionString));
        errors.collect(cdk.propertyValidator('definitionString', cdk.validateString)(properties.definitionString));
        errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));
        errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));
        errors.collect(cdk.propertyValidator('stateMachineName', cdk.validateString)(properties.stateMachineName));
        return errors.wrap('supplied properties not correct for "StateMachineResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::StepFunctions::StateMachine`` resource
     *
     * @param properties the TypeScript properties of a ``StateMachineResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::StepFunctions::StateMachine`` resource.
     */
    function stateMachineResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        StateMachineResourcePropsValidator(properties).assertSuccess();
        return {
            DefinitionString: cdk.stringToCloudFormation(properties.definitionString),
            RoleArn: cdk.stringToCloudFormation(properties.roleArn),
            StateMachineName: cdk.stringToCloudFormation(properties.stateMachineName),
        };
    }
    /**
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html
     */
    class StateMachineResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::StepFunctions::StateMachine``.
         *
         * @param parent   the ``cdk.Construct`` this ``StateMachineResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``StateMachineResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: StateMachineResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'definitionString', this);
            cdk.requireProperty(properties, 'roleArn', this);
            this.stateMachineName = this.getAtt('Name').toString();
            this.stateMachineArn = this.ref.toString();
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return stateMachineResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    StateMachineResource.resourceTypeName = "AWS::StepFunctions::StateMachine";
    cloudformation.StateMachineResource = StateMachineResource;
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
//# sourceMappingURL=data:application/json;base64,
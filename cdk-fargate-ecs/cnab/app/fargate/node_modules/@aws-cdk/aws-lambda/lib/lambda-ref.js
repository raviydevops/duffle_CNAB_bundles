"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cloudwatch = require("@aws-cdk/aws-cloudwatch");
const ec2 = require("@aws-cdk/aws-ec2");
const iam = require("@aws-cdk/aws-iam");
const s3n = require("@aws-cdk/aws-s3-notifications");
const cdk = require("@aws-cdk/cdk");
const lambda_generated_1 = require("./lambda.generated");
const pipeline_action_1 = require("./pipeline-action");
class FunctionRef extends cdk.Construct {
    constructor() {
        super(...arguments);
        /**
         * Indicates if the policy that allows CloudWatch logs to publish to this lambda has been added.
         */
        this.logSubscriptionDestinationPolicyAddedFor = [];
    }
    /**
     * Creates a Lambda function object which represents a function not defined
     * within this stack.
     *
     *    Lambda.import(this, 'MyImportedFunction', { lambdaArn: new LambdaArn('arn:aws:...') });
     *
     * @param parent The parent construct
     * @param name The name of the lambda construct
     * @param ref A reference to a Lambda function. Can be created manually (see
     * example above) or obtained through a call to `lambda.export()`.
     */
    static import(parent, name, ref) {
        return new LambdaRefImport(parent, name, ref);
    }
    /**
     * Return the given named metric for this Lambda
     */
    static metricAll(metricName, props) {
        return new cloudwatch.Metric(Object.assign({ namespace: 'AWS/Lambda', metricName }, props));
    }
    /**
     * Metric for the number of Errors executing all Lambdas
     *
     * @default sum over 5 minutes
     */
    static metricAllErrors(props) {
        return FunctionRef.metricAll('Errors', Object.assign({ statistic: 'sum' }, props));
    }
    /**
     * Metric for the Duration executing all Lambdas
     *
     * @default average over 5 minutes
     */
    static metricAllDuration(props) {
        return FunctionRef.metricAll('Duration', props);
    }
    /**
     * Metric for the number of invocations of all Lambdas
     *
     * @default sum over 5 minutes
     */
    static metricAllInvocations(props) {
        return FunctionRef.metricAll('Invocations', Object.assign({ statistic: 'sum' }, props));
    }
    /**
     * Metric for the number of throttled invocations of all Lambdas
     *
     * @default sum over 5 minutes
     */
    static metricAllThrottles(props) {
        return FunctionRef.metricAll('Throttles', Object.assign({ statistic: 'sum' }, props));
    }
    /**
     * Metric for the number of concurrent executions across all Lambdas
     *
     * @default max over 5 minutes
     */
    static metricAllConcurrentExecutions(props) {
        // Mini-FAQ: why max? This metric is a gauge that is emitted every
        // minute, so either max or avg or a percentile make sense (but sum
        // doesn't). Max is more sensitive to spiky load changes which is
        // probably what you're interested in if you're looking at this metric
        // (Load spikes may lead to concurrent execution errors that would
        // otherwise not be visible in the avg)
        return FunctionRef.metricAll('ConcurrentExecutions', Object.assign({ statistic: 'max' }, props));
    }
    /**
     * Metric for the number of unreserved concurrent executions across all Lambdas
     *
     * @default max over 5 minutes
     */
    static metricAllUnreservedConcurrentExecutions(props) {
        return FunctionRef.metricAll('UnreservedConcurrentExecutions', Object.assign({ statistic: 'max' }, props));
    }
    /**
     * Adds a permission to the Lambda resource policy.
     * @param id The id Æ’or the permission construct
     */
    addPermission(id, permission) {
        if (!this.canCreatePermissions) {
            // FIXME: Report metadata
            return;
        }
        const principal = this.parsePermissionPrincipal(permission.principal);
        const action = permission.action || 'lambda:InvokeFunction';
        new lambda_generated_1.cloudformation.PermissionResource(this, id, {
            action,
            principal,
            functionName: this.functionName,
            eventSourceToken: permission.eventSourceToken,
            sourceAccount: permission.sourceAccount,
            sourceArn: permission.sourceArn,
        });
    }
    /**
     * Convenience method for creating a new {@link PipelineInvokeAction},
     * and adding it to the given Stage.
     *
     * @param stage the Pipeline Stage to add the new Action to
     * @param name the name of the newly created Action
     * @param props the properties of the new Action
     * @returns the newly created {@link PipelineInvokeAction}
     */
    addToPipeline(stage, name, props = {}) {
        return new pipeline_action_1.PipelineInvokeAction(this, name, Object.assign({ stage, lambda: this }, props));
    }
    addToRolePolicy(statement) {
        if (!this.role) {
            return;
        }
        this.role.addToPolicy(statement);
    }
    /**
     * Access the Connections object
     *
     * Will fail if not a VPC-enabled Lambda Function
     */
    get connections() {
        if (!this._connections) {
            // tslint:disable-next-line:max-line-length
            throw new Error('Only VPC-associated Lambda Functions have security groups to manage. Supply the "vpc" parameter when creating the Lambda, or "securityGroupId" when importing it.');
        }
        return this._connections;
    }
    /**
     * Whether or not this Lambda function was bound to a VPC
     *
     * If this is is `false`, trying to access the `connections` object will fail.
     */
    get isBoundToVpc() {
        return !!this._connections;
    }
    /**
     * Returns a RuleTarget that can be used to trigger this Lambda as a
     * result from a CloudWatch event.
     */
    asEventRuleTarget(ruleArn, ruleId) {
        const permissionId = `AllowEventRule${ruleId}`;
        if (!this.tryFindChild(permissionId)) {
            this.addPermission(permissionId, {
                action: 'lambda:InvokeFunction',
                principal: new iam.ServicePrincipal('events.amazonaws.com'),
                sourceArn: ruleArn
            });
        }
        return {
            id: this.id,
            arn: this.functionArn,
        };
    }
    /**
     * Grant the given identity permissions to invoke this Lambda
     */
    grantInvoke(identity) {
        if (identity) {
            identity.addToPolicy(new iam.PolicyStatement()
                .addAction('lambda:InvokeFunction')
                .addResource(this.functionArn));
        }
    }
    /**
     * Return the given named metric for this Lambda
     */
    metric(metricName, props) {
        return new cloudwatch.Metric(Object.assign({ namespace: 'AWS/Lambda', metricName, dimensions: { FunctionName: this.functionName } }, props));
    }
    /**
     * Metric for the Errors executing this Lambda
     *
     * @default sum over 5 minutes
     */
    metricErrors(props) {
        return this.metric('Errors', Object.assign({ statistic: 'sum' }, props));
    }
    /**
     * Metric for the Duration of this Lambda
     *
     * @default average over 5 minutes
     */
    metricDuration(props) {
        return this.metric('Duration', props);
    }
    /**
     * Metric for the number of invocations of this Lambda
     *
     * @default sum over 5 minutes
     */
    metricInvocations(props) {
        return this.metric('Invocations', Object.assign({ statistic: 'sum' }, props));
    }
    /**
     * Metric for the number of throttled invocations of this Lambda
     *
     * @default sum over 5 minutes
     */
    metricThrottles(props) {
        return this.metric('Throttles', Object.assign({ statistic: 'sum' }, props));
    }
    logSubscriptionDestination(sourceLogGroup) {
        const arn = sourceLogGroup.logGroupArn;
        if (this.logSubscriptionDestinationPolicyAddedFor.indexOf(arn) === -1) {
            // NOTE: the use of {AWS::Region} limits this to the same region, which shouldn't really be an issue,
            // since the Lambda must be in the same region as the SubscriptionFilter anyway.
            //
            // (Wildcards in principals are unfortunately not supported.
            this.addPermission('InvokedByCloudWatchLogs', {
                principal: new iam.ServicePrincipal(new cdk.FnConcat('logs.', new cdk.AwsRegion(), '.amazonaws.com').toString()),
                sourceArn: arn
            });
            this.logSubscriptionDestinationPolicyAddedFor.push(arn);
        }
        return { arn: this.functionArn };
    }
    /**
     * Export this Function (without the role)
     */
    export() {
        return {
            functionArn: new cdk.Output(this, 'FunctionArn', { value: this.functionArn }).makeImportValue().toString(),
            securityGroupId: this._connections && this._connections.securityGroups[0]
                ? new cdk.Output(this, 'SecurityGroupId', { value: this._connections.securityGroups[0].securityGroupId }).makeImportValue().toString()
                : undefined
        };
    }
    /**
     * Allows this Lambda to be used as a destination for bucket notifications.
     * Use `bucket.onEvent(lambda)` to subscribe.
     */
    asBucketNotificationDestination(bucketArn, bucketId) {
        const permissionId = `AllowBucketNotificationsFrom${bucketId}`;
        if (!this.tryFindChild(permissionId)) {
            this.addPermission(permissionId, {
                sourceAccount: new cdk.AwsAccountId().toString(),
                principal: new iam.ServicePrincipal('s3.amazonaws.com'),
                sourceArn: bucketArn,
            });
        }
        // if we have a permission resource for this relationship, add it as a dependency
        // to the bucket notifications resource, so it will be created first.
        const permission = this.tryFindChild(permissionId);
        return {
            type: s3n.BucketNotificationDestinationType.Lambda,
            arn: this.functionArn,
            dependencies: permission ? [permission] : undefined
        };
    }
    asStepFunctionsTaskResource(_callingTask) {
        return {
            resourceArn: this.functionArn,
            metricPrefixSingular: 'LambdaFunction',
            metricPrefixPlural: 'LambdaFunctions',
            metricDimensions: { LambdaFunctionArn: this.functionArn },
            policyStatements: [new iam.PolicyStatement()
                    .addResource(this.functionArn)
                    .addActions("lambda:InvokeFunction")
            ]
        };
    }
    /**
     * Adds an event source to this function.
     *
     * Event sources are implemented in the @aws-cdk/aws-lambda-event-sources module.
     *
     * The following example adds an SQS Queue as an event source:
     *
     *     import { SqsEventSource } from '@aws-cdk/aws-lambda-event-sources';
     *     myFunction.addEventSource(new SqsEventSource(myQueue));
     *
     * @param source The event source to bind to this function
     */
    addEventSource(source) {
        source.bind(this);
    }
    parsePermissionPrincipal(principal) {
        if (!principal) {
            return undefined;
        }
        // use duck-typing, not instance of
        if ('accountId' in principal) {
            return principal.accountId;
        }
        if (`service` in principal) {
            return principal.service;
        }
        throw new Error(`Invalid principal type for Lambda permission statement: ${JSON.stringify(cdk.resolve(principal))}. ` +
            'Supported: AccountPrincipal, ServicePrincipal');
    }
}
exports.FunctionRef = FunctionRef;
class LambdaRefImport extends FunctionRef {
    constructor(parent, name, props) {
        super(parent, name);
        this.canCreatePermissions = false;
        this.functionArn = props.functionArn;
        this.functionName = this.extractNameFromArn(props.functionArn);
        this.role = props.role;
        if (props.securityGroupId) {
            this._connections = new ec2.Connections({
                securityGroups: [ec2.SecurityGroupRef.import(this, 'SecurityGroup', {
                        securityGroupId: props.securityGroupId
                    })]
            });
        }
    }
    /**
     * Given an opaque (token) ARN, returns a CloudFormation expression that extracts the function
     * name from the ARN.
     *
     * Function ARNs look like this:
     *
     *   arn:aws:lambda:region:account-id:function:function-name
     *
     * ..which means that in order to extract the `function-name` component from the ARN, we can
     * split the ARN using ":" and select the component in index 6.
     *
     * @returns `FnSelect(6, FnSplit(':', arn))`
     */
    extractNameFromArn(arn) {
        return new cdk.FnSelect(6, new cdk.FnSplit(':', arn)).toString();
    }
}
//# sourceMappingURL=data:application/json;base64,
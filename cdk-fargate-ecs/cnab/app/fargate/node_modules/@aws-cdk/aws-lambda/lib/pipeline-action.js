"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const codepipeline = require("@aws-cdk/aws-codepipeline-api");
const iam = require("@aws-cdk/aws-iam");
/**
 * CodePipeline invoke Action that is provided by an AWS Lambda function.
 *
 * @see https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-invoke-lambda-function.html
 */
class PipelineInvokeAction extends codepipeline.Action {
    constructor(parent, name, props) {
        super(parent, name, {
            stage: props.stage,
            runOrder: props.runOrder,
            category: codepipeline.ActionCategory.Invoke,
            provider: 'Lambda',
            artifactBounds: codepipeline.defaultBounds(),
            configuration: {
                FunctionName: props.lambda.functionName,
                UserParameters: props.userParameters
            }
        });
        // allow pipeline to list functions
        props.stage.pipeline.role.addToPolicy(new iam.PolicyStatement()
            .addAction('lambda:ListFunctions')
            .addAllResources());
        // allow pipeline to invoke this lambda functionn
        props.stage.pipeline.role.addToPolicy(new iam.PolicyStatement()
            .addAction('lambda:InvokeFunction')
            .addResource(props.lambda.functionArn));
        // allow lambda to put job results for this pipeline.
        const addToPolicy = props.addPutJobResultPolicy !== undefined ? props.addPutJobResultPolicy : true;
        if (addToPolicy) {
            props.lambda.addToRolePolicy(new iam.PolicyStatement()
                .addAllResources() // to avoid cycles (see docs)
                .addAction('codepipeline:PutJobSuccessResult')
                .addAction('codepipeline:PutJobFailureResult'));
        }
    }
}
exports.PipelineInvokeAction = PipelineInvokeAction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmUtYWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGlwZWxpbmUtYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsOERBQStEO0FBQy9ELHdDQUF5QztBQWlEekM7Ozs7R0FJRztBQUNILE1BQWEsb0JBQXFCLFNBQVEsWUFBWSxDQUFDLE1BQU07SUFDM0QsWUFBWSxNQUFxQixFQUFFLElBQVksRUFBRSxLQUFnQztRQUMvRSxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRTtZQUNsQixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLFFBQVEsRUFBRSxZQUFZLENBQUMsY0FBYyxDQUFDLE1BQU07WUFDNUMsUUFBUSxFQUFFLFFBQVE7WUFDbEIsY0FBYyxFQUFFLFlBQVksQ0FBQyxhQUFhLEVBQUU7WUFDNUMsYUFBYSxFQUFFO2dCQUNiLFlBQVksRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLFlBQVk7Z0JBQ3ZDLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYzthQUNyQztTQUNGLENBQUMsQ0FBQztRQUVILG1DQUFtQztRQUNuQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRTthQUM1RCxTQUFTLENBQUMsc0JBQXNCLENBQUM7YUFDakMsZUFBZSxFQUFFLENBQUMsQ0FBQztRQUV0QixpREFBaUQ7UUFDakQsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxlQUFlLEVBQUU7YUFDNUQsU0FBUyxDQUFDLHVCQUF1QixDQUFDO2FBQ2xDLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFFMUMscURBQXFEO1FBQ3JELE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxxQkFBcUIsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ25HLElBQUksV0FBVyxFQUFFO1lBQ2YsS0FBSyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFO2lCQUNuRCxlQUFlLEVBQUUsQ0FBQyw2QkFBNkI7aUJBQy9DLFNBQVMsQ0FBQyxrQ0FBa0MsQ0FBQztpQkFDN0MsU0FBUyxDQUFDLGtDQUFrQyxDQUFDLENBQUMsQ0FBQztTQUNuRDtJQUNILENBQUM7Q0FDRjtBQWpDRCxvREFpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29kZXBpcGVsaW5lID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWNvZGVwaXBlbGluZS1hcGknKTtcbmltcG9ydCBpYW0gPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtaWFtJyk7XG5pbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY2RrJyk7XG5pbXBvcnQgeyBGdW5jdGlvblJlZiB9IGZyb20gJy4vbGFtYmRhLXJlZic7XG5cbi8qKlxuICogQ29tbW9uIHByb3BlcnRpZXMgZm9yIGNyZWF0aW5nIGEge0BsaW5rIFBpcGVsaW5lSW52b2tlQWN0aW9ufSAtXG4gKiBlaXRoZXIgZGlyZWN0bHksIHRocm91Z2ggaXRzIGNvbnN0cnVjdG9yLFxuICogb3IgdGhyb3VnaCB7QGxpbmsgRnVuY3Rpb25SZWYjYWRkVG9QaXBlbGluZX0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29tbW9uUGlwZWxpbmVJbnZva2VBY3Rpb25Qcm9wcyBleHRlbmRzIGNvZGVwaXBlbGluZS5Db21tb25BY3Rpb25Qcm9wcyB7XG4gIC8qKlxuICAgKiBTdHJpbmcgdG8gYmUgdXNlZCBpbiB0aGUgZXZlbnQgZGF0YSBwYXJhbWV0ZXIgcGFzc2VkIHRvIHRoZSBMYW1iZGFcbiAgICogZnVuY3Rpb25cbiAgICpcbiAgICogU2VlIGFuIGV4YW1wbGUgSlNPTiBldmVudCBpbiB0aGUgQ29kZVBpcGVsaW5lIGRvY3VtZW50YXRpb24uXG4gICAqXG4gICAqIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9jb2RlcGlwZWxpbmUvbGF0ZXN0L3VzZXJndWlkZS9hY3Rpb25zLWludm9rZS1sYW1iZGEtZnVuY3Rpb24uaHRtbCNhY3Rpb25zLWludm9rZS1sYW1iZGEtZnVuY3Rpb24tanNvbi1ldmVudC1leGFtcGxlXG4gICAqL1xuICB1c2VyUGFyYW1ldGVycz86IGFueTtcblxuICAvKipcbiAgICogQWRkcyB0aGUgXCJjb2RlcGlwZWxpbmU6UHV0Sm9iU3VjY2Vzc1Jlc3VsdFwiIGFuZFxuICAgKiBcImNvZGVwaXBlbGluZTpQdXRKb2JGYWlsdXJlUmVzdWx0XCIgZm9yICcqJyByZXNvdXJjZSB0byB0aGUgTGFtYmRhXG4gICAqIGV4ZWN1dGlvbiByb2xlIHBvbGljeS5cbiAgICpcbiAgICogTk9URTogdGhlIHJlYXNvbiB3ZSBjYW4ndCBhZGQgdGhlIHNwZWNpZmljIHBpcGVsaW5lIEFSTiBhcyBhIHJlc291cmNlIGlzXG4gICAqIHRvIGF2b2lkIGEgY3ljbGljIGRlcGVuZGVuY3kgYmV0d2VlbiB0aGUgcGlwZWxpbmUgYW5kIHRoZSBMYW1iZGEgZnVuY3Rpb25cbiAgICogKHRoZSBwaXBlbGluZSByZWZlcmVuY2VzKSB0aGUgTGFtYmRhIGFuZCB0aGUgTGFtYmRhIG5lZWRzIHBlcm1pc3Npb25zIG9uXG4gICAqIHRoZSBwaXBlbGluZS5cbiAgICpcbiAgICogQHNlZVxuICAgKiBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vY29kZXBpcGVsaW5lL2xhdGVzdC91c2VyZ3VpZGUvYWN0aW9ucy1pbnZva2UtbGFtYmRhLWZ1bmN0aW9uLmh0bWwjYWN0aW9ucy1pbnZva2UtbGFtYmRhLWZ1bmN0aW9uLWNyZWF0ZS1mdW5jdGlvblxuICAgKlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBhZGRQdXRKb2JSZXN1bHRQb2xpY3k/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdGlvbiBwcm9wZXJ0aWVzIG9mIHRoZSB7QGxpbmsgUGlwZWxpbmVJbnZva2VBY3Rpb24gTGFtYmRhIGludm9rZSBDb2RlUGlwZWxpbmUgQWN0aW9ufS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQaXBlbGluZUludm9rZUFjdGlvblByb3BzIGV4dGVuZHMgQ29tbW9uUGlwZWxpbmVJbnZva2VBY3Rpb25Qcm9wcyxcbiAgICBjb2RlcGlwZWxpbmUuQ29tbW9uQWN0aW9uQ29uc3RydWN0UHJvcHMge1xuICAvKipcbiAgICogVGhlIGxhbWJkYSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAqL1xuICBsYW1iZGE6IEZ1bmN0aW9uUmVmO1xufVxuXG4vKipcbiAqIENvZGVQaXBlbGluZSBpbnZva2UgQWN0aW9uIHRoYXQgaXMgcHJvdmlkZWQgYnkgYW4gQVdTIExhbWJkYSBmdW5jdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9jb2RlcGlwZWxpbmUvbGF0ZXN0L3VzZXJndWlkZS9hY3Rpb25zLWludm9rZS1sYW1iZGEtZnVuY3Rpb24uaHRtbFxuICovXG5leHBvcnQgY2xhc3MgUGlwZWxpbmVJbnZva2VBY3Rpb24gZXh0ZW5kcyBjb2RlcGlwZWxpbmUuQWN0aW9uIHtcbiAgY29uc3RydWN0b3IocGFyZW50OiBjZGsuQ29uc3RydWN0LCBuYW1lOiBzdHJpbmcsIHByb3BzOiBQaXBlbGluZUludm9rZUFjdGlvblByb3BzKSB7XG4gICAgc3VwZXIocGFyZW50LCBuYW1lLCB7XG4gICAgICBzdGFnZTogcHJvcHMuc3RhZ2UsXG4gICAgICBydW5PcmRlcjogcHJvcHMucnVuT3JkZXIsXG4gICAgICBjYXRlZ29yeTogY29kZXBpcGVsaW5lLkFjdGlvbkNhdGVnb3J5Lkludm9rZSxcbiAgICAgIHByb3ZpZGVyOiAnTGFtYmRhJyxcbiAgICAgIGFydGlmYWN0Qm91bmRzOiBjb2RlcGlwZWxpbmUuZGVmYXVsdEJvdW5kcygpLFxuICAgICAgY29uZmlndXJhdGlvbjoge1xuICAgICAgICBGdW5jdGlvbk5hbWU6IHByb3BzLmxhbWJkYS5mdW5jdGlvbk5hbWUsXG4gICAgICAgIFVzZXJQYXJhbWV0ZXJzOiBwcm9wcy51c2VyUGFyYW1ldGVyc1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gYWxsb3cgcGlwZWxpbmUgdG8gbGlzdCBmdW5jdGlvbnNcbiAgICBwcm9wcy5zdGFnZS5waXBlbGluZS5yb2xlLmFkZFRvUG9saWN5KG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KClcbiAgICAgIC5hZGRBY3Rpb24oJ2xhbWJkYTpMaXN0RnVuY3Rpb25zJylcbiAgICAgIC5hZGRBbGxSZXNvdXJjZXMoKSk7XG5cbiAgICAvLyBhbGxvdyBwaXBlbGluZSB0byBpbnZva2UgdGhpcyBsYW1iZGEgZnVuY3Rpb25uXG4gICAgcHJvcHMuc3RhZ2UucGlwZWxpbmUucm9sZS5hZGRUb1BvbGljeShuZXcgaWFtLlBvbGljeVN0YXRlbWVudCgpXG4gICAgICAuYWRkQWN0aW9uKCdsYW1iZGE6SW52b2tlRnVuY3Rpb24nKVxuICAgICAgLmFkZFJlc291cmNlKHByb3BzLmxhbWJkYS5mdW5jdGlvbkFybikpO1xuXG4gICAgLy8gYWxsb3cgbGFtYmRhIHRvIHB1dCBqb2IgcmVzdWx0cyBmb3IgdGhpcyBwaXBlbGluZS5cbiAgICBjb25zdCBhZGRUb1BvbGljeSA9IHByb3BzLmFkZFB1dEpvYlJlc3VsdFBvbGljeSAhPT0gdW5kZWZpbmVkID8gcHJvcHMuYWRkUHV0Sm9iUmVzdWx0UG9saWN5IDogdHJ1ZTtcbiAgICBpZiAoYWRkVG9Qb2xpY3kpIHtcbiAgICAgIHByb3BzLmxhbWJkYS5hZGRUb1JvbGVQb2xpY3kobmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoKVxuICAgICAgICAuYWRkQWxsUmVzb3VyY2VzKCkgLy8gdG8gYXZvaWQgY3ljbGVzIChzZWUgZG9jcylcbiAgICAgICAgLmFkZEFjdGlvbignY29kZXBpcGVsaW5lOlB1dEpvYlN1Y2Nlc3NSZXN1bHQnKVxuICAgICAgICAuYWRkQWN0aW9uKCdjb2RlcGlwZWxpbmU6UHV0Sm9iRmFpbHVyZVJlc3VsdCcpKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
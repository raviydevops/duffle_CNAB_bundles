"use strict";
const assert_1 = require("@aws-cdk/assert");
const ec2 = require("@aws-cdk/aws-ec2");
const cdk = require("@aws-cdk/cdk");
const elbv2 = require("../../lib");
const helpers_1 = require("../helpers");
module.exports = {
    'Trivial add listener'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.VpcNetwork(stack, 'Stack');
        const lb = new elbv2.NetworkLoadBalancer(stack, 'LB', { vpc });
        // WHEN
        lb.addListener('Listener', {
            port: 443,
            defaultTargetGroups: [new elbv2.NetworkTargetGroup(stack, 'Group', { vpc, port: 80 })]
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ElasticLoadBalancingV2::Listener', {
            Protocol: 'TCP',
            Port: 443
        }));
        test.done();
    },
    'Can add target groups'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.VpcNetwork(stack, 'Stack');
        const lb = new elbv2.NetworkLoadBalancer(stack, 'LB', { vpc });
        const listener = lb.addListener('Listener', { port: 443 });
        const group = new elbv2.NetworkTargetGroup(stack, 'TargetGroup', { vpc, port: 80 });
        // WHEN
        listener.addTargetGroups('Default', group);
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ElasticLoadBalancingV2::Listener', {
            DefaultActions: [
                {
                    TargetGroupArn: { Ref: "TargetGroup3D7CD9B8" },
                    Type: "forward"
                }
            ],
        }));
        test.done();
    },
    'Can implicitly create target groups'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.VpcNetwork(stack, 'Stack');
        const lb = new elbv2.NetworkLoadBalancer(stack, 'LB', { vpc });
        const listener = lb.addListener('Listener', { port: 443 });
        // WHEN
        listener.addTargets('Targets', {
            port: 80,
            targets: [new elbv2.InstanceTarget('i-12345')]
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ElasticLoadBalancingV2::Listener', {
            DefaultActions: [
                {
                    TargetGroupArn: { Ref: "LBListenerTargetsGroup76EF81E8" },
                    Type: "forward"
                }
            ],
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ElasticLoadBalancingV2::TargetGroup', {
            VpcId: { Ref: "Stack8A423254" },
            Port: 80,
            Protocol: "TCP",
            Targets: [
                { Id: "i-12345" }
            ]
        }));
        test.done();
    },
    'Enable health check for targets'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.VpcNetwork(stack, 'Stack');
        const lb = new elbv2.NetworkLoadBalancer(stack, 'LB', { vpc });
        const listener = lb.addListener('Listener', { port: 443 });
        // WHEN
        const group = listener.addTargets('Group', {
            port: 80,
            targets: [new helpers_1.FakeSelfRegisteringTarget(stack, 'Target', vpc)]
        });
        group.configureHealthCheck({
            timeoutSeconds: 3600,
            intervalSecs: 30,
            path: '/test',
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ElasticLoadBalancingV2::TargetGroup', {
            HealthCheckIntervalSeconds: 30,
            HealthCheckPath: "/test",
            HealthCheckTimeoutSeconds: 3600,
        }));
        test.done();
    },
    'Enable taking a dependency on an NLB target group\'s load balancer'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.VpcNetwork(stack, 'Stack');
        const lb = new elbv2.NetworkLoadBalancer(stack, 'LB', { vpc });
        const listener = lb.addListener('Listener', { port: 443 });
        const group = listener.addTargets('Group', {
            port: 80,
            targets: [new helpers_1.FakeSelfRegisteringTarget(stack, 'Target', vpc)]
        });
        // WHEN
        const resource = new cdk.Resource(stack, 'MyResource', {
            type: 'SomeResource',
        });
        resource.addDependency(group.loadBalancerDependency());
        // THEN
        assert_1.expect(stack).toMatch({
            Resources: {
                MyResource: {
                    Type: "SomeResource",
                    DependsOn: ["LBListener49E825B4"]
                }
            }
        }, assert_1.MatchStyle.SUPERSET);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ec2 = require("@aws-cdk/aws-ec2");
const cdk = require("@aws-cdk/cdk");
const base_listener_1 = require("../shared/base-listener");
const enums_1 = require("../shared/enums");
const util_1 = require("../shared/util");
const application_listener_certificate_1 = require("./application-listener-certificate");
const application_listener_rule_1 = require("./application-listener-rule");
const application_target_group_1 = require("./application-target-group");
/**
 * Define an ApplicationListener
 */
class ApplicationListener extends base_listener_1.BaseListener {
    /**
     * Import an existing listener
     */
    static import(parent, id, props) {
        return new ImportedApplicationListener(parent, id, props);
    }
    constructor(parent, id, props) {
        const [protocol, port] = util_1.determineProtocolAndPort(props.protocol, props.port);
        super(parent, id, {
            loadBalancerArn: props.loadBalancer.loadBalancerArn,
            certificates: new cdk.Token(() => this.certificateArns.map(certificateArn => ({ certificateArn }))),
            protocol,
            port,
            sslPolicy: props.sslPolicy,
        });
        this.loadBalancer = props.loadBalancer;
        this.protocol = protocol;
        this.certificateArns = [];
        this.certificateArns.push(...(props.certificateArns || []));
        this.defaultPort = port;
        // This listener edits the securitygroup of the load balancer,
        // but adds its own default port.
        this.connections = new ec2.Connections({
            securityGroups: props.loadBalancer.connections.securityGroups,
            defaultPortRange: new ec2.TcpPort(port),
        });
        (props.defaultTargetGroups || []).forEach(this.addDefaultTargetGroup.bind(this));
        if (props.open !== false) {
            this.connections.allowDefaultPortFrom(new ec2.AnyIPv4(), `Allow from anyone on port ${port}`);
        }
    }
    /**
     * Add one or more certificates to this listener.
     */
    addCertificateArns(_id, arns) {
        this.certificateArns.push(...arns);
    }
    /**
     * Load balance incoming requests to the given target groups.
     *
     * It's possible to add conditions to the TargetGroups added in this way.
     * At least one TargetGroup must be added without conditions.
     */
    addTargetGroups(id, props) {
        if ((props.hostHeader !== undefined || props.pathPattern !== undefined) !== (props.priority !== undefined)) {
            throw new Error(`Setting 'pathPattern' or 'hostHeader' also requires 'priority', and vice versa`);
        }
        if (props.priority !== undefined) {
            // New rule
            //
            // TargetGroup.registerListener is called inside ApplicationListenerRule.
            new application_listener_rule_1.ApplicationListenerRule(this, id + 'Rule', {
                listener: this,
                hostHeader: props.hostHeader,
                pathPattern: props.pathPattern,
                priority: props.priority,
                targetGroups: props.targetGroups
            });
        }
        else {
            // New default target(s)
            for (const targetGroup of props.targetGroups) {
                this.addDefaultTargetGroup(targetGroup);
            }
        }
    }
    /**
     * Load balance incoming requests to the given load balancing targets.
     *
     * This method implicitly creates an ApplicationTargetGroup for the targets
     * involved.
     *
     * It's possible to add conditions to the targets added in this way. At least
     * one set of targets must be added without conditions.
     *
     * @returns The newly created target group
     */
    addTargets(id, props) {
        if (!this.loadBalancer.vpc) {
            // tslint:disable-next-line:max-line-length
            throw new Error('Can only call addTargets() when using a constructed Load Balancer; construct a new TargetGroup and use addTargetGroup');
        }
        const group = new application_target_group_1.ApplicationTargetGroup(this, id + 'Group', {
            deregistrationDelaySec: props.deregistrationDelaySec,
            healthCheck: props.healthCheck,
            port: props.port,
            protocol: props.protocol,
            slowStartSec: props.slowStartSec,
            stickinessCookieDurationSec: props.stickinessCookieDurationSec,
            targetGroupName: props.targetGroupName,
            targets: props.targets,
            vpc: this.loadBalancer.vpc,
        });
        this.addTargetGroups(id, {
            hostHeader: props.hostHeader,
            pathPattern: props.pathPattern,
            priority: props.priority,
            targetGroups: [group],
        });
        return group;
    }
    /**
     * Register that a connectable that has been added to this load balancer.
     *
     * Don't call this directly. It is called by ApplicationTargetGroup.
     */
    registerConnectable(connectable, portRange) {
        this.connections.allowTo(connectable, portRange, 'Load balancer to target');
    }
    /**
     * Validate this listener.
     */
    validate() {
        const errors = super.validate();
        if (this.protocol === enums_1.ApplicationProtocol.Https && this.certificateArns.length === 0) {
            errors.push('HTTPS Listener needs at least one certificate (call addCertificateArns)');
        }
        return errors;
    }
    /**
     * Export this listener
     */
    export() {
        return {
            listenerArn: new cdk.Output(this, 'ListenerArn', { value: this.listenerArn }).makeImportValue().toString(),
            securityGroupId: this.connections.securityGroups[0].export().securityGroupId,
            defaultPort: new cdk.Output(this, 'Port', { value: this.defaultPort }).makeImportValue().toString(),
        };
    }
    /**
     * Add a default TargetGroup
     */
    addDefaultTargetGroup(targetGroup) {
        this._addDefaultTargetGroup(targetGroup);
        targetGroup.registerListener(this);
    }
}
exports.ApplicationListener = ApplicationListener;
class ImportedApplicationListener extends cdk.Construct {
    constructor(parent, id, props) {
        super(parent, id);
        this.dependencyElements = [];
        this.listenerArn = props.listenerArn;
        const defaultPortRange = props.defaultPort !== undefined ? new ec2.TcpPortFromAttribute(props.defaultPort) : undefined;
        this.connections = new ec2.Connections({
            securityGroups: [ec2.SecurityGroupRef.import(this, 'SecurityGroup', { securityGroupId: props.securityGroupId })],
            defaultPortRange,
        });
    }
    /**
     * Add one or more certificates to this listener.
     */
    addCertificateArns(id, arns) {
        new application_listener_certificate_1.ApplicationListenerCertificate(this, id, {
            listener: this,
            certificateArns: arns
        });
    }
    /**
     * Load balance incoming requests to the given target groups.
     *
     * It's possible to add conditions to the TargetGroups added in this way.
     * At least one TargetGroup must be added without conditions.
     */
    addTargetGroups(id, props) {
        if ((props.hostHeader !== undefined || props.pathPattern !== undefined) !== (props.priority !== undefined)) {
            throw new Error(`Setting 'pathPattern' or 'hostHeader' also requires 'priority', and vice versa`);
        }
        if (props.priority !== undefined) {
            // New rule
            new application_listener_rule_1.ApplicationListenerRule(this, id, {
                listener: this,
                hostHeader: props.hostHeader,
                pathPattern: props.pathPattern,
                priority: props.priority,
                targetGroups: props.targetGroups
            });
        }
        else {
            throw new Error('Cannot add default Target Groups to imported ApplicationListener');
        }
    }
    /**
     * Load balance incoming requests to the given load balancing targets.
     *
     * This method implicitly creates an ApplicationTargetGroup for the targets
     * involved.
     *
     * It's possible to add conditions to the targets added in this way. At least
     * one set of targets must be added without conditions.
     *
     * @returns The newly created target group
     */
    addTargets(_id, _props) {
        // tslint:disable-next-line:max-line-length
        throw new Error('Can only call addTargets() when using a constructed ApplicationListener; construct a new TargetGroup and use addTargetGroup.');
    }
    /**
     * Register that a connectable that has been added to this load balancer.
     *
     * Don't call this directly. It is called by ApplicationTargetGroup.
     */
    registerConnectable(connectable, portRange) {
        this.connections.allowTo(connectable, portRange, 'Load balancer to target');
    }
}
//# sourceMappingURL=data:application/json;base64,
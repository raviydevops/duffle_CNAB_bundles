import cdk = require('@aws-cdk/cdk');
import { BaseListener } from '../shared/base-listener';
import { HealthCheck } from '../shared/base-target-group';
import { INetworkLoadBalancer } from './network-load-balancer';
import { INetworkLoadBalancerTarget, INetworkTargetGroup, NetworkTargetGroup } from './network-target-group';
/**
 * Basic properties for a Network Listener
 */
export interface BaseNetworkListenerProps {
    /**
     * The port on which the listener listens for requests.
     */
    port: number;
    /**
     * Default target groups to load balance to
     *
     * @default None
     */
    defaultTargetGroups?: INetworkTargetGroup[];
}
/**
 * Properties for a Network Listener attached to a Load Balancer
 */
export interface NetworkListenerProps extends BaseNetworkListenerProps {
    /**
     * The load balancer to attach this listener to
     */
    loadBalancer: INetworkLoadBalancer;
}
/**
 * Define a Network Listener
 */
export declare class NetworkListener extends BaseListener implements INetworkListener {
    /**
     * Import an existing listener
     */
    static import(parent: cdk.Construct, id: string, props: NetworkListenerRefProps): INetworkListener;
    /**
     * The load balancer this listener is attached to
     */
    private readonly loadBalancer;
    constructor(parent: cdk.Construct, id: string, props: NetworkListenerProps);
    /**
     * Load balance incoming requests to the given target groups.
     */
    addTargetGroups(_id: string, ...targetGroups: INetworkTargetGroup[]): void;
    /**
     * Load balance incoming requests to the given load balancing targets.
     *
     * This method implicitly creates an ApplicationTargetGroup for the targets
     * involved.
     *
     * @returns The newly created target group
     */
    addTargets(id: string, props: AddNetworkTargetsProps): NetworkTargetGroup;
    /**
     * Export this listener
     */
    export(): NetworkListenerRefProps;
}
/**
 * Properties to reference an existing listener
 */
export interface INetworkListener extends cdk.IDependable {
    /**
     * ARN of the listener
     */
    readonly listenerArn: string;
}
/**
 * Properties to reference an existing listener
 */
export interface NetworkListenerRefProps {
    /**
     * ARN of the listener
     */
    listenerArn: string;
}
/**
 * Properties for adding new network targets to a listener
 */
export interface AddNetworkTargetsProps {
    /**
     * The port on which the listener listens for requests.
     *
     * @default Determined from protocol if known
     */
    port: number;
    /**
     * The targets to add to this target group.
     *
     * Can be `Instance`, `IPAddress`, or any self-registering load balancing
     * target. If you use either `Instance` or `IPAddress` as targets, all
     * target must be of the same type.
     */
    targets?: INetworkLoadBalancerTarget[];
    /**
     * The name of the target group.
     *
     * This name must be unique per region per account, can have a maximum of
     * 32 characters, must contain only alphanumeric characters or hyphens, and
     * must not begin or end with a hyphen.
     *
     * @default Automatically generated
     */
    targetGroupName?: string;
    /**
     * The amount of time for Elastic Load Balancing to wait before deregistering a target.
     *
     * The range is 0â€“3600 seconds.
     *
     * @default 300
     */
    deregistrationDelaySec?: number;
    /**
     * Indicates whether Proxy Protocol version 2 is enabled.
     *
     * @default false
     */
    proxyProtocolV2?: boolean;
    /**
     * Health check configuration
     *
     * @default No health check
     */
    healthCheck?: HealthCheck;
}

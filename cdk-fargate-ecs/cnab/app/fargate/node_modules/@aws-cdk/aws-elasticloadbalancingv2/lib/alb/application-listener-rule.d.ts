import cdk = require('@aws-cdk/cdk');
import { IApplicationListener } from './application-listener';
import { IApplicationTargetGroup } from './application-target-group';
/**
 * Basic properties for defining a rule on a listener
 */
export interface BaseApplicationListenerRuleProps {
    /**
     * Priority of the rule
     *
     * The rule with the lowest priority will be used for every request.
     *
     * Priorities must be unique.
     */
    priority: number;
    /**
     * Target groups to forward requests to
     */
    targetGroups?: IApplicationTargetGroup[];
    /**
     * Rule applies if the requested host matches the indicated host
     *
     * May contain up to three '*' wildcards.
     *
     * @see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#host-conditions
     *
     * @default No host condition
     */
    hostHeader?: string;
    /**
     * Rule applies if the requested path matches the given path pattern
     *
     * May contain up to three '*' wildcards.
     *
     * @see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#path-conditions
     *
     * @default No path condition
     */
    pathPattern?: string;
}
/**
 * Properties for defining a listener rule
 */
export interface ApplicationListenerRuleProps extends BaseApplicationListenerRuleProps {
    /**
     * The listener to attach the rule to
     */
    listener: IApplicationListener;
}
/**
 * Define a new listener rule
 */
export declare class ApplicationListenerRule extends cdk.Construct implements cdk.IDependable {
    /**
     * The ARN of this rule
     */
    readonly listenerRuleArn: string;
    /**
     * The elements of this rule to add ordering dependencies on
     */
    readonly dependencyElements: cdk.IDependable[];
    private readonly conditions;
    private readonly actions;
    private readonly listener;
    constructor(parent: cdk.Construct, id: string, props: ApplicationListenerRuleProps);
    /**
     * Add a non-standard condition to this rule
     */
    setCondition(field: string, values: string[] | undefined): void;
    /**
     * Validate the rule
     */
    validate(): string[];
    /**
     * Add a TargetGroup to load balance to
     */
    addTargetGroup(targetGroup: IApplicationTargetGroup): void;
    /**
     * Render the conditions for this rule
     */
    private renderConditions;
}
